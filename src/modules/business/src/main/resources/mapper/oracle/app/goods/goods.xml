<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goods.manage">
    <!-- 카테고리조회 조건절 -->
    <sql id="selectCategoryWhere">
            <if test="ctgNo != null and ctgNo != ''">
                AND CTG_NO = #{ctgNo} -- 카테고리번호
            </if>
            <if test="upCtgNo != null and upCtgNo != ''">
                AND UP_CTG_NO = #{upCtgNo} -- 상위카테고리번호
            </if>
            <if test="dispYn != null and dispYn != ''">
                AND DISP_YN = #{dispYn} -- 전시여부
            </if>
            <if test="ctgLvl != null and ctgLvl != ''">
                AND CTG_LVL = #{ctgLvl} -- 카테고리레벨
            </if>
            <if test="goodsTypeCd != null and goodsTypeCd != ''">
                AND GOODS_TYPE_CD = #{goodsTypeCd} -- 카테고리 상품군
            </if>
    </sql>

    <!-- 신규등록 상품번호 생성 -->
    <select id="selectNewGoodsNo"  resultType="String">
        /* goods.manage.selectNewGoodsNo - 신규등록 상품번호 생성 */
        SELECT fn_getSeq(0, 'GOODS_NO') from dual
    </select>

    <!-- 카테고리조회 -->
	<select id="selectCtgList" resultType="net.danvi.dmall.biz.app.goods.model.CtgVO">
		/* goods.manage.selectCategory - 카테고리 조회 */
		SELECT
			CTG_NO, SITE_NO, UP_CTG_NO, CTG_LVL, CTG_NM , CTG_TYPE , CTG_REQUIRE , CTG_CMS_RATE
		FROM TG_CTG
		WHERE SITE_NO = #{siteNo} -- 사이트번호
		  AND DEL_YN = 'N'
          AND USE_YN = 'Y'
        <if test="goodsTypeCd != null and goodsTypeCd != ''">
          AND GOODS_TYPE_CD = #{goodsTypeCd}
        </if>
		  <if test="goodsContsGbCd != null and goodsContsGbCd != ''">
		  AND GOODS_CONTS_GB_CD=#{goodsContsGbCd}
          </if>
		<include refid="selectCategoryWhere" />
		ORDER  BY SORT_SEQ
    </select>
    <!-- 브랜드조회 -->
    <select id="selectBrandList" resultType="net.danvi.dmall.biz.app.goods.model.BrandVO">
        /* goods.manage.selectBrandList - 브랜드 조회 */
        SELECT
            BRAND_NO,
            BRAND_NM,
            BRAND_ENNM,
            BRAND_EXHBTION_TYPE_CD,
            DISP_YN,
            BRAND_IMG_PATH,
            BRAND_IMG_NM,
            MOUSEOVER_IMG_PATH,
            MOUSEOVER_IMG_NM,
            BRAND_LIST_IMG_PATH as listImgPath,
            BRAND_LIST_IMG_NM as listImgNm,
            BRAND_DTL_IMG_PATH as dtlImgPath,
            BRAND_DTL_IMG_NM as dtlImgNm,
            BRAND_LOGO_IMG_PATH as logoImgPath,
            BRAND_LOGO_IMG_NM as logoImgNm,
            GOODS_TYPE_CD
        FROM TG_BRAND
       WHERE SITE_NO = #{siteNo}
         AND DISP_YN = 'Y'
         <if test="brandNo != null and brandNo != ''">
            AND BRAND_NO IN (${brandNo})
         </if>
        <if test='goodsTypeCd != null and goodsTypeCd != ""'>
            AND INSTR (GOODS_TYPE_CD,#{goodsTypeCd}) > 0
        </if>
    </select>
    
    <select id="selectContactWearBrandList" resultType="net.danvi.dmall.biz.app.goods.model.BrandVO">
    	SELECT B.BRAND_NO, B.BRAND_NM
		FROM TG_CONTACT_WEAR_ATTR A
		LEFT JOIN TG_BRAND B ON A.BRAND_NO = B.BRAND_NO 
		WHERE B.SITE_NO = #{siteNo}
		  AND A.BRAND_NO IS NOT NULL
		GROUP BY B.BRAND_NO, B.BRAND_NM
		ORDER BY B.BRAND_NO
    </select>
    
    <!-- 브랜드관 목록조회 -->
    <select id="selectBrandCategoryList" resultType="net.danvi.dmall.biz.app.goods.model.BrandVO">
        /* goods.manage.selectBrandCategoryList - 브랜드관 목록 조회 */
        SELECT
            BRAND_NO,
            BRAND_NM,
            BRAND_ENNM,
            BRAND_EXHBTION_TYPE_CD,
            DISP_YN,
            BRAND_IMG_PATH,
            BRAND_IMG_NM,
            MOUSEOVER_IMG_PATH,
            MOUSEOVER_IMG_NM,
            BRAND_LIST_IMG_PATH as listImgPath,
            BRAND_LIST_IMG_NM as listImgNm,
            BRAND_DTL_IMG_PATH as dtlImgPath,
            BRAND_DTL_IMG_NM as dtlImgNm,
            BRAND_LOGO_IMG_PATH as logoImgPath,
            BRAND_LOGO_IMG_NM as logoImgNm
        FROM TG_BRAND
       WHERE SITE_NO = #{siteNo}
         AND DISP_YN = 'Y'
         <if test="brandNo != null and brandNo != ''">
            AND BRAND_NO IN (${brandNo})
         </if>
        <if test='goodsTypeCd != null and goodsTypeCd != ""'>
            AND INSTR (GOODS_TYPE_CD,#{goodsTypeCd}) > 0
        </if>
    </select>
    
    <!-- HSCD조회 -->
    <select id="selectHscdList" resultType="net.danvi.dmall.biz.app.setup.delivery.model.HscdVO">
       /* goods.manage.selectHscdList - HS코드 조회 */
	   SELECT SITE_NO, HSCD_SEQ, HSCD, ITEM, REGR_NO, REG_DTTM, UPDR_NO, UPD_DTTM
	     FROM TS_HSCD
	    WHERE SITE_NO = #{siteNo}
    </select>
    <!-- 아이콘조회 -->
    <select id="selectGoodsIconList" resultType="net.danvi.dmall.biz.app.goods.model.GoodsIconVO">
        /* goods.manage.selectGoodsIconList - 아이콘 조회 */
        <![CDATA[
		SELECT
		      ti.ICON_NO
		    , ti.ICON_TYPE_CD
		    , ti.ICON_DISPNM
		    , ti.IMG_PATH
		    , ti.IMG_NM
		    , replace(replace(ti.IMG_PATH,'\',''),'/','')||'_'||ti.IMG_NM AS IMG_FILE_INFO
		    , ti.PRIORRANK
		    , CASE WHEN tgi.icon_no IS NULL THEN 'N' ELSE 'Y' END AS USE_YN
		    , '<img src="' || CASE WHEN ti.ICON_TYPE_CD = '1' THEN '/skin'
                                    WHEN ti.ICON_TYPE_CD = '2' THEN '/resource'
                                    END || ti.IMG_PATH || '/' || ti.IMG_NM || '">' AS ICON_PATH_NM
		 FROM TG_ICON ti
		 LEFT JOIN (
		    SELECT ICON_NO, GOODS_NO FROM TG_GOODS_ICON
		 ) tgi on (ti.ICON_NO = tgi.ICON_NO AND tgi.GOODS_NO = #{goodsNo})
		 WHERE ti.SITE_NO = #{siteNo}
           AND ti.GOODS_TYPE_CD like '%'||#{goodsTypeCd}||'%'
		 ORDER BY ti.PRIORRANK
		 ]]>
    </select>
    <!-- 비전체크 군조회 -->
    <select id="selectGunList" resultType="net.danvi.dmall.biz.app.vision.model.VisionGunVO">
        /* goods.manage.selectGunList - 비전체크 군 조회 */
		SELECT
               DISTINCT A.GUN_NO
              ,C.GOODS_NO
              ,A.GOODS_TYPE_CD
              ,(SELECT GUN_NM FROM TC_VISION_CHECK_GUN WHERE GUN_NO = A.GUN_NO) AS GUN_NM
              ,CASE WHEN B.GUN_NO IS NULL THEN 'N' ELSE 'Y' END AS USE_YN
          FROM TC_VISION_CHECK_GUN A
          LEFT JOIN TG_GOODS_GUN_ATTR B
          ON A.GUN_NO = B.GUN_NO
          INNER JOIN TG_GOODS C
          ON A.GOODS_TYPE_CD = C.GOODS_TYPE_CD
		  WHERE C.GOODS_NO = #{goodsNo}
		  ORDER BY A.GUN_NO
    </select>
    <!-- 고시정보조회 -->
    <select id="selectGoodsNotifyItemList" parameterType="goodsNotifySO"  resultType="goodsNotifyVO">
        /* goods.manage.selectGoodsNotifyItemList - 고시정보조회 */
		SELECT
		       aa.*
		     <if test="goodsNo != null and goodsNo != ''">
		     , l1.ITEM_VALUE
		     </if>
		  FROM (
			SELECT
				    info.NOTIFY_NO
				  , info.NOTIFY_NM
				  , info.DTL_ITEM
				  , item.ITEM_NO
				  , item.ITEM_NM
                  , item.ITEM_SEQ
				  , item.DSCRT
			  FROM TG_NOTIFY_INFO info, TG_NOTIFY_ITEM item
			 WHERE info.NOTIFY_NO = item.NOTIFY_NO
			   AND info.NOTIFY_NO = #{notifyNo}
        <![CDATA[			   AND item.DEL_YN <> 'Y' ]]>
		  ) aa
		  <if test="goodsNo != null and goodsNo != ''">
		  LEFT JOIN ( SELECT GOODS_NO, ITEM_NO, ITEM_VALUE
		        FROM TG_GOODS_NOTIFY
		       WHERE GOODS_NO = #{goodsNo}
		    ) l1 ON  aa.ITEM_NO = l1.ITEM_NO
		  </if>
		  ORDER BY aa.ITEM_SEQ
    </select>

        <!-- 고시정보조회 -->
    <select id="selectNotifyList" parameterType="goodsNotifySO"  resultType="goodsNotifyVO">
        /* goods.manage.selectNotifyList - 고시정보조회 */
	    SELECT
		      NOTIFY_NO
		    , NOTIFY_NM
		    , DTL_ITEM
		    , USE_YN
		    , DEL_YN
	      FROM TG_NOTIFY_INFO
	     WHERE USE_YN = 'Y'
	       AND DEL_YN = 'N'
	     ORDER BY NOTIFY_NO
	</select>

        <!-- 사이트에 설정된 상품 이미지 정보조회 -->
    <select id="selectGoodsSiteInfo" parameterType="net.danvi.dmall.biz.app.goods.model.GoodsDisplayInfoVO" resultType="net.danvi.dmall.biz.app.goods.model.GoodsDisplayInfoVO">
        /* goods.manage.selectGoodsSiteInfo - 상품 이미지 설정 정보 조회 */
        SELECT
              GOODS_DEFAULT_IMG_WIDTH
            , GOODS_DEFAULT_IMG_HEIGHT
            , GOODS_LIST_IMG_WIDTH
            , GOODS_LIST_IMG_HEIGHT
          FROM TS_SITE_DTL
         WHERE SITE_NO = #{siteNo}
    </select>


    <!-- 판매상품목록 검색 조건절 -->
    <sql id="selectGoodsListWhere">
        <!-- 등록일 수정일 조건 -->
        <choose>
          <when test = "searchDateType == 1">
             <if test="searchDateFrom != null and searchDateFrom != ''">
              <![CDATA[
                AND GDS.REG_DTTM >= TO_DATE(#{searchDateFrom}, 'YYYY-MM-DD')
              ]]>
              </if>
              <if test="searchDateTo != null and searchDateTo != ''">
              <![CDATA[
                AND GDS.REG_DTTM < TO_DATE(#{searchDateTo}, 'YYYY-MM-DD') + 1
              ]]>
              </if>
          </when>
          <when test = "searchDateType == 2">
             <if test="searchDateFrom != null and searchDateFrom != ''">
             <![CDATA[
               AND GDS.UPD_DTTM >= TO_DATE(#{searchDateFrom}, 'YYYY-MM-DD')
             ]]>
             </if>
             <if test="searchDateTo != null and searchDateTo != ''">
             <![CDATA[
               AND GDS.UPD_DTTM < TO_DATE(#{searchDateTo}, 'YYYY-MM-DD') + 1
             ]]>
           </if>
          </when>
        </choose>
        <if test="goodsContsGbCd != null and goodsContsGbCd != ''">
		  AND GOODS_CONTS_GB_CD=#{goodsContsGbCd}
        </if>
       <!-- 판매가격 최소 조건-->
        <if test="searchPriceFrom != null and searchPriceFrom != ''">
            <![CDATA[
            AND ITM.SALE_PRICE >= #{searchPriceFrom}
            ]]>
        </if>
        <!-- 판매가격 최대 조건-->
        <if test="searchPriceTo != null and searchPriceTo != ''">
            <![CDATA[
            AND ITM.SALE_PRICE < #{searchPriceTo}
            ]]>
        </if>
        <!-- 판매여부 -->
        <if test="saleYn != null and saleYn != ''">
            <choose>
                <when test="saleYn eq 'Y'.toString()">
	             <![CDATA[
                   AND (GDS.SALE_START_DT <= TO_CHAR(sysdate, 'YYYYMMDD') OR GDS.SALE_START_DT IS NULL)
                   AND (GDS.SALE_END_DT >= TO_CHAR(sysdate, 'YYYYMMDD') OR GDS.SALE_END_DT IS NULL)
                   AND GDS.GOODS_SALE_STATUS_CD = '1'
	             ]]>
                </when>
                <when test="saleYn eq 'N'.toString()">
                    AND GDS.SALE_YN = #{saleYn}
                </when>
            </choose>
        </if>
        <!-- 브랜드 조건(단건) -->
        <if test="searchBrand != null and searchBrand != ''">
            <![CDATA[
            AND GDS.BRAND_NO = #{searchBrand}
            ]]>
        </if>
        <!-- 브랜드 조건(다건) -->
        <if test="searchBrands != null and searchBrands.length > 0">
            AND GDS.BRAND_NO IN (
            <foreach collection="searchBrands" item="a" separator=",">#{a}</foreach>
            )
        </if>
        <!-- 상품판매상태 조건 -->
        <if test="goodsStatus != null and goodsStatus.length > 0">
            AND GDS.GOODS_SALE_STATUS_CD IN (
            <foreach collection="goodsStatus" item="a" separator=",">#{a}</foreach>
            )
        </if>
        <!-- 전시여부 조건 -->
        <if test="goodsDisplay != null and goodsDisplay.length > 0">
            AND GDS.DISP_YN IN (
            <foreach collection="goodsDisplay" item="a" separator=",">#{a}</foreach>
            )
        </if>
        <if test="searchSeller != null and searchSeller != ''">
            AND GDS.SELLER_NO= #{searchSeller}
        </if>
        <!-- 카테고리 조건 -->
        <if test="searchCtg1 != null and searchCtg1 != ''">
            AND EXISTS (
		        SELECT /*+ unnest hash_sj */ 1
		          FROM
	              (
	              		SELECT CTG_NO
	              		FROM
	              		(
							SELECT  DISTINCT CTG_NO
							FROM TG_CTG
		                    <choose>
		                      <when test = "searchCtg4 != null and searchCtg4 != ''">
		                          START WITH CTG_NO = #{searchCtg4}
		                      </when>
		                      <when test = "searchCtg3 != null and searchCtg3 != ''">
		                          START WITH CTG_NO = #{searchCtg3}
		                      </when>
		                      <when test = "searchCtg2 != null and searchCtg2 != ''">
		                          START WITH CTG_NO = #{searchCtg2}
		                      </when>
		                      <when test = "searchCtg1 != null and searchCtg1 != ''">
		                          START WITH CTG_NO = #{searchCtg1}
		                      </when>
		                    </choose>
							AND SITE_NO = #{siteNo}
							CONNECT BY PRIOR CTG_NO = UP_CTG_NO AND SITE_NO = #{siteNo}
							ORDER SIBLINGS BY CTG_NO ASC
		                )
		                UNION ALL
		                    <choose>
                              <when test = "searchCtg4 != null and searchCtg4 != ''">
                                  SELECT TO_NUMBER(#{searchCtg4}) AS CTG_NO FROM DUAL
                              </when>
                              <when test = "searchCtg3 != null and searchCtg3 != ''">
                                  SELECT TO_NUMBER(#{searchCtg3}) AS CTG_NO FROM DUAL
                              </when>
                              <when test = "searchCtg2 != null and searchCtg2 != ''">
                                  SELECT TO_NUMBER(#{searchCtg2}) AS CTG_NO FROM DUAL
                              </when>
                              <when test = "searchCtg1 != null and searchCtg1 != ''">
                                  SELECT TO_NUMBER(#{searchCtg1}) AS CTG_NO FROM DUAL
                              </when>
                            </choose>
	               ) DC2,
                       TG_GOODS_CTG TGC
                 WHERE TGC.SITE_NO = GDS.SITE_NO
		           AND TGC.GOODS_NO = GDS.GOODS_NO
		           AND TGC.CTG_NO = DC2.CTG_NO
		           AND TGC.DEL_YN = 'N'
             )
        </if>
        <!-- 검색어 조건 -->
        <if test="searchWord != null and searchWord != ''">
            <choose>
                <when test = "searchType == 1">
                    AND (UPPER(GOODS_NM) LIKE '%'||UPPER(#{searchWord})||'%'
                        OR GDS.GOODS_NO LIKE '%'||#{searchWord}||'%')
                </when>
                <when test = "searchType == 2">
                    AND GDS.GOODS_NO LIKE '%'||#{searchWord}||'%'
                </when>
                <when test = "searchType == 3">
                    AND UPPER(MODEL_NM) LIKE '%'||UPPER(#{searchWord})||'%'
                </when>
                <when test = "searchType == 4">
                    AND UPPER(MMFT) LIKE '%'||UPPER(#{searchWord})||'%'
                </when>
                <when test="searchType == 5">
                    AND (UPPER(GOODS_NM) LIKE '%'||UPPER(#{searchWord})||'%'
                        OR SEO_SEARCH_WORD LIKE '%'||#{searchWord}||'%')
                </when>
                <when test="searchType == 6">
                    AND UPPER(GOODS_NM) LIKE '%'||UPPER(#{searchWord})||'%'
                </when>
            </choose>
        </if>
        <if test="searchErpItmCd != null and searchErpItmCd != ''">
        AND TPM.ERP_ITM_CODE=#{searchErpItmCd}
        </if>
        
         <if test="ctgMap != null and ctgMap.size > 0">
             AND EXISTS (
                 SELECT 1
                 FROM
                 (
                 SELECT CTG_NO
                 FROM
                 (
                 SELECT DISTINCT CTG_NO
                 FROM TG_CTG
                WHERE CTG_NO IN
                 <foreach collection="ctgMap" item="ctgList" index="index" separator="," open="(" close=")">
                     #{ctgList}
                 </foreach>
                 AND SITE_NO = #{siteNo}
                 )
                 ) DC2,
                 TG_GOODS_CTG TGC
                 WHERE TGC.SITE_NO = GDS.SITE_NO
                 AND TGC.GOODS_NO = GDS.GOODS_NO
                 AND TGC.CTG_NO = DC2.CTG_NO
                 AND TGC.DEL_YN = 'N'

			)
         </if>		
         
         <!-- 다수 제품 번호 검색 조건-->
         <if test="goodsNoMap.size > 0">
         	AND GDS.GOODS_NO IN
         	<foreach collection="goodsNoMap" item="goodsNoList" index="index" separator="," open="(" close=")">
                     #{goodsNoList}
            </foreach>
         </if>

        <if test="goodsNo != null and goodsNo != ''">
            AND GDS.GOODS_NO = #{goodsNo}
        </if>

        <!-- 전시여부 조건 -->
        <if test="erpMapYn != null and erpMapYn.length > 0">
            AND DECODE(TPM.ERP_ITM_CODE,null,'N','Y') IN (
            <foreach collection="erpMapYn" item="a" separator=",">#{a}</foreach>
            )
        </if>
        <if test="gunNo != null and gunNo != ''">
			AND VCG.GUN_NO = #{gunNo}
		</if>
        <!-- 필터 조건 -->
        <if test="searchFilters != null and searchFilters.length > 0">
            AND EXISTS
            (
                SELECT 1
                FROM
                (
                    SELECT FILTER_NO
                    FROM
                    (
                        SELECT DISTINCT FILTER_NO
                        FROM TG_FILTER
                        WHERE FILTER_NO IN
                        <foreach collection="searchFilters" item="filterNo" index="index" separator="," open="(" close=")">
                            #{filterNo}
                        </foreach>
                        AND SITE_NO = #{siteNo}
                    )
                ) DC2,
                TG_GOODS_FILTER TGF
                WHERE TGF.GOODS_NO = GDS.GOODS_NO
                  AND TGF.FILTER_NO = DC2.FILTER_NO
            )
        </if>
        <!-- 내 코드 정보 - 안경 추천 사이즈 조건 -->
        <if test="faceSizeCd != null and faceSizeCd != ''">
            AND EXISTS
            (
                SELECT 1
                FROM
                (
                    SELECT FD_SIZE
                    FROM TG_GOODS_FACE
                    WHERE GOODS_NO = #{goodsNo}
                ) DC2
                WHERE DC2.FD_SIZE = #{faceSizeCd}
            )
        </if>
        <!-- 내 코드 정보 - 얼굴형 조건 -->
        <if test="faceShapeCd != null and faceShapeCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT FD_SHAPE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.FD_SHAPE = #{faceShapeCd}
            )
        </if>
        <!-- 내 코드 정보 - 피부톤 조건 -->
        <if test="faceSkinToneCd != null and faceSkinToneCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT FD_TONE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.FD_TONE = #{faceSkinToneCd}
            )
        </if>
        <!-- 내 코드 정보 - 스타일 조건 -->
        <if test="faceStyleCd != null and faceStyleCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT FD_STYLE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.FD_STYLE = #{faceStyleCd}
            )
        </if>
        <!-- 내 코드 정보 - 눈 모양 조건 -->
        <if test="eyeShapeCd != null and eyeShapeCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT ED_SHAPE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.ED_SHAPE = #{eyeShapeCd}
            )
        </if>
        <!-- 내 코드 정보 - 눈 사이즈 조건 -->
        <if test="eyeSizeCd != null and eyeSizeCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT ED_SIZE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.ED_SIZE = #{eyeSizeCd}
            )
        </if>
        <!-- 내 코드 정보 - 눈 스타일 조건 -->
        <if test="eyeStyleCd != null and eyeStyleCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT ED_STYLE
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.ED_STYLE = #{eyeStyleCd}
            )
        </if>
        <!-- 내 코드 정보 - 동공색 조건 -->
        <if test="eyeColorCd != null and eyeColorCd != ''">
            AND EXISTS
            (
            SELECT 1
            FROM
            (
            SELECT ED_COLOR
            FROM TG_GOODS_FACE
            WHERE GOODS_NO = #{goodsNo}
            ) DC2
            WHERE DC2.ED_COLOR = #{eyeColorCd}
            )
        </if>
        <if test="newGoodsYn != null and newGoodsYn eq 'Y'.toString()">
            AND GDS.NEW_GOODS_YN = #{newGoodsYn}
        </if>
        <if test="stampYn != null and stampYn eq 'Y'.toString()">
            AND GDS.STAMP_YN = #{stampYn}
        </if>
        <if test="normalYn != null and normalYn eq 'Y'.toString()">
            AND GDS.NORMAL_YN = #{normalYn}
        </if>
        <if test="mallOrderYn != null and mallOrderYn eq 'Y'.toString()">
            AND GDS.MALL_ORDER_YN = #{mallOrderYn}
        </if>
        <if test="sellerYn != null and sellerYn eq 'Y'.toString()">
            and GDS.REGR_NO in (
            select SELLER_NO from TS_SELLER where DEL_YN = 'N' and STATUS_CD = '02'
            )
            and GDS.GOODS_TYPE_CD in ('01','02')
        </if>
    </sql>


    <!-- 판매상품목록 필터 조건절 -->
    <sql id="selectGoodsListFilter">
        <where>
        <if test="filterGbCd != null and filterGbCd != ''">
            <if test="searchBrands!=null and searchBrands!=''">
                AND AA.BRAND_NO IN
                <foreach collection="searchBrands" item="brand" open="(" close=")" separator=",">#{brand}</foreach>
            </if>
            <if test="filterCds!=null and filterCds!=''">
                AND AA.FITLER_CD IN
                <foreach collection="filterCds" item="filterCd" open="(" close=")" separator=",">#{filterCd}</foreach>
            </if>
            <!--<if test="frameColorCd!=null and frameColorCd!=''">
                AND
                <foreach collection="frameColorCd" item="frameColorCd" open="(" close=")" separator="or">
                    INSTR (AA.FRAME_COLOR_CD,#{frameColorCd}) > 0
                </foreach>
            </if>
            <if test="sunglassColorCd!=null and sunglassColorCd!=''">
                AND
                <foreach collection="sunglassColorCd" item="sunglassColorCd" open="(" close=")" separator="or">
                 INSTR (AA.SUNGLASS_COLOR_CD,#{sunglassColorCd}) > 0
                </foreach>
            </if>
            <if test="glassColorCd!=null and glassColorCd!=''">
                AND
                <foreach collection="glassColorCd" item="glassColorCd" open="(" close=")" separator="or">
                INSTR (AA.GLASS_COLOR_CD,#{glassColorCd}) > 0
                </foreach>
            </if>
            <if test="contactColorCd!=null and contactColorCd!=''">
                AND
                <foreach collection="contactColorCd" item="contactColorCd" open="(" close=")" separator="or">
                INSTR (AA.CONTACT_COLOR_CD,#{contactColorCd}) > 0
                </foreach>
            </if>

            <if test="frameShapeCd!=null and frameShapeCd!=''">
                AND AA.FRAME_SHAPE_CD IN
                <foreach collection="frameShapeCd" item="frameShapeCd" open="(" close=")" separator=",">#{frameShapeCd}</foreach>
            </if>
            <if test="sunglassShapeCd!=null and sunglassShapeCd!=''">
                AND AA.SUNGLASS_SHAPE_CD IN
                <foreach collection="sunglassShapeCd" item="sunglassShapeCd" open="(" close=")" separator=",">#{sunglassShapeCd}</foreach>
            </if>
            <if test="frameMaterialCd!=null and frameMaterialCd!=''">
                AND AA.FRAME_MATERIAL_CD IN
                <foreach collection="frameMaterialCd" item="frameMaterialCd" open="(" close=")" separator=",">#{frameMaterialCd}</foreach>
            </if>

            <if test="sunglassMaterialCd!=null and sunglassMaterialCd!=''">
                AND AA.SUNGLASS_MATERIAL_CD IN
                <foreach collection="sunglassMaterialCd" item="sunglassMaterialCd" open="(" close=")" separator=",">#{sunglassMaterialCd}</foreach>
            </if>

            <if test="frameSizeCd!=null and frameSizeCd!=''">
                AND AA.FRAME_SIZE_CD IN
                <foreach collection="frameSizeCd" item="frameSizeCd" open="(" close=")" separator=",">#{frameSizeCd}</foreach>
            </if>

            <if test="sunglassSizeCd!=null and sunglassSizeCd!=''">
                AND AA.SUNGLASS_SIZE_CD IN
                <foreach collection="sunglassSizeCd" item="sunglassSizeCd" open="(" close=")" separator=",">#{sunglassSizeCd}</foreach>
            </if>

            <if test="sunglassLensColorCd!=null and sunglassLensColorCd!=''">
                AND AA.SUNGLASS_LENS_COLOR_CD IN
                <foreach collection="sunglassLensColorCd" item="sunglassLensColorCd" open="(" close=")" separator=",">#{sunglassLensColorCd}</foreach>
            </if>

            <if test="glassUsageCd!=null and glassUsageCd!=''">
                AND AA.GLASS_USAGE_CD IN
                <foreach collection="glassUsageCd" item="glassUsageCd" open="(" close=")" separator=",">#{glassUsageCd}</foreach>
            </if>

            <if test="glassFocusCd!=null and glassFocusCd!=''">
                AND AA.GLASS_FOCUS_CD IN
                <foreach collection="glassFocusCd" item="glassFocusCd" open="(" close=")" separator=",">#{glassFocusCd}</foreach>
            </if>

            <if test="glassFunctionCd!=null and glassFunctionCd!=''">
                AND AA.GLASS_FUNCTION_CD IN
                <foreach collection="glassFunctionCd" item="glassFunctionCd" open="(" close=")" separator=",">#{glassFunctionCd}</foreach>
            </if>
            
            <if test="glassMmftCd!=null and glassMmftCd!=''">
                AND AA.GLASS_MMFT_CD IN
                <foreach collection="glassMmftCd" item="glassMmftCd" open="(" close=")" separator=",">#{glassMmftCd}</foreach>
            </if>
            
            <if test="glassThickCd!=null and glassThickCd!=''">
                AND AA.GLASS_THICK_CD IN
                <foreach collection="glassThickCd" item="glassThickCd" open="(" close=")" separator=",">#{glassThickCd}</foreach>
            </if>
            
            <if test="glassDesignCd!=null and glassDesignCd!=''">
                AND AA.GLASS_DESIGN_CD IN
                <foreach collection="glassDesignCd" item="glassDesignCd" open="(" close=")" separator=",">#{glassDesignCd}</foreach>
            </if>

            <if test="contactCycleCd!=null and contactCycleCd!=''">
                AND AA.CONTACT_CYCLE_CD IN
                <foreach collection="contactCycleCd" item="contactCycleCd" open="(" close=")" separator=",">#{contactCycleCd}</foreach>
            </if>

            <if test="contactSizeCd!=null and contactSizeCd!=''">
                AND AA.CONTACT_SIZE_CD IN
                <foreach collection="contactSizeCd" item="contactSizeCd" open="(" close=")" separator=",">#{contactSizeCd}</foreach>
            </if>
            
            <if test="contactPriceCd!=null and contactPriceCd!=''">
                AND AA.CONTACT_PRICE_CD IN
                <foreach collection="contactPriceCd" item="contactPriceCd" open="(" close=")" separator=",">#{contactPriceCd}</foreach>
            </if>
            
            <if test="contactStatusCd!=null and contactStatusCd!=''">
                AND AA.CONTACT_STATUS_CD IN
                <foreach collection="contactStatusCd" item="contactStatusCd" open="(" close=")" separator=",">#{contactStatusCd}</foreach>
            </if>

            <if test="aidShapeCd!=null and aidShapeCd!=''">
                AND AA.AID_SHAPE_CD IN
                <foreach collection="aidShapeCd" item="aidShapeCd" open="(" close=")" separator=",">#{aidShapeCd}</foreach>
            </if>

            <if test="aidLosstypeCd!=null and aidLosstypeCd!=''">
                AND AA.AID_LOSSTYPE_CD IN
                <foreach collection="aidLosstypeCd" item="aidLosstypeCd" open="(" close=")" separator=",">#{aidLosstypeCd}</foreach>
            </if>

            <if test="aidLossdegreeCd!=null and aidLossdegreeCd!=''">
                AND AA.AID_LOSSDEGREE_CD IN
                <foreach collection="aidLossdegreeCd" item="aidLossdegreeCd" open="(" close=")" separator=",">#{aidLossdegreeCd}</foreach>
            </if>-->


            <if test="stPrice!=null and stPrice!=''">
                <![CDATA[
                AND AA.SALE_PRICE >= #{stPrice}
                ]]>
            </if>

            <if test="endPrice!=null and endPrice!=''">
                <![CDATA[
                AND AA.SALE_PRICE <= #{endPrice}
                ]]>
            </if>

        </if>

        </where>
    </sql>
    <!-- 판매상품관리 목록(페이징) 조회 -->
    <!--<select id="selectGoodsListPaging" resultType="goodsVO">
        /* goods.selectGoodsListPaging - 판매상품관리 목록(페이징) 조회 */
        SELECT PAGING_NUM as NUM, PAGING_NUM as ROW_NUM, BB.* FROM (
		 SELECT
			      ROW_NUMBER() OVER(ORDER BY AA.${sidx} ${sord}) PAGING_NUM
                , AA.*
			FROM
			(
			    SELECT A.*
			    /*안경테*/
                ,TFA.SHAPE_CD as FRAME_SHAPE_CD
                ,TFA.MATERIAL_CD as FRAME_MATERIAL_CD
                ,TFA.SIZE_CD as FRAME_SIZE_CD
                ,TFA.COLOR_CD as FRAME_COLOR_CD
                /*선글라스*/
                ,TSA.EYEBALL_METAL_COLOR_CD as SUNGLASS_EYE_METAL_COLOR_CD
                ,TSA.LENS_COLOR_CD as SUNGLASS_LENS_COLOR_CD
                ,TSA.EYEBALL_TOP_COLOR_CD as SUNGLASS_EYE_TOP_COLOR_CD
                ,TSA.TEMPLE_METAL_COLOR_CD as SUNGLASS_TEMPLE_METAL_COLOR_CD
                ,TSA.TEMPLE_EPOXY_COLOR_CD as SUNGLASS_TEMPLE_EPOXY_COLOR_CD
                ,TSA.SHAPE_CD as SUNGLASS_SHAPE_CD
                ,TSA.COLOR_CD as SUNGLASS_COLOR_CD
                ,TSA.MATERIAL_CD as SUNGLASS_MATERIAL_CD
                ,TSA.TIP_COLOR_CD as SUNGLASS_TIP_COLOR_CD
                ,TSA.SIZE_CD as SUNGLASS_SIZE_CD
                /*안경렌즈*/
                ,TGA.MMFT_CD as GLASS_MMFT_CD
                ,TGA.THICK_CD as GLASS_THICK_CD
                ,TGA.DESIGN_CD as GLASS_DESIGN_CD
                /*콘택트렌즈*/
                ,TCA.WEAR_CYCLE_CD as CONTACT_CYCLE_CD
                ,TCA.COLOR_CD as CONTACT_COLOR_CD
                ,TCA.SIZE_CD as CONTACT_SIZE_CD
                ,TCA.PRICE_CD as CONTACT_PRICE_CD
                ,TCA.STATUS_CD as CONTACT_STATUS_CD
                /*보청기*/
                ,THA.HR_TYPE_CD  as AID_LOSSTYPE_CD
                ,THA.HR_DEGREE_CD as AID_LOSSDEGREE_CD
                ,THA.FRM_CD as AID_SHAPE_CD
			    from
			    (
		            SELECT BB.GOODS_NO
		                , MAX(BB.SEO_SEARCH_WORD) SEO_SEARCH_WORD
		            	, MAX(BB.RSV_ONLY_YN)  as RSV_ONLY_YN
                        , MAX(BB.MALL_ITM_CODE)  as MALL_ITM_CODE
                        , MAX(BB.ERP_ITM_CODE)  as ERP_ITM_CODE
                        , MAX(BB.MALL_GOODS_NO )  as MALL_GOODS_NO
                        , MAX(BB.GOODS_TYPE_CD) AS GOODS_TYPE_CD
						, MAX(BB.SELLER_NO) AS SELLER_NO
						, MAX(BB.GOODS_NM) AS GOODS_NM
						, MAX(BB.ITEM_NO) AS ITEM_NO
						, MAX(BB.GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_CD
						, MAX(BB.DISP_YN) AS DISP_YN
						, MAX(BB.GOODS_DLVRC) AS GOODS_DLVRC
						, MAX(BB.DLVR_SET_CD) AS DLVR_SET_CD
						, MAX(BB.PACK_UNIT_DLVRC) AS PACK_UNIT_DLVRC
						, MAX(BB.DEFAULT_DLVRC_TYPE_CD) AS DEFAULT_DLVRC_TYPE_CD
						, MAX(BB.DEFAULT_DLVRC) AS DEFAULT_DLVRC
						, MAX(BB.DEFAULT_DLVR_MIN_DLVRC) AS DEFAULT_DLVR_MIN_DLVRC
						, MAX(BB.MODEL_NM) AS MODEL_NM
						, MAX(BB.SMR_GOODS_NM) AS SMR_GOODS_NM
						, MAX(BB.PRE_GOODS_YN) AS PRE_GOODS_YN
						, MAX(BB.PR_WORDS) AS PR_WORDS
						, MAX(BB.INWARE_SCD_SCH) AS INWARE_SCD_SCH
						, MAX(BB.MMFT) AS MMFT
						, BB.GOODS_IMG_01 AS GOODS_IMG_01
						, BB.GOODS_IMG_02 AS GOODS_IMG_02
						, BB.GOODS_IMG_03 AS GOODS_IMG_03
						, BB.GOODS_DISP_IMG_A AS GOODS_DISP_IMG_A
						, BB.GOODS_DISP_IMG_B AS GOODS_DISP_IMG_B
						, BB.GOODS_DISP_IMG_C AS GOODS_DISP_IMG_C
						, BB.GOODS_DISP_IMG_D AS GOODS_DISP_IMG_D
						, BB.GOODS_DISP_IMG_E AS GOODS_DISP_IMG_E
						, BB.GOODS_DISP_IMG_M AS GOODS_DISP_IMG_M
						, BB.GOODS_THUM_IMG AS GOODS_THUM_IMG
						, BB.ICON_IMGS AS ICON_IMGS
						, MAX(BB.REG_DTTM) AS REG_DTTM
						, MAX(BB.UPD_DTTM) AS UPD_DTTM
						, MAX(BB.ACCM_SALE_AMT) AS ACCM_SALE_AMT
						, MAX(BB.ACCM_SALE_CNT) AS ACCM_SALE_CNT
						, MAX(BB.ACCM_GOODSLETT_CNT) AS ACCM_GOODSLETT_CNT
                        , MAX(BB.GOODS_SVMN_POLICY_USE_YN) AS GOODS_SVMN_POLICY_USE_YN
                        , CASE WHEN MAX(BB.GOODS_SVMN_POLICY_USE_YN) = 'Y' THEN
                            (SELECT SVMN_PVD_RATE FROM TS_SITE WHERE SITE_NO=#{siteNo})
                          ELSE
                            MAX(BB.GOODS_SVMN_AMT)
                          END
                          AS GOODS_SVMN_AMT
						, MAX(BB.GOODS_SCORE) AS GOODS_SCORE
                        , MAX(BB.BRAND_NO) AS BRAND_NO
						, MAX(BB.BRAND_NM) AS BRAND_NM
						, MAX(BB.ITEM_NM) AS ITEM_NM
						, MAX(BB.CUSTOMER_PRICE) AS CUSTOMER_PRICE
						, MAX(BB.SALE_PRICE) AS SALE_PRICE
						, MAX(BB.SALE_RATE) AS SALE_RATE
						, MAX(BB.SUPPLY_PRICE) AS SUPPLY_PRICE
						, MAX(BB.SEP_SUPPLY_PRICE_YN) AS SEP_SUPPLY_PRICE_YN
						, MAX(BB.COMMISION_RATE) AS COMMISION_RATE
						, MAX(BB.PRMT_DC_VALUE) AS PRMT_DC_VALUE
                        , MAX(BB.PRMT_DC_GB_CD) AS PRMT_DC_GB_CD
                        , MAX(BB.PRMT_TYPE_CD) AS PRMT_TYPE_CD
                        , MAX(BB.FIRST_BUY_SPC_PRICE) AS FIRST_BUY_SPC_PRICE
						, MAX(BB.STOCK_QTT) AS STOCK_QTT
						, MAX(BB.AVAIL_STOCK_QTT) AS AVAIL_STOCK_QTT
						, MAX(BB.ADULT_CERTIFY_YN) AS ADULT_CERTIFY_YN
						, MAX(BB.BASKET_SET_CNT) AS BASKET_SET_CNT
						, MAX(BB.FAVGOODS_SET_CNT) AS FAVGOODS_SET_CNT
						, MAX(BB.GOODS_INQ_CNT) AS GOODS_INQ_CNT
						, MAX(BB.SITE_NO) AS SITE_NO
						, MAX(BB.SELLER_NM) AS SELLER_NM
						, MAX(BB.SELLER_CMS_RATE) AS SELLER_CMS_RATE
						, MAX(BB.GOODS_SALE_STATUS_NM) AS GOODS_SALE_STATUS_NM
						, MAX(BB.GOODSEACH_DLVRC) AS GOODSEACH_DLVRC
 					    ,(SELECT MAX(fn_categoryName(TGC.CTG_NO, #{siteNo}))
 					        FROM TG_GOODS_CTG TGC
                           WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) AS CTG_NAME
                         ,(SELECT
                            LISTAGG(fn_categoryName(TGC.CTG_NO, 1), ',') WITHIN GROUP (ORDER BY fn_categoryName(TGC.CTG_NO, 1)) AS CTG_ARR
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_ARR
                         ,(SELECT
                              MAX(TC.CTG_CMS_RATE) AS CTG_CMS_RATE
                             FROM TG_GOODS_CTG TGC, TG_CTG TC
                             WHERE TGC.CTG_NO = TC.CTG_NO
                             AND TGC.SITE_NO = TC.SITE_NO
                             AND TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_CMS_RATE
                         ,(SELECT
                              LISTAGG(TC.CTG_CMS_RATE, ',') WITHIN GROUP (ORDER BY TC.CTG_CMS_RATE) AS CTG_CMS_RATE_ARR
                             FROM TG_GOODS_CTG TGC, TG_CTG TC
                             WHERE TGC.CTG_NO = TC.CTG_NO
                             AND TGC.SITE_NO = TC.SITE_NO
                             AND TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_CMS_RATE_ARR
                         ,(SELECT
                              LISTAGG(TGC.DLGT_CTG_YN, ',') WITHIN GROUP (ORDER BY TGC.DLGT_CTG_YN) AS DLGT_CTG_ARR
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) DLGT_CTG_ARR
                          ,(SELECT
                              MAX(DLGT_CTG_YN) AS DLGT_CTG_YN
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) DLGT_CTG_YN
                           &lt;!&ndash; /*안경테*/
                            ,(select TFA.SHAPE_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_SHAPE_CD
                            ,(select TFA.MATERIAL_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_MATERIAL_CD
                            ,(select TFA.SIZE_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_SIZE_CD
                            ,(select TFA.COLOR_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO)  as FRAME_COLOR_CD
                            /*선글라스*/
                            ,(select TSA.EYEBALL_METAL_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_EYE_METAL_COLOR_CD
                            ,(select TSA.LENS_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_LENS_COLOR_CD
                            ,(select TSA.EYEBALL_TOP_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_EYE_TOP_COLOR_CD
                            ,(select TSA.TEMPLE_METAL_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TEMPLE_METAL_COLOR_CD
                            ,(select TSA.TEMPLE_EPOXY_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TEMPLE_EPOXY_COLOR_CD
                            ,(select TSA.SHAPE_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_SHAPE_CD
                            ,(select TSA.COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_COLOR_CD
                            ,(select TSA.MATERIAL_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_MATERIAL_CD
                            ,(select TSA.TIP_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TIP_COLOR_CD
                            ,(select TSA.SIZE_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO)  as SUNGLASS_SIZE_CD
                            /*안경렌즈*/
                            ,(select TGA.MMFT_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_MMFT_CD
                            ,(select TGA.THICK_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_THICK_CD
                            ,(select TGA.DESIGN_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_DESIGN_CD
                            /*콘택트렌즈*/
                            ,(select TCA.WEAR_CYCLE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_CYCLE_CD
                            ,(select TCA.COLOR_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_COLOR_CD
                            ,(select TCA.SIZE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_SIZE_CD
                            ,(select TCA.PRICE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_PRICE_CD
                            ,(select TCA.STATUS_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_STATUS_CD
                            /*보청기*/
                            ,(select THA.HR_TYPE_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_LOSSTYPE_CD
                            ,(select THA.HR_DEGREE_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_LOSSDEGREE_CD
                            ,(select THA.FRM_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_SHAPE_CD
                            &ndash;&gt;
		              FROM (
		                    SELECT /*+ INDEX(GDS IDX_TG_GOODS_003)   INDEX(ITM IDX_TG_ITEM_001) */
                                 TPM.*,
                                 /* (SELECT MAX(MALL_ITM_CODE) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS MALL_ITM_CODE ,
                                (SELECT MAX(ERP_ITM_CODE) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS ERP_ITM_CODE ,
                                (SELECT MAX(MALL_GOODS_NO) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS MALL_GOODS_NO ,*/
                                 GDS.SEO_SEARCH_WORD,
		                         GDS.GOODS_NO,
                                 GDS.GOODS_TYPE_CD,
		                         GDS.SELLER_NO,
		                        (SELECT SELLER_NM FROM TS_SELLER WHERE SELLER_NO=GDS.SELLER_NO) AS SELLER_NM ,
		                        (SELECT SELLER_CMS_RATE FROM TS_SELLER WHERE SELLER_NO=GDS.SELLER_NO) AS SELLER_CMS_RATE ,
		                         GDS.GOODS_NM,
		                         GDS.ITEM_NO,
		                         GDS.GOODS_SALE_STATUS_CD,
		                         fn_getcodenm('GOODS_SALE_STATUS_CD', GDS.GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_NM,
		                         GDS.DISP_YN,
		                         GDS.GOODSEACH_DLVRC AS GOODS_DLVRC,
								 GDS.RSV_ONLY_YN,
		                         GDS.DLVR_SET_CD,
		                         GDS.PACK_UNIT_DLVRC,
		                         TS.DEFAULT_DLVRC_TYPE_CD,
		                         TS.DEFAULT_DLVRC,
		                         TS.DEFAULT_DLVR_MIN_DLVRC,
		                         (CASE WHEN GDS.DLVR_SET_CD = '2' THEN  0
		                                 WHEN GDS.DLVR_SET_CD = '3' THEN NVL(GDS.GOODSEACH_DLVRC, 0)
		                                 WHEN GDS.DLVR_SET_CD = '4' THEN NVL(GDS.PACK_UNIT_DLVRC, 0)
		                            ELSE (
		                                  CASE WHEN TS.DEFAULT_DLVRC_TYPE_CD = '2' THEN NVL(TS.DEFAULT_DLVRC, 0)
		                                       WHEN TS.DEFAULT_DLVRC_TYPE_CD = '3' THEN NVL(TS.DEFAULT_DLVR_MIN_DLVRC, 0)
		                                       ELSE 0
		                                  END
		                            )
		                        END ) AS GOODSEACH_DLVRC,
		                         GDS.MODEL_NM,
		                         GDS.SMR_GOODS_NM,
		                         GDS.PRE_GOODS_YN,
		                         GDS.PR_WORDS,
		                         GDS.INWARE_SCD_SCH,
		                         GDS.MMFT,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '01') AS GOODS_IMG_01,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '02') AS GOODS_IMG_02,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '03') AS GOODS_IMG_03,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'A') AS GOODS_DISP_IMG_A,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'B') AS GOODS_DISP_IMG_B,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'C') AS GOODS_DISP_IMG_C,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'D') AS GOODS_DISP_IMG_D,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'E') AS GOODS_DISP_IMG_E,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'M') AS GOODS_DISP_IMG_M,
		                         (SELECT B.IMG_PATH||'_'||B.IMG_NM
	                                FROM TG_GOODS_IMG_SET A, TG_GOODS_IMG_DTL B
	                                WHERE A.GOODS_IMGSET_NO = B.GOODS_IMGSET_NO
	                                AND A.GOODS_NO = GDS.GOODS_NO
	                                AND B.GOODS_IMG_TYPE = '02'
	                                AND A.DLGT_IMG_YN = 'N'
	                                AND ROWNUM = 1
	                             ) AS GOODS_THUM_IMG,
		                         fn_getGoodsIcon(GDS.GOODS_NO, '5') AS ICON_IMGS,
		                         GDS.REG_DTTM,
		                         GDS.UPD_DTTM,
		                         NVL(GDS.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
		                         NVL(GDS.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
		                         NVL(GDS.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
                                 GDS.GOODS_SVMN_POLICY_USE_YN,
		                         NVL(GDS.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
		                         NVL(GDS.GOODS_SCORE,0) AS GOODS_SCORE,
                                 GDS.BRAND_NO,
		                         fn_getBrandNm(GDS.BRAND_NO) AS BRAND_NM,
		                         ITM.ITEM_NM,
		                         NVL(ITM.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
		                         NVL(ITM.SALE_PRICE,0) AS SALE_PRICE,
                				 decode(nvl(ITM.CUSTOMER_PRICE,0), 0, 0, 100-(ITM.SALE_PRICE/ITM.CUSTOMER_PRICE)*100) as SALE_RATE,
		                         NVL(ITM.SUPPLY_PRICE, 0)  AS SUPPLY_PRICE,
		                         ITM.SEP_SUPPLY_PRICE_YN AS SEP_SUPPLY_PRICE_YN,
		                         CONCAT(ROUND((ITM.SALE_PRICE-ITM.SUPPLY_PRICE)/decode(ITM.SALE_PRICE*100,0,null,ITM.SALE_PRICE*100)),'%') AS COMMISION_RATE,
		                         NVL( (SELECT MAX(PRMT_DC_VALUE)
		                                 FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
		                                 WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                           AND TPTG.GOODS_NO = GDS.GOODS_NO
                                           AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
		                                   AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') ,0) AS PRMT_DC_VALUE,
                                  (SELECT MAX(PRMT_DC_GB_CD)
                                    FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_DC_GB_CD,
                                 (SELECT MAX(PRMT_TYPE_CD)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_TYPE_CD,
                                  (SELECT MAX(FIRST_BUY_SPC_PRICE)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS FIRST_BUY_SPC_PRICE,
		                         NVL(ITM.STOCK_QTT,0) AS STOCK_QTT,
		                         (CASE WHEN TS.STOCK_SET_YN = 'Y' AND TS.AVAIL_STOCK_SALE_YN = 'Y'
		                               THEN NVL(TS.AVAIL_STOCK_QTT,0)
		                               ELSE 0 END) AS AVAIL_STOCK_QTT,
		                         GDS.ADULT_CERTIFY_YN,
		                         NVL(GDS.BASKET_SET_CNT,0) AS BASKET_SET_CNT,
		                         NVL(GDS.FAVGOODS_SET_CNT,0) AS FAVGOODS_SET_CNT,
		                         NVL(GDS.GOODS_INQ_CNT,0) AS GOODS_INQ_CNT,
		                         GDS.SITE_NO
		                    FROM  TG_GOODS GDS
		                    	LEFT JOIN TG_GOODS_GUN_ATTR GGA ON GDS.GOODS_NO = GGA.GOODS_NO
								LEFT JOIN TC_VISION_CHECK_GUN VCG ON GGA.GUN_NO = VCG.GUN_NO
		                    , TG_ITEM ITM
                                LEFT OUTER JOIN TI_ERP_PRD_MAPPING TPM
                                ON TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
		                        , TS_SITE TS
		                    WHERE GDS.ITEM_NO = ITM.ITEM_NO
		                      AND GDS.SITE_NO = TS.SITE_NO
		                      AND GDS.SITE_NO = #{siteNo}
		                      AND GDS.DEL_YN = 'N'
		                      AND ITM.DEL_YN = 'N'
		                      <include refid="selectGoodsListWhere" />
		                      &lt;!&ndash;
		                      /*사전예약상품 제외*/
		                       <if test="adminYn != 'Y'.toString()">
                              AND NOT EXISTS (
                                      SELECT PG.GOODS_NO
                                        FROM TP_PROMOTION PM,TP_PROMOTION_TARGET_GOODS PG
                                       WHERE PM.PRMT_NO = PG.PRMT_NO
                                         AND PM.PRMT_TYPE_CD='05'
                                         AND PG.GOODS_NO = GDS.GOODS_NO
                                )
                              </if> &ndash;&gt;
	              ) BB GROUP BY BB.GOODS_NO
		              &lt;!&ndash;<include refid="common.sortSql" />&ndash;&gt;
			      ) A
                    LEFT OUTER JOIN TG_FRAMES_ATTR TFA
                    ON A.GOODS_NO = TFA.GOODS_NO
                    LEFT OUTER JOIN TG_SUNGLASS_ATTR TSA
                    ON A.GOODS_NO = TSA.GOODS_NO
                    LEFT OUTER JOIN TG_GLASSES_LENS_ATTR TGA
                    ON A.GOODS_NO = TGA.GOODS_NO
                    LEFT OUTER JOIN TG_CONTACT_LENS_ATTR TCA
                    ON A.GOODS_NO = TCA.GOODS_NO
                    LEFT OUTER JOIN TG_HA_ATTR THA
                    ON A.GOODS_NO = THA.GOODS_NO
			) AA
        <include refid="selectGoodsListFilter" />
        ) BB
        <include refid="common.pageSql" />

    </select>-->
    <!-- 판매상품관리 목록(페이징) 조회 -->
    <select id="selectGoodsListPaging" resultType="goodsVO">
        /* goods.selectGoodsListPaging - 판매상품관리 목록(페이징) 조회 */
        SELECT PAGING_NUM as NUM, tot_cnt - PAGING_NUM + 1 as SORT_NUM, BB.*
            ,(SELECT fn_getCuoponAvailInfo(BB.GOODS_NO,'CPAVL','') FROM DUAL) AS COUPON_AVL_INFO
        FROM (
		 SELECT
			      ROW_NUMBER() OVER(ORDER BY AA.${sidx} ${sord}) PAGING_NUM
                , AA.*
			FROM
			(
			    SELECT A.*, count(*) over() as tot_cnt
			    from
			    (
		            SELECT BB.GOODS_NO
		                , MAX(BB.SEO_SEARCH_WORD) SEO_SEARCH_WORD
		            	, MAX(BB.RSV_ONLY_YN)  as RSV_ONLY_YN
                        , MAX(BB.MALL_ITM_CODE)  as MALL_ITM_CODE
                        , MAX(BB.ERP_ITM_CODE)  as ERP_ITM_CODE
                        , MAX(BB.MALL_GOODS_NO )  as MALL_GOODS_NO
                        , MAX(BB.GOODS_TYPE_CD) AS GOODS_TYPE_CD
						, MAX(BB.SELLER_NO) AS SELLER_NO
						, MAX(BB.GOODS_NM) AS GOODS_NM
						, MAX(BB.ITEM_NO) AS ITEM_NO
						, MAX(BB.GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_CD
						, MAX(BB.DISP_YN) AS DISP_YN
						, MAX(BB.GOODS_DLVRC) AS GOODS_DLVRC
						, MAX(BB.DLVR_SET_CD) AS DLVR_SET_CD
						, MAX(BB.PACK_UNIT_DLVRC) AS PACK_UNIT_DLVRC
						, MAX(BB.DEFAULT_DLVRC_TYPE_CD) AS DEFAULT_DLVRC_TYPE_CD
						, MAX(BB.DEFAULT_DLVRC) AS DEFAULT_DLVRC
						, MAX(BB.DEFAULT_DLVR_MIN_DLVRC) AS DEFAULT_DLVR_MIN_DLVRC
						, MAX(BB.MODEL_NM) AS MODEL_NM
						, MAX(BB.SMR_GOODS_NM) AS SMR_GOODS_NM
						, MAX(BB.PRE_GOODS_YN) AS PRE_GOODS_YN
                        , MAX(BB.STAMP_YN) AS STAMP_YN
						, MAX(BB.PR_WORDS) AS PR_WORDS
						, MAX(BB.INWARE_SCD_SCH) AS INWARE_SCD_SCH
						, MAX(BB.MMFT) AS MMFT
						, MAX(BB.GOODS_IMG_02) AS GOODS_IMG_02
						, MAX(BB.ICON_IMGS) AS ICON_IMGS
						, MAX(BB.REG_DTTM) AS REG_DTTM
						, MAX(BB.UPD_DTTM) AS UPD_DTTM
						, MAX(BB.ACCM_SALE_AMT) AS ACCM_SALE_AMT
						, MAX(BB.ACCM_SALE_CNT) AS ACCM_SALE_CNT
						, MAX(BB.ACCM_GOODSLETT_CNT) AS ACCM_GOODSLETT_CNT
                        , MAX(BB.GOODS_SVMN_POLICY_USE_YN) AS GOODS_SVMN_POLICY_USE_YN
                        , CASE WHEN MAX(BB.GOODS_SVMN_POLICY_USE_YN) = 'Y' THEN
                            (SELECT SVMN_PVD_RATE FROM TS_SITE WHERE SITE_NO=#{siteNo})
                          ELSE
                            MAX(BB.GOODS_SVMN_AMT)
                          END
                          AS GOODS_SVMN_AMT
						, MAX(BB.GOODS_SCORE) AS GOODS_SCORE
                        , MAX(BB.BRAND_NO) AS BRAND_NO
						, MAX(BB.BRAND_NM) AS BRAND_NM
						, MAX(BB.ITEM_NM) AS ITEM_NM
						, MAX(BB.CUSTOMER_PRICE) AS CUSTOMER_PRICE
						, MAX(BB.SALE_PRICE) AS SALE_PRICE
						, MAX(BB.SALE_RATE) AS SALE_RATE
						, MAX(BB.SUPPLY_PRICE) AS SUPPLY_PRICE
						, MAX(BB.SEP_SUPPLY_PRICE_YN) AS SEP_SUPPLY_PRICE_YN
						, MAX(BB.COMMISION_RATE) AS COMMISION_RATE
						, MAX(BB.PRMT_DC_VALUE) AS PRMT_DC_VALUE
                        , MAX(BB.PRMT_DC_GB_CD) AS PRMT_DC_GB_CD
                        , MAX(BB.PRMT_TYPE_CD) AS PRMT_TYPE_CD
                        , MAX(BB.FIRST_BUY_SPC_PRICE) AS FIRST_BUY_SPC_PRICE
						, MAX(BB.STOCK_QTT) AS STOCK_QTT
						, MAX(BB.AVAIL_STOCK_QTT) AS AVAIL_STOCK_QTT
						, MAX(BB.ADULT_CERTIFY_YN) AS ADULT_CERTIFY_YN
						, MAX(BB.BASKET_SET_CNT) AS BASKET_SET_CNT
						, MAX(BB.FAVGOODS_SET_CNT) AS FAVGOODS_SET_CNT
						, MAX(BB.GOODS_INQ_CNT) AS GOODS_INQ_CNT
						, MAX(BB.SITE_NO) AS SITE_NO
						, MAX(BB.SELLER_NM) AS SELLER_NM
						, MAX(BB.SELLER_CMS_RATE) AS SELLER_CMS_RATE
						, MAX(BB.GOODS_SALE_STATUS_NM) AS GOODS_SALE_STATUS_NM
						, MAX(BB.GOODSEACH_DLVRC) AS GOODSEACH_DLVRC
		                , MAX(BB.MULTI_OPT_YN) as MULTI_OPT_YN
 					    ,(SELECT MAX(fn_categoryName(TGC.CTG_NO, #{siteNo}))
 					        FROM TG_GOODS_CTG TGC
                           WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) AS CTG_NAME
                         ,(SELECT
                            LISTAGG(fn_categoryName(TGC.CTG_NO, 1), ',') WITHIN GROUP (ORDER BY fn_categoryName(TGC.CTG_NO, 1)) AS CTG_ARR
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_ARR
                         ,(SELECT
                              MAX(TC.CTG_CMS_RATE) AS CTG_CMS_RATE
                             FROM TG_GOODS_CTG TGC, TG_CTG TC
                             WHERE TGC.CTG_NO = TC.CTG_NO
                             AND TGC.SITE_NO = TC.SITE_NO
                             AND TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_CMS_RATE
                         ,(SELECT
                              LISTAGG(TC.CTG_CMS_RATE, ',') WITHIN GROUP (ORDER BY TC.CTG_CMS_RATE) AS CTG_CMS_RATE_ARR
                             FROM TG_GOODS_CTG TGC, TG_CTG TC
                             WHERE TGC.CTG_NO = TC.CTG_NO
                             AND TGC.SITE_NO = TC.SITE_NO
                             AND TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) CTG_CMS_RATE_ARR
                         ,(SELECT
                              LISTAGG(TGC.DLGT_CTG_YN, ',') WITHIN GROUP (ORDER BY TGC.DLGT_CTG_YN) AS DLGT_CTG_ARR
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) DLGT_CTG_ARR
                          ,(SELECT
                              MAX(DLGT_CTG_YN) AS DLGT_CTG_YN
                             FROM TG_GOODS_CTG TGC
                             WHERE TGC.GOODS_NO  = BB.GOODS_NO
                             AND TGC.SITE_NO  =  #{siteNo}
                             AND TGC.DEL_YN = 'N'
                         ) DLGT_CTG_YN
                            /*안경테*/
                            ,(select TFA.SHAPE_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_SHAPE_CD
                            ,(select TFA.MATERIAL_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_MATERIAL_CD
                            ,(select TFA.SIZE_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO) as FRAME_SIZE_CD
                            ,(select TFA.COLOR_CD from TG_FRAMES_ATTR TFA WHERE TFA.GOODS_NO = BB.GOODS_NO)  as FRAME_COLOR_CD
                            /*선글라스*/
                            ,(select TSA.EYEBALL_METAL_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_EYE_METAL_COLOR_CD
                            ,(select TSA.LENS_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_LENS_COLOR_CD
                            ,(select TSA.EYEBALL_TOP_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_EYE_TOP_COLOR_CD
                            ,(select TSA.TEMPLE_METAL_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TEMPLE_METAL_COLOR_CD
                            ,(select TSA.TEMPLE_EPOXY_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TEMPLE_EPOXY_COLOR_CD
                            ,(select TSA.SHAPE_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_SHAPE_CD
                            ,(select TSA.COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_COLOR_CD
                            ,(select TSA.MATERIAL_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_MATERIAL_CD
                            ,(select TSA.TIP_COLOR_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO) as SUNGLASS_TIP_COLOR_CD
                            ,(select TSA.SIZE_CD from TG_SUNGLASS_ATTR TSA WHERE TSA.GOODS_NO = BB.GOODS_NO)  as SUNGLASS_SIZE_CD
                            /*안경렌즈*/
                            ,(select TGA.MMFT_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_MMFT_CD
                            ,(select TGA.THICK_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_THICK_CD
                            ,(select TGA.DESIGN_CD from TG_GLASSES_LENS_ATTR TGA WHERE TGA.GOODS_NO = BB.GOODS_NO) as GLASS_DESIGN_CD
                            /*콘택트렌즈*/
                            ,(select TCA.WEAR_CYCLE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_CYCLE_CD
                            ,(select TCA.COLOR_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_COLOR_CD
                            ,(select TCA.SIZE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_SIZE_CD
                            ,(select TCA.PRICE_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_PRICE_CD
                            ,(select TCA.STATUS_CD from TG_CONTACT_LENS_ATTR TCA WHERE TCA.GOODS_NO = BB.GOODS_NO) as CONTACT_STATUS_CD
                            /*보청기*/
                            ,(select THA.HR_TYPE_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_LOSSTYPE_CD
                            ,(select THA.HR_DEGREE_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_LOSSDEGREE_CD
                            ,(select THA.FRM_CD from TG_HA_ATTR THA WHERE THA.GOODS_NO = BB.GOODS_NO) as AID_SHAPE_CD

		              FROM (
		                    SELECT /*+ INDEX(GDS IDX_TG_GOODS_003)   INDEX(ITM IDX_TG_ITEM_001) */
                                  (SELECT MAX(MALL_ITM_CODE) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS MALL_ITM_CODE ,
                                (SELECT MAX(ERP_ITM_CODE) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS ERP_ITM_CODE ,
                                (SELECT MAX(MALL_GOODS_NO) FROM TI_ERP_PRD_MAPPING TPM
                               WHERE TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                                )    AS MALL_GOODS_NO ,
                                 GDS.SEO_SEARCH_WORD,
		                         GDS.GOODS_NO,
                                 GDS.GOODS_TYPE_CD,
		                         GDS.SELLER_NO,
		                        (SELECT SELLER_NM FROM TS_SELLER WHERE SELLER_NO=GDS.SELLER_NO) AS SELLER_NM ,
		                        (SELECT SELLER_CMS_RATE FROM TS_SELLER WHERE SELLER_NO=GDS.SELLER_NO) AS SELLER_CMS_RATE ,
		                         GDS.GOODS_NM,
		                         GDS.ITEM_NO,
		                         GDS.GOODS_SALE_STATUS_CD,
		                         fn_getCodeNm('GOODS_SALE_STATUS_CD', GDS.GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_NM,
		                         GDS.DISP_YN,
		                         GDS.GOODSEACH_DLVRC AS GOODS_DLVRC,
								 GDS.RSV_ONLY_YN,
		                         GDS.DLVR_SET_CD,
		                         GDS.PACK_UNIT_DLVRC,
		                         TS.DEFAULT_DLVRC_TYPE_CD,
		                         TS.DEFAULT_DLVRC,
		                         TS.DEFAULT_DLVR_MIN_DLVRC,
		                         (CASE WHEN GDS.DLVR_SET_CD = '2' THEN  0
		                                 WHEN GDS.DLVR_SET_CD = '3' THEN NVL(GDS.GOODSEACH_DLVRC, 0)
		                                 WHEN GDS.DLVR_SET_CD = '4' THEN NVL(GDS.PACK_UNIT_DLVRC, 0)
		                            ELSE (
		                                  CASE WHEN TS.DEFAULT_DLVRC_TYPE_CD = '2' THEN NVL(TS.DEFAULT_DLVRC, 0)
		                                       WHEN TS.DEFAULT_DLVRC_TYPE_CD = '3' THEN NVL(TS.DEFAULT_DLVR_MIN_DLVRC, 0)
		                                       ELSE 0
		                                  END
		                            )
		                        END ) AS GOODSEACH_DLVRC,
		                         GDS.MODEL_NM,
		                         GDS.SMR_GOODS_NM,
		                         GDS.PRE_GOODS_YN,
                                 GDS.STAMP_YN,
		                         GDS.PR_WORDS,
		                         GDS.INWARE_SCD_SCH,
		                         GDS.MMFT,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '02') AS GOODS_IMG_02,
		                         fn_getGoodsIcon(GDS.GOODS_NO, '5') AS ICON_IMGS,
		                         GDS.REG_DTTM,
		                         GDS.UPD_DTTM,
		                         NVL(GDS.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
		                         NVL(GDS.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
		                         NVL(GDS.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
                                 GDS.GOODS_SVMN_POLICY_USE_YN,
		                         NVL(GDS.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
		                         NVL(GDS.GOODS_SCORE,0) AS GOODS_SCORE,
                                 GDS.BRAND_NO,
		                         fn_getBrandNm(GDS.BRAND_NO) AS BRAND_NM,
		                         ITM.ITEM_NM,
		                         NVL(ITM.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
		                         NVL(ITM.SALE_PRICE,0) AS SALE_PRICE,
                				 decode(nvl(ITM.CUSTOMER_PRICE,0), 0, 0, 100-(ITM.SALE_PRICE/ITM.CUSTOMER_PRICE)*100) as SALE_RATE,
		                         NVL(ITM.SUPPLY_PRICE, 0)  AS SUPPLY_PRICE,
		                         ITM.SEP_SUPPLY_PRICE_YN AS SEP_SUPPLY_PRICE_YN,
		                         CONCAT(ROUND((ITM.SALE_PRICE-ITM.SUPPLY_PRICE)/decode(ITM.SALE_PRICE*100,0,null,ITM.SALE_PRICE*100)),'%') AS COMMISION_RATE,
		                         NVL( (SELECT MAX(PRMT_DC_VALUE)
		                                 FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
		                                 WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                           AND TPTG.GOODS_NO = GDS.GOODS_NO
                                           AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
		                                   AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') ,0) AS PRMT_DC_VALUE,
                                  (SELECT MAX(PRMT_DC_GB_CD)
                                    FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_DC_GB_CD,
                                 (SELECT MAX(PRMT_TYPE_CD)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_TYPE_CD,
                                  (SELECT MAX(FIRST_BUY_SPC_PRICE)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS FIRST_BUY_SPC_PRICE,
		                         /*NVL(ITM.STOCK_QTT,0) AS STOCK_QTT,*/
		                         (SELECT SUM(STOCK_QTT) FROM TG_ITEM WHERE GOODS_NO=GDS.GOODS_NO AND USE_YN='Y') AS STOCK_QTT,
		                         (CASE WHEN TS.STOCK_SET_YN = 'Y' AND TS.AVAIL_STOCK_SALE_YN = 'Y'
		                               THEN NVL(TS.AVAIL_STOCK_QTT,0)
		                               ELSE 0 END) AS AVAIL_STOCK_QTT,
		                         GDS.ADULT_CERTIFY_YN,
		                         NVL(GDS.BASKET_SET_CNT,0) AS BASKET_SET_CNT,
		                         NVL(GDS.FAVGOODS_SET_CNT,0) AS FAVGOODS_SET_CNT,
		                         NVL(GDS.GOODS_INQ_CNT,0) AS GOODS_INQ_CNT,
		                         GDS.SITE_NO,
		                         GDS.MULTI_OPT_YN
		                    FROM  TG_GOODS GDS
							, TS_SITE TS
		                    , TG_ITEM ITM
		                     LEFT OUTER JOIN TI_ERP_PRD_MAPPING TPM
                                ON TPM.MALL_GOODS_NO=ITM.GOODS_NO
                                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
		                    WHERE GDS.ITEM_NO = ITM.ITEM_NO
		                      AND GDS.SITE_NO = TS.SITE_NO
		                      AND GDS.SITE_NO = #{siteNo}
		                      AND GDS.DEL_YN = 'N'
		                      AND ITM.DEL_YN = 'N'
		                      <include refid="selectGoodsListWhere" />
	                  ) BB GROUP BY BB.GOODS_NO
			      ) A
			) AA
        <include refid="selectGoodsListFilter" />
        ) BB
        <include refid="common.pageSql" />

    </select>
    
    
    <!-- 판매상품관리 총건수 조회 -->
    <select id="selectGoodsListPagingTotalCount" resultType="Integer">
        /* goods.selectGoodsListPagingTotalCount - 판매상품관리 총건수 조회 */
        SELECT  count(*)
          FROM TG_GOODS GDS
        , TG_ITEM ITM
        LEFT OUTER JOIN TI_ERP_PRD_MAPPING TPM
            ON TPM.MALL_GOODS_NO=ITM.GOODS_NO
            AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
        WHERE GDS.ITEM_NO = ITM.ITEM_NO
            AND GDS.DEL_YN = 'N'
            AND ITM.DEL_YN = 'N'
            AND GDS.SITE_NO = #{siteNo}
        <if test="searchSellerLogin != null and searchSellerLogin != ''">
            AND GDS.SELLER_NO = #{searchSeller}
        </if>
    </select>
    <!-- 판매상품관리 조건적용 총건수 조회 -->
    <select id="selectGoodsListPagingCount" resultType="Integer">
        /* goods.selectGoodsListPagingCount - 판매상품관리 조건적용 총건수 조회 */
        SELECT COUNT(*) FROM (
                SELECT DISTINCT GDS.GOODS_NO,
                    GDS.*,ITM.SALE_PRICE
                FROM TG_GOODS GDS
                , TG_ITEM ITM
                 LEFT OUTER JOIN TI_ERP_PRD_MAPPING TPM
                ON TPM.MALL_GOODS_NO=ITM.GOODS_NO
                AND TPM.MALL_ITM_CODE=ITM.ITEM_NO
                WHERE GDS.ITEM_NO = ITM.ITEM_NO
                AND GDS.DEL_YN = 'N'
                AND ITM.DEL_YN = 'N'
                AND GDS.SITE_NO = #{siteNo}
                <include refid="selectGoodsListWhere" />
        ) AA
        <include refid="selectGoodsListFilter" />
    </select>

    <!-- 관심상품 목록(페이징) 조회 -->
    <select id="selectGoodsRelListPaging" resultType="goodsVO">
		SELECT *
		FROM
		(
			select ROWNUM AS PAGING_NUM, ROWNUM, rownum as NUM, tot_cnt - rownum + 1 as ROW_NUM, AA.*
			from
			(

						SELECT
								 count(*) over() as tot_cnt,
		                         GDS.GOODS_NO,
                                 GDS.GOODS_TYPE_CD,
		                         GDS.SELLER_NO,
		                         GDS.GOODS_NM,
		                         GDS.ITEM_NO,
		                         GDS.GOODS_SALE_STATUS_CD,
		                         GDS.DISP_YN,
		                         GDS.GOODSEACH_DLVRC AS GOODS_DLVRC,

		                         GDS.DLVR_SET_CD,
		                         GDS.PACK_UNIT_DLVRC,
		                         TS.DEFAULT_DLVRC_TYPE_CD,
		                         TS.DEFAULT_DLVRC,
		                         TS.DEFAULT_DLVR_MIN_DLVRC,

		                         GDS.MODEL_NM,
		                         GDS.SMR_GOODS_NM,
		                         GDS.PRE_GOODS_YN,
                                 GDS.STAMP_YN,
		                         GDS.PR_WORDS,
		                         GDS.INWARE_SCD_SCH,
		                         GDS.MMFT,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '01') AS GOODS_IMG_01,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '02') AS GOODS_IMG_02,
		                         fn_getGoodsImgPath(GDS.GOODS_NO, '03') AS GOODS_IMG_03,

		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'A') AS GOODS_DISP_IMG_A,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'B') AS GOODS_DISP_IMG_B,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'C') AS GOODS_DISP_IMG_C,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'D') AS GOODS_DISP_IMG_D,
		                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'E') AS GOODS_DISP_IMG_E,

		                         fn_getGoodsIcon(GDS.GOODS_NO, '5') AS ICON_IMGS,
		                         GDS.REG_DTTM,
		                         GDS.UPD_DTTM,
		                         NVL(GDS.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
		                         NVL(GDS.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
		                         NVL(GDS.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
                                 GDS.GOODS_SVMN_POLICY_USE_YN,
		                         NVL(GDS.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
		                         NVL(GDS.GOODS_SCORE,0) AS GOODS_SCORE,
                                 GDS.BRAND_NO,
		                         fn_getBrandNm(GDS.BRAND_NO) AS BRAND_NM,
		                         ITM.ITEM_NM,
		                         NVL(ITM.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
		                         NVL(ITM.SALE_PRICE,0) AS SALE_PRICE,
                				 decode(nvl(ITM.CUSTOMER_PRICE,0), 0, 0, 100-(ITM.SALE_PRICE/ITM.CUSTOMER_PRICE)*100) as SALE_RATE,
		                         NVL(ITM.SUPPLY_PRICE, 0)  AS SUPPLY_PRICE,
		                         ITM.SEP_SUPPLY_PRICE_YN AS SEP_SUPPLY_PRICE_YN,
		                         CONCAT(ROUND((ITM.SALE_PRICE-ITM.SUPPLY_PRICE)/decode(ITM.SALE_PRICE*100,0,null,ITM.SALE_PRICE*100)),'%') AS COMMISION_RATE,
		                         NVL( (SELECT MAX(PRMT_DC_VALUE)
		                                 FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
		                                 WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                           AND TPTG.GOODS_NO = GDS.GOODS_NO
                                           AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
		                                   AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') ,0) AS PRMT_DC_VALUE,
                                  (SELECT MAX(PRMT_DC_GB_CD)
                                    FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_DC_GB_CD,
                                     (SELECT MAX(PRMT_TYPE_CD)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_TYPE_CD,
                                  (SELECT MAX(FIRST_BUY_SPC_PRICE)
                                      FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                    WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                    AND TPTG.GOODS_NO = GDS.GOODS_NO
                                    AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                    AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS FIRST_BUY_SPC_PRICE,
		                         NVL(ITM.STOCK_QTT,0) AS STOCK_QTT,
		                         (CASE WHEN TS.STOCK_SET_YN = 'Y' AND TS.AVAIL_STOCK_SALE_YN = 'Y'
		                               THEN NVL(TS.AVAIL_STOCK_QTT,0)
		                               ELSE 0 END) AS AVAIL_STOCK_QTT,
		                         GDS.ADULT_CERTIFY_YN,
		                         NVL(GDS.BASKET_SET_CNT,0) AS BASKET_SET_CNT,
		                         NVL(GDS.FAVGOODS_SET_CNT,0) AS FAVGOODS_SET_CNT,
		                         NVL(GDS.GOODS_INQ_CNT,0) AS GOODS_INQ_CNT,
		                         GDS.SITE_NO
		                    FROM  TG_GOODS GDS
		                        , TG_ITEM ITM
		                        , TS_SITE TS
		                    WHERE GDS.ITEM_NO = ITM.ITEM_NO
		                      AND GDS.SITE_NO = TS.SITE_NO
		                      AND GDS.SITE_NO = #{siteNo}
		                      AND GDS.DEL_YN = 'N'
		                      AND ITM.DEL_YN = 'N'
		                      <include refid="selectGoodsListWhere" />
		                      /*사전예약상품 제외*/
                              <!-- AND NOT EXISTS (
                                      SELECT PG.GOODS_NO
                                        FROM TP_PROMOTION PM,TP_PROMOTION_TARGET_GOODS PG
                                       WHERE PM.PRMT_NO = PG.PRMT_NO
                                         AND PM.PRMT_TYPE_CD='05'
                                         AND PG.GOODS_NO = GDS.GOODS_NO
                                ) -->
								
			) AA
	        <include refid="selectGoodsListFilter" />
        )
        <include refid="common.pageSql" />
    </select>
    <select id="selectGoodsRelListPagingTotalCount" resultType="Integer">
        SELECT  count(*)
        FROM    TG_GOODS GDS
                , TG_ITEM ITM
        WHERE   GDS.ITEM_NO = ITM.ITEM_NO
          AND   GDS.DEL_YN = 'N'
          AND   ITM.DEL_YN = 'N'
          AND   GDS.SITE_NO = #{siteNo}

        <if test="searchSellerLogin != null and searchSellerLogin != ''">
          AND GDS.SELLER_NO = #{searchSeller}
        </if>
    </select>
    <select id="selectGoodsRelListPagingCount" resultType="Integer">
			select COUNT(*)
			from
			(

                SELECT
                         count(*) over() as tot_cnt,
                         GDS.GOODS_NO,
                         GDS.GOODS_TYPE_CD,
                         GDS.SELLER_NO,
                         GDS.GOODS_NM,
                         GDS.ITEM_NO,
                         GDS.GOODS_SALE_STATUS_CD,
                         GDS.DISP_YN,
                         GDS.GOODSEACH_DLVRC AS GOODS_DLVRC,

                         GDS.DLVR_SET_CD,
                         GDS.PACK_UNIT_DLVRC,
                         TS.DEFAULT_DLVRC_TYPE_CD,
                         TS.DEFAULT_DLVRC,
                         TS.DEFAULT_DLVR_MIN_DLVRC,

                         GDS.MODEL_NM,
                         GDS.SMR_GOODS_NM,
                         GDS.PRE_GOODS_YN,
                         GDS.STAMP_YN,
                         GDS.PR_WORDS,
                         GDS.INWARE_SCD_SCH,
                         GDS.MMFT,
                         fn_getGoodsImgPath(GDS.GOODS_NO, '01') AS GOODS_IMG_01,
                         fn_getGoodsImgPath(GDS.GOODS_NO, '02') AS GOODS_IMG_02,
                         fn_getGoodsImgPath(GDS.GOODS_NO, '03') AS GOODS_IMG_03,

                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'A') AS GOODS_DISP_IMG_A,
                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'B') AS GOODS_DISP_IMG_B,
                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'C') AS GOODS_DISP_IMG_C,
                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'D') AS GOODS_DISP_IMG_D,
                         fn_getGoodsDispImgPath(GDS.GOODS_NO, 'E') AS GOODS_DISP_IMG_E,

                         fn_getGoodsIcon(GDS.GOODS_NO, '5') AS ICON_IMGS,
                         GDS.REG_DTTM,
                         GDS.UPD_DTTM,
                         NVL(GDS.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
                         NVL(GDS.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
                         NVL(GDS.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
                         GDS.GOODS_SVMN_POLICY_USE_YN,
                         NVL(GDS.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
                         NVL(GDS.GOODS_SCORE,0) AS GOODS_SCORE,
                         GDS.BRAND_NO,
                         fn_getBrandNm(GDS.BRAND_NO) AS BRAND_NM,
                         ITM.ITEM_NM,
                         NVL(ITM.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
                         NVL(ITM.SALE_PRICE,0) AS SALE_PRICE,
                         decode(nvl(ITM.CUSTOMER_PRICE,0), 0, 0, 100-(ITM.SALE_PRICE/ITM.CUSTOMER_PRICE)*100) as SALE_RATE,
                         NVL(ITM.SUPPLY_PRICE, 0)  AS SUPPLY_PRICE,
                         ITM.SEP_SUPPLY_PRICE_YN AS SEP_SUPPLY_PRICE_YN,
                         CONCAT(ROUND((ITM.SALE_PRICE-ITM.SUPPLY_PRICE)/decode(ITM.SALE_PRICE*100,0,null,ITM.SALE_PRICE*100)),'%') AS COMMISION_RATE,
                         NVL( (SELECT MAX(PRMT_DC_VALUE)
                                 FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                                 WHERE TP.PRMT_NO = TPTG.PRMT_NO
                                   AND TPTG.GOODS_NO = GDS.GOODS_NO
                                   AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                                   AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') ,0) AS PRMT_DC_VALUE,
                          (SELECT MAX(PRMT_DC_GB_CD)
                            FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG
                            WHERE TP.PRMT_NO = TPTG.PRMT_NO
                            AND TPTG.GOODS_NO = GDS.GOODS_NO
                            AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                            AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N') AS PRMT_DC_GB_CD,

                         NVL(ITM.STOCK_QTT,0) AS STOCK_QTT,

                         (CASE WHEN TS.STOCK_SET_YN = 'Y' AND TS.AVAIL_STOCK_SALE_YN = 'Y'
                               THEN NVL(TS.AVAIL_STOCK_QTT,0)
                               ELSE 0 END) AS AVAIL_STOCK_QTT,
                         GDS.ADULT_CERTIFY_YN,

                         NVL(GDS.BASKET_SET_CNT,0) AS BASKET_SET_CNT,
                         NVL(GDS.FAVGOODS_SET_CNT,0) AS FAVGOODS_SET_CNT,
                         NVL(GDS.GOODS_INQ_CNT,0) AS GOODS_INQ_CNT,
                         GDS.SITE_NO

                    FROM  TG_GOODS GDS
                        , TG_ITEM ITM
                        , TS_SITE TS
                    WHERE GDS.ITEM_NO = ITM.ITEM_NO
                      AND GDS.SITE_NO = TS.SITE_NO
                      AND GDS.SITE_NO = #{siteNo}
                      AND GDS.DEL_YN = 'N'
                      AND ITM.DEL_YN = 'N'
                      <include refid="selectGoodsListWhere" />
		                      /*사전예약상품 제외*/
                              <!-- AND NOT EXISTS (
                                      SELECT PG.GOODS_NO
                                        FROM TP_PROMOTION PM,TP_PROMOTION_TARGET_GOODS PG
                                       WHERE PM.PRMT_NO = PG.PRMT_NO
                                         AND PM.PRMT_TYPE_CD='05'
                                         AND PG.GOODS_NO = GDS.GOODS_NO
                                ) -->
								
			) AA
	        <include refid="selectGoodsListFilter" />    
    </select>
    
    
    
    
    
    
    
    
    
    
    <!-- 사이트 품절 상품 자동 삭제 여부 조회 -->
    <select id="selectSoldOutDeleteYn" resultType="String">
        /* goods.selectSoldOutDeleteYn - 사이트 품절 상품 자동 삭제 여부 조회 */
        SELECT  NVL(SOLDOUT_GOODS_AUTO_DEL_YN, 'N')
        FROM    TS_SITE
        WHERE   SITE_NO = #{siteNo}
    </select>

    <!-- 판매상태 수정 -->
    <update id="updateGoods">
        /* goods.updateGoods - 판매상태 수정 */
        UPDATE  TG_GOODS
           SET
                UPDR_NO = #{updrNo}
		        <if test="goodsSaleStatusCd != null and goodsSaleStatusCd != ''">
		        , GOODS_SALE_STATUS_CD = #{goodsSaleStatusCd}
		        </if>
		        <if test="dispYn != null and dispYn != ''">
                , DISP_YN = #{dispYn}
                </if>
                <if test="dlvrExpectDays != null and dlvrExpectDays != ''">
                , DLVR_EXPECT_DAYS = #{dlvrExpectDays}
                </if>
                <if test="dlvrSetCd != null and dlvrSetCd != ''">
                , DLVR_SET_CD = #{dlvrSetCd}
                </if>
                <if test="goodseachDlvrc != null and goodseachDlvrc != ''">
                , GOODSEACH_DLVRC = #{goodseachDlvrc}
                </if>
                <if test="goodseachcndtaddDlvrc != null and goodseachcndtaddDlvrc != ''">
                , GOODSEACH_CNDTADD_DLVRC = #{goodseachcndtaddDlvrc}
                </if>
                <if test="freeDlvrMinAmt != null and freeDlvrMinAmt != ''">
                , FREE_DLVR_MIN_AMT = #{freeDlvrMinAmt}
                </if>
                <if test="packMaxUnit != null and packMaxUnit != ''">
                , PACK_MAX_UNIT = #{packMaxUnit}
                </if>
                <if test="packUnitDlvrc != null and packUnitDlvrc != ''">
                , PACK_UNIT_DLVRC = #{packUnitDlvrc}
                </if>
                <if test="eventWords != null and eventWords != ''">
                , EVENT_WORDS = #{eventWords}
                </if>
                <if test="couriDlvrApplyYn != null and couriDlvrApplyYn != ''">
                , COURI_DLVR_APPLY_YN = #{couriDlvrApplyYn}
                </if>
                <if test="directRecptApplyYn != null and directRecptApplyYn != ''">
                , DIRECT_RECPT_APPLY_YN = #{directRecptApplyYn}
                </if>
                <if test="saleForeverYn != null and saleForeverYn != ''">
                    <choose>
                        <when test="saleForeverYn eq 'Y'">
                            , SALE_START_DT = null
                            , SALE_END_DT = null
                        </when>
                        <otherwise>
                            , SALE_START_DT = #{saleStartDt}
                            , SALE_END_DT = #{saleEndDt}
                        </otherwise>
                    </choose>
                , SALE_FOREVER_YN = #{saleForeverYn}
                </if>
                , UPD_DTTM = sysdate
        WHERE   SITE_NO = #{siteNo}
        AND     GOODS_NO = #{goodsNo}

        <if test='goodsSaleStatusCd != null and  goodsSaleStatusCd.equals("2") and soldOutDeleteYn != null and soldOutDeleteYn.equals("Y")' >
            /* goods.updateGoods - 품절 변경 시 장바구니 삭제 */
            DELETE FROM TO_BASKET_ADD_OPT, TO_BASKET
                 USING TO_BASKET INNER JOIN TO_BASKET_ADD_OPT
            ON TO_BASKET.BASKET_NO = TO_BASKET_ADD_OPT.BASKET_NO
                 WHERE TO_BASKET.GOODS_NO = #{goodsNo}
                   AND TO_BASKET.SITE_NO = #{siteNo}
        </if>
    </update>

    <!-- 품절시 장바구니 상품 삭제 -->
    <delete id="deleteGoodsBasket">
        /* goods.deleteGoodsBasket - 품절시 장바구니 상품 삭제 */
        DELETE FROM TO_BASKET
        WHERE GOODS_NO = #{goodsNo}
        AND SITE_NO = #{siteNo}
    </delete>

    <delete id="deleteGoodsBasketOpt">
        /* goods.deleteGoodsBasketOpt - 품절시 장바구니 상품 삭제 */
        DELETE FROM TO_BASKET_ADD_OPT T1
        WHERE EXISTS
        (
        	SELECT 1
        	FROM TO_BASKET T2
        	WHERE T1.BASKET_NO = T2.BASKET_NO
        	AND T2.GOODS_NO = #{goodsNo}
        	AND T2.SITE_NO = #{siteNo}
        )
    </delete>

    <!-- 상품 삭제 (삭제 Flag 수정, 단품 정보 Flag도 함께 변경 ) -->
    <update id="deleteGoods">
        /* goods.deleteGoods - 상품 삭제 */
        UPDATE  TG_GOODS
        SET
                DEL_YN = #{delYn}
              , DELR_NO = #{delrNo}
              , DEL_DTTM = sysdate
        WHERE   SITE_NO = #{siteNo}
        AND     GOODS_NO = #{goodsNo}
    </update>
    <update id="deleteItems">
        /* goods.deleteItems - 단품 삭제 */
        UPDATE  TG_ITEM
        SET
                DEL_YN = #{delYn}
              , DELR_NO = #{delrNo}
              , DEL_DTTM = sysdate
        WHERE   SITE_NO = #{siteNo}
        AND     GOODS_NO = #{goodsNo}
    </update>

    <!-- 판매상품관리 목록(엑셀다운로드) 조회 -->
    <select id="selectGoodsExcelList" resultType="net.danvi.dmall.biz.app.goods.model.GoodsVO">
        /* goods.selectGoodsExcelList - 판매상품관리 목록(엑셀) */
        SELECT ROWNUM, A.*
          FROM (
            SELECT
				MAX(BB.GOODS_NO) AS GOODS_NO ,
				MAX(BB.GOODS_NM) AS GOODS_NM ,
				MAX(BB.GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_CD ,
				MAX(BB.DISP_YN) AS DISP_YN ,
				MAX(BB.GOODS_DLVRC) AS GOODS_DLVRC ,
				MAX(BB.DLVR_SET_CD) AS DLVR_SET_CD ,
				MAX(BB.PACK_UNIT_DLVRC) AS PACK_UNIT_DLVRC ,
				MAX(BB.DEFAULT_DLVRC_TYPE_CD) AS DEFAULT_DLVRC_TYPE_CD ,
				MAX(BB.DEFAULT_DLVRC) AS DEFAULT_DLVRC ,
				MAX(BB.DEFAULT_DLVR_MIN_DLVRC) AS DEFAULT_DLVR_MIN_DLVRC,
				MAX(BB.MODEL_NM) AS MODEL_NM ,
				MAX(BB.BRAND_NM) AS BRAND_NM ,
				MAX(BB.MMFT) AS MMFT ,
				MAX(BB.TAX_GB_CD) AS TAX_GB_CD ,
				MAX(BB.REG_DTTM) AS REG_DTTM ,
				MAX(BB.UPD_DTTM) AS UPD_DTTM ,
				MAX(BB.SITE_NO) AS SITE_NO ,
				MAX(BB.ITEM_NO) AS ITEM_NO ,
				MAX(BB.ITEM_NM) AS ITEM_NM ,
				MAX(BB.COST) as COST,
				MAX(BB.CUSTOMER_PRICE) AS CUSTOMER_PRICE ,
				MAX(BB.SALE_PRICE) AS SALE_PRICE ,
				REGEXP_REPLACE(REVERSE(REGEXP_REPLACE( REVERSE(TO_CHAR(MAX(BB.SALE_PRICE))), '([0-9]{3})','\1,')), '^,','') AS COMMA_SALE_PRICE ,
				MAX(BB.STOCK_QTT) AS STOCK_QTT ,
				MAX(BB.CTG_NAME) AS CTG_NAME ,
				MAX(BB.CTG_NO) AS CTG_NO ,
				MAX(BB.GOODS_SALE_STATUS_NM) AS GOODS_SALE_STATUS_NM ,
				MAX(BB.DLVR_SET_NM) AS DLVR_SET_NM ,
				MAX(BB.TAX_GB_NM) AS TAX_GB_NM ,
				MAX(BB.REG_DATE) AS REG_DATE ,
				MAX(BB.UPD_DATE) AS UPD_DATE ,
				MAX(BB.ATTR1) AS ATTR1 ,
				MAX(BB.ATTR2) AS ATTR2 ,
				MAX(BB.ATTR3) AS ATTR3 ,
				MAX(BB.ATTR4) AS ATTR4 ,
				MAX(BB.ATTR_VER) AS ATTR_VER ,
				MAX(BB.GOODSEACH_DLVRC) AS GOODSEACH_DLVRC ,
                regexp_replace(utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,',',CTG_NAME) order by CTG_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),2)), '([^,]+)(,\1)*(,|$)', '\1\3') AS CTG_ARR,
                MAX(BB.SELLER_NM) as SELLER_NM,
                MAX(BB.SUPPLY_PRICE) as SUPPLY_PRICE,
                MAX(BB.ERP_ITM_CODE) as ERP_ITM_CODE
              FROM (

              SELECT AA2.*
              FROM
              (
                SELECT
                          AA.*
                        , fn_categoryName(TGC.CTG_NO, AA.SITE_NO) AS CTG_NAME
                        , TGC.CTG_NO
                        , fn_getCodeNm('GOODS_SALE_STATUS_CD', GOODS_SALE_STATUS_CD) AS GOODS_SALE_STATUS_NM
                        , fn_getCodeNm('DLVR_SET_CD', DLVR_SET_CD) AS DLVR_SET_NM
                        , fn_getCodeNm('TAX_GB_CD', TAX_GB_CD) AS TAX_GB_NM
                        , TO_CHAR(AA.REG_DTTM, 'YYYY-MM-DD') AS REG_DATE
                        , TO_CHAR(AA.UPD_DTTM, 'YYYY-MM-DD') AS UPD_DATE
                        , (case when AA.MULTI_OPT_YN = 'Y' then fn_getOptAttrName (TIA.ATTR_NO1, 'ATTR') else '' end) AS ATTR1
                        , (case when AA.MULTI_OPT_YN = 'Y' then fn_getOptAttrName (TIA.ATTR_NO2, 'ATTR') else '' end) AS ATTR2
                        , (case when AA.MULTI_OPT_YN = 'Y' then fn_getOptAttrName (TIA.ATTR_NO3, 'ATTR') else '' end) AS ATTR3
                        , (case when AA.MULTI_OPT_YN = 'Y' then fn_getOptAttrName (TIA.ATTR_NO4, 'ATTR') else '' end) AS ATTR4
                        , TIA.ATTR_VER
                        , (
                            CASE WHEN AA.DLVR_SET_CD = '2' THEN  0
                                 WHEN AA.DLVR_SET_CD = '3' THEN NVL(AA.GOODS_DLVRC, 0)
                                 WHEN AA.DLVR_SET_CD = '4' THEN NVL(AA.PACK_UNIT_DLVRC, 0)
                                 WHEN AA.DLVR_SET_CD = '6' THEN nvl(AA.GOODSEACH_CNDTADD_DLVRC, 0)
                            ELSE (
                                  CASE WHEN AA.DEFAULT_DLVRC_TYPE_CD = '2' THEN NVL(AA.DEFAULT_DLVRC, 0)
                                       WHEN AA.DEFAULT_DLVRC_TYPE_CD = '3' THEN NVL(AA.DEFAULT_DLVR_MIN_DLVRC, 0)
                                       ELSE 0
                                  END
                            )
                           END
                          ) AS GOODSEACH_DLVRC
                          , RANK() OVER(PARTITION BY AA.ITEM_NO ORDER BY TIA.ATTR_VER DESC) AS RANK
                  FROM (
                    SELECT
                        GDS.GOODS_NO,
						GDS.GOODS_NM,
						GDS.GOODS_SALE_STATUS_CD,
						GDS.DISP_YN,
					    GDS.GOODSEACH_DLVRC AS GOODS_DLVRC,
                        GDS.DLVR_SET_CD,
                        GDS.PACK_UNIT_DLVRC,
                        TS.DEFAULT_DLVRC_TYPE_CD,
                        TS.DEFAULT_DLVRC,
                        TS.DEFAULT_DLVR_MIN_DLVRC,
						GDS.MODEL_NM,
						fn_getBrandNm(GDS.BRAND_NO) AS BRAND_NM,
						GDS.MMFT,
						GDS.TAX_GB_CD,
						GDS.REG_DTTM,
						GDS.UPD_DTTM,
						GDS.SITE_NO,
						ITM.ITEM_NO,
						ITM.ITEM_NM,
						ITM.COST,
						ITM.CUSTOMER_PRICE,
                        ITM.SUPPLY_PRICE,
						ITM.SALE_PRICE,
						ITM.STOCK_QTT,
						(select SELLER_NM from TS_SELLER where SELLER_NO = GDS.SELLER_NO) as SELLER_NM,
						tepm.ERP_ITM_CODE,
						GDS.GOODSEACH_CNDTADD_DLVRC,
                        GDS.MULTI_OPT_YN
                  FROM  TG_GOODS GDS
                        , TS_SITE TS
                        , TG_ITEM ITM
                      left outer join TI_ERP_PRD_MAPPING tepm on ITM.GOODS_NO = tepm.MALL_GOODS_NO and ITM.ITEM_NO = tepm.MALL_ITM_CODE
                   WHERE GDS.ITEM_NO = ITM.ITEM_NO
                     AND GDS.SITE_NO = TS.SITE_NO
                     AND GDS.DEL_YN = 'N'
                     AND ITM.DEL_YN = 'N'
                     AND GDS.SITE_NO = #{siteNo}
                      <include refid="selectGoodsListWhere" />
                      ) AA
                      LEFT OUTER JOIN TG_GOODS_CTG TGC ON (AA.GOODS_NO = TGC.GOODS_NO AND TGC.DEL_YN = 'N')
                      LEFT OUTER JOIN TG_ITEM_ATTR TIA ON (TIA.ITEM_NO = AA.ITEM_NO)
                ) AA2
                WHERE AA2.RANK = 1
              ) BB GROUP BY BB.ITEM_NO
              <include refid="common.sortSql" />
        ) A
    </select>



    <!-- 신규 상품 정보 등록 - 시작 -->
    <!-- 상품 아이콘 정보 등록 -->
    <insert id="insertGoodsIcon">
    /* goods.insertGoodsIcon - 상품 아이콘 정보 등록 */
    INSERT INTO TG_GOODS_ICON (
          GOODS_NO
        , ICON_NO
        , REGR_NO
        , REG_DTTM
        , UPDR_NO
        , UPD_DTTM
    ) VALUES (
          #{goodsNo}
        , #{iconNo}
        , #{regrNo}
        , sysdate
        , #{updrNo}
        , sysdate
    )
    </insert>

    <!-- 상품 아이콘 정보 수정 -->
    <delete id="deleteGoodsIcon">
        /* goods.deleteGoodsIcon - 상품 아이콘 정보 수정 */
        DELETE FROM TG_GOODS_ICON
        WHERE  GOODS_NO = #{goodsNo}
    </delete>

    <!-- 상품 카테고리 정보 등록 -->
    <insert id="insertGoodsCtg">
    /* goods.insertGoodsCtg - 상품 카테고리 정보 등록 */
		MERGE INTO TG_GOODS_CTG
		USING dual
		ON (SITE_NO = #{siteNo} AND GOODS_NO = #{goodsNo} AND CTG_NO = #{ctgNo})
		WHEN MATCHED THEN
			UPDATE SET
		          DLGT_CTG_YN = #{dlgtCtgYn}
		        , DISP_YN = #{expsYn}
		        , EXPS_PRIOR_RANK = #{expsPriorRank}
		        , DEL_YN = #{delYn}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate

		WHEN NOT MATCHED THEN
		    INSERT (
		          SITE_NO
		        , GOODS_NO
		        , CTG_NO
		        , DLGT_CTG_YN
		        , DISP_YN
		        , EXPS_PRIOR_RANK
		        , DEL_YN
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{siteNo}
		        , #{goodsNo}
		        , #{ctgNo}
		        , #{dlgtCtgYn}
		        , #{expsYn}
		        , #{expsPriorRank}
		        , #{delYn}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <!-- 상품 카테고리 정보 삭제 -->
    <delete id="deleteGoodsCtg">
        /* goods.deleteGoodsCtg - 상품 카테고리 정보 삭제 */
        DELETE FROM TG_GOODS_CTG
        WHERE  SITE_NO = #{siteNo}
        AND    GOODS_NO = #{goodsNo}
        <if test="ctgNo != null and ctgNo != ''">
        AND    CTG_NO = #{ctgNo}
        </if>
    </delete>

    <insert id="insertGoodsBasicInfo">
    <if test='mobileModeYn == null or mobileModeYn != "Y"'>
		/* 모바일용 추가 2016-08-18 - 모바일 여부 */
		/* 모바일이 아닐때 기존 구문 실행 */
		MERGE INTO TG_GOODS TG
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
			UPDATE SET
		          GOODS_NM = #{goodsNm}
				, GOODS_TYPE_CD = #{goodsTypeCd}
                , SMF_USE_YN = #{smfUseYn}
                , SELLER_MEMO = #{sellerMemo}
                , NORMAL_YN = #{normalYn}
                , NEW_GOODS_YN = #{newGoodsYn}
                , MALL_ORDER_YN = #{mallOrderYn}
                , GOODS_STAMP_TYPE_CD = #{goodsStampTypeCd}
                , EVENT_WORDS = #{eventWords}
                , ICON_USE_YN = #{iconUseYn}
                , SALE_FOREVER_YN = #{saleForeverYn}
		        , SELLER_NO = #{sellerNo}
		        <if test="itemNo != null and itemNo != ''">
				, ITEM_NO = #{itemNo}
				</if>
				<if test="notifyNo != null and notifyNo != ''">
				, NOTIFY_NO = #{notifyNo}
			    </if>
				, MODEL_NM = #{modelNm}
				<if test="brandNo != null and brandNo != ''">
				, BRAND_NO = #{brandNo}
			    </if>
				, GOODS_SALE_STATUS_CD = #{goodsSaleStatusCd}
                , RSV_ONLY_YN = #{rsvOnlyYn}
                , NAVER_LINK_YN = #{naverLinkYn}
                , SBN_LINK_YN = #{sbnLinkYn}
				, DISP_YN = #{dispYn}
                , VIRT_OUTING_YN= #{virtOutingYn}
				, RETURN_PSB_YN = #{returnPsbYn}
				, SALE_YN = #{saleYn}
				, SALE_START_DT = #{saleStartDt}
				, SALE_END_DT = #{saleEndDt}
				, GOODS_ADD_INFO_USE_YN = #{goodsAddInfoUseYn}
				, MOBILE_DISP_YN = #{mobileDispYn}
				, REINWARE_APPLY_YN = #{reinwareApplyYn}
				, RSV_BUY_YN = #{rsvBuyYn}
				, ADULT_CERTIFY_YN = #{adultCertifyYn}
				, MAX_ORD_LIMIT_YN = #{maxOrdLimitYn}
				, MAX_ORD_QTT = #{maxOrdQtt}
				, MIN_ORD_LIMIT_YN = #{minOrdLimitYn}
				, MIN_ORD_QTT = #{minOrdQtt}
				, SMR_GOODS_NM = #{smrGoodsNm}
				, PRE_GOODS_YN = #{preGoodsYn}
                , STAMP_YN = #{stampYn}
				, PR_WORDS = #{prWords}
				, INWARE_SCD_SCH = #{inwareScdSch}
				, ADD_OPT_USE_YN = #{addOptUseYn}
				, MULTI_OPT_YN = #{multiOptYn}
	            , HABITAT = #{habitat}
	            , MMFT = #{mmft}
		        , HSCODE = #{hscode}
		        , SEO_SEARCH_WORD = #{seoSearchWord}
		        , GOODS_SVMN_AMT = #{goodsSvmnAmt}
		        , GOODS_SVMN_POLICY_USE_YN = #{goodsSvmnPolicyUseYn}
		        , GOODS_SVMN_POLICY_CD = #{goodsSvmnPolicyCd}
		        , GOODS_SVMN_GB_CD = #{goodsSvmnGbCd}
		        , GOODS_SVMN_MAX_USE_POLICY_CD = #{goodsSvmnMaxUsePolicyCd}
		        , GOODS_SVMN_MAX_USE_RATE = #{goodsSvmnMaxUseRate}

		        , RECOM_PVD_RATE = #{recomPvdRate}
		        , RECOM_PVD_POLICY_CD = #{recomPvdPolicyCd}

				, TAX_GB_CD = #{taxGbCd}
				, DLVR_SET_CD = #{dlvrSetCd}
				<if test="dlvrExpectDays != null and dlvrExpectDays != ''">
				, DLVR_EXPECT_DAYS = #{dlvrExpectDays}
				</if>
				<if test="goodseachDlvrc != null and goodseachDlvrc != ''">
				, GOODSEACH_DLVRC = #{goodseachDlvrc}
				</if>
		        <if test="packMaxUnit != null and packMaxUnit != ''">
				, PACK_MAX_UNIT = #{packMaxUnit}
				</if>
		        <if test="packUnitDlvrc != null and packUnitDlvrc != ''">
				, PACK_UNIT_DLVRC = #{packUnitDlvrc}
				</if>
                <if test="goodseachcndtaddDlvrc != null and goodseachcndtaddDlvrc != ''">
                , GOODSEACH_CNDTADD_DLVRC = #{goodseachcndtaddDlvrc}
	            </if>
	            <if test="freeDlvrMinAmt != null and freeDlvrMinAmt != ''">
                , FREE_DLVR_MIN_AMT = #{freeDlvrMinAmt}
	            </if>
				, COURI_DLVR_APPLY_YN = #{couriDlvrApplyYn}
				, DIRECT_RECPT_APPLY_YN = #{directRecptApplyYn}
				, DLVR_PAYMENT_KIND_CD = #{dlvrPaymentKindCd}
				, TX_LIMIT_CNDT = #{txLimitCndt}

		        , RELATE_GOODS_APPLY_TYPE_CD = #{relateGoodsApplyTypeCd}
		        , RELATE_GOODS_APPLY_CTG = #{relateGoodsApplyCtg}
		        , RELATE_GOODS_SALE_PRICE_START = #{relateGoodsSalePriceStart}
		        , RELATE_GOODS_SALE_PRICE_END = #{relateGoodsSalePriceEnd}
		        , RELATE_GOODS_SALE_STATUS_CD = #{relateGoodsSaleStatusCd}
		        , RELATE_GOODS_DISP_STATUS_CD = #{relateGoodsDispStatusCd}
		        , RELATE_GOODS_AUTO_EXPS_SORT_CD = #{relateGoodsAutoExpsSortCd}
				, VIDEO_SOURCE_PATH = #{videoSourcePath}

				, DISP_IMG_PATH_TYPE_A = #{dispImgPathTypeA}
				, DISP_IMG_NM_TYPE_A = #{dispImgNmTypeA}
				, DISP_IMG_FILE_SIZE_TYPE_A  = #{dispImgFileSizeTypeA}
		        , DISP_IMG_PATH_TYPE_B = #{dispImgPathTypeB}
		        , DISP_IMG_NM_TYPE_B = #{dispImgNmTypeB}
		        , DISP_IMG_FILE_SIZE_TYPE_B  = #{dispImgFileSizeTypeB}
		        , DISP_IMG_PATH_TYPE_C = #{dispImgPathTypeC}
		        , DISP_IMG_NM_TYPE_C = #{dispImgNmTypeC}
		        , DISP_IMG_FILE_SIZE_TYPE_C  = #{dispImgFileSizeTypeC}
		        , DISP_IMG_PATH_TYPE_D = #{dispImgPathTypeD}
		        , DISP_IMG_NM_TYPE_D = #{dispImgNmTypeD}
		        , DISP_IMG_FILE_SIZE_TYPE_D  = #{dispImgFileSizeTypeD}
		        , DISP_IMG_PATH_TYPE_E = #{dispImgPathTypeE}
		        , DISP_IMG_NM_TYPE_E = #{dispImgNmTypeE}
		        , DISP_IMG_FILE_SIZE_TYPE_E  = #{dispImgFileSizeTypeE}
                , DISP_IMG_PATH_TYPE_F = #{dispImgPathTypeF}
                , DISP_IMG_NM_TYPE_F = #{dispImgNmTypeF}
                , DISP_IMG_FILE_SIZE_TYPE_F  = #{dispImgFileSizeTypeF}
                , DISP_IMG_PATH_TYPE_G = #{dispImgPathTypeG}
                , DISP_IMG_NM_TYPE_G = #{dispImgNmTypeG}
                , DISP_IMG_FILE_SIZE_TYPE_G  = #{dispImgFileSizeTypeG}
                , DISP_IMG_PATH_TYPE_S = #{dispImgPathTypeS}
                , DISP_IMG_NM_TYPE_S = #{dispImgNmTypeS}
                , DISP_IMG_FILE_SIZE_TYPE_S  = #{dispImgFileSizeTypeS}
                , DISP_IMG_PATH_TYPE_M = #{dispImgPathTypeM}
                , DISP_IMG_NM_TYPE_M = #{dispImgNmTypeM}
                , DISP_IMG_FILE_SIZE_TYPE_M  = #{dispImgFileSizeTypeM}
                , DISP_IMG_PATH_TYPE_O = #{dispImgPathTypeO}
                , DISP_IMG_NM_TYPE_O = #{dispImgNmTypeO}
                , DISP_IMG_FILE_SIZE_TYPE_O  = #{dispImgFileSizeTypeO}
                , DISP_IMG_PATH_TYPE_P = #{dispImgPathTypeP}
                , DISP_IMG_NM_TYPE_P = #{dispImgNmTypeP}
                , DISP_IMG_FILE_SIZE_TYPE_P  = #{dispImgFileSizeTypeP}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate

		WHEN NOT MATCHED THEN
		    INSERT (
				 GOODS_NO
				,GOODS_CONTS_GB_CD
                ,SMF_USE_YN
                ,SELLER_MEMO
                ,NORMAL_YN
                ,NEW_GOODS_YN
                ,MALL_ORDER_YN
                ,GOODS_STAMP_TYPE_CD
                ,EVENT_WORDS
                ,ICON_USE_YN
                ,SALE_FOREVER_YN
				,GOODS_TYPE_CD
				,SELLER_NO
				<if test="companyNo != null and companyNo != ''">
				, COMPANY_NO
				</if>
				, SITE_NO
				<if test="itemNo != null and itemNo != ''">
				, ITEM_NO
				</if>
				<if test="notifyNo != null and notifyNo != ''">
				, NOTIFY_NO
				</if>
				, GOODS_NM
				, MODEL_NM
				<if test="brandNo != null and brandNo != ''">
				, BRAND_NO
				</if>
				, GOODS_SALE_STATUS_CD
				, DISP_YN
                , RSV_ONLY_YN
                , NAVER_LINK_YN
                , SBN_LINK_YN
                , VIRT_OUTING_YN
				, RETURN_PSB_YN
				, SALE_YN
				, SALE_START_DT
				, SALE_END_DT
				, GOODS_ADD_INFO_USE_YN
				, MOBILE_DISP_YN
				, REINWARE_APPLY_YN
				, RSV_BUY_YN
				, ADULT_CERTIFY_YN
				, MAX_ORD_LIMIT_YN
				, MAX_ORD_QTT
				, MIN_ORD_LIMIT_YN
				, MIN_ORD_QTT
				, SMR_GOODS_NM
				, PRE_GOODS_YN
                , STAMP_YN
				, PR_WORDS
				, INWARE_SCD_SCH
				, ADD_OPT_USE_YN
				, MULTI_OPT_YN
	            , HABITAT
	            , MMFT
				, HSCODE
				, SEO_SEARCH_WORD
				, GOODS_SVMN_AMT
				, GOODS_SVMN_POLICY_USE_YN
		        , GOODS_SVMN_POLICY_CD
		        , GOODS_SVMN_GB_CD
		        , GOODS_SVMN_MAX_USE_POLICY_CD
		        , GOODS_SVMN_MAX_USE_RATE
				, RECOM_PVD_RATE
				, RECOM_PVD_POLICY_CD
				, TAX_GB_CD
				, DLVR_SET_CD
				<if test="dlvrExpectDays != null and dlvrExpectDays != ''">
				, DLVR_EXPECT_DAYS
				</if>
				<if test="goodseachDlvrc != null and goodseachDlvrc != ''">
				, GOODSEACH_DLVRC
				</if>
				<if test="packMaxUnit != null and packMaxUnit != ''">
				, PACK_MAX_UNIT
				</if>
				<if test="packUnitDlvrc != null and packUnitDlvrc != ''">
				, PACK_UNIT_DLVRC
				</if>

	            <if test="goodseachcndtaddDlvrc != null and goodseachcndtaddDlvrc != ''">
	                , GOODSEACH_CNDTADD_DLVRC
	            </if>
	            <if test="freeDlvrMinAmt != null and freeDlvrMinAmt != ''">
	                , FREE_DLVR_MIN_AMT
	            </if>

				, COURI_DLVR_APPLY_YN
				, DIRECT_RECPT_APPLY_YN
				, DLVR_PAYMENT_KIND_CD
				, TX_LIMIT_CNDT

				, RELATE_GOODS_APPLY_TYPE_CD
				, RELATE_GOODS_APPLY_CTG
				, RELATE_GOODS_SALE_PRICE_START
				, RELATE_GOODS_SALE_PRICE_END
				, RELATE_GOODS_SALE_STATUS_CD
				, RELATE_GOODS_DISP_STATUS_CD
				, RELATE_GOODS_AUTO_EXPS_SORT_CD
				, VIDEO_SOURCE_PATH

				, DISP_IMG_PATH_TYPE_A
				, DISP_IMG_NM_TYPE_A
				, DISP_IMG_FILE_SIZE_TYPE_A
		        , DISP_IMG_PATH_TYPE_B
		        , DISP_IMG_NM_TYPE_B
		        , DISP_IMG_FILE_SIZE_TYPE_B
		        , DISP_IMG_PATH_TYPE_C
		        , DISP_IMG_NM_TYPE_C
		        , DISP_IMG_FILE_SIZE_TYPE_C
		        , DISP_IMG_PATH_TYPE_D
		        , DISP_IMG_NM_TYPE_D
		        , DISP_IMG_FILE_SIZE_TYPE_D
		        , DISP_IMG_PATH_TYPE_E
		        , DISP_IMG_NM_TYPE_E
		        , DISP_IMG_FILE_SIZE_TYPE_E
                , DISP_IMG_PATH_TYPE_F
                , DISP_IMG_NM_TYPE_F
                , DISP_IMG_FILE_SIZE_TYPE_F
                , DISP_IMG_PATH_TYPE_G
                , DISP_IMG_NM_TYPE_G
                , DISP_IMG_FILE_SIZE_TYPE_G
                , DISP_IMG_PATH_TYPE_S
                , DISP_IMG_NM_TYPE_S
                , DISP_IMG_FILE_SIZE_TYPE_S
                , DISP_IMG_PATH_TYPE_M
                , DISP_IMG_NM_TYPE_M
                , DISP_IMG_FILE_SIZE_TYPE_M
                , DISP_IMG_PATH_TYPE_O
                , DISP_IMG_NM_TYPE_O
                , DISP_IMG_FILE_SIZE_TYPE_O
                , DISP_IMG_PATH_TYPE_P
                , DISP_IMG_NM_TYPE_P
                , DISP_IMG_FILE_SIZE_TYPE_P
				, DEL_YN
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
				  #{goodsNo}
				, #{goodsContsGbCd}
                , #{smfUseYn}
                , #{sellerMemo}
                , #{normalYn}
                , #{newGoodsYn}
                , #{mallOrderYn}
                , #{goodsStampTypeCd}
                , #{eventWords}
                , #{iconUseYn}
                , #{saleForeverYn}
				, #{goodsTypeCd}
				, #{sellerNo}
				<if test="companyNo != null and companyNo != ''">
				, #{companyNo}
				</if>
				, #{siteNo}
				<if test="itemNo != null and itemNo != ''">
				, #{itemNo}
				</if>
				<if test="notifyNo != null and notifyNo != ''">
				, #{notifyNo}
				</if>
				, #{goodsNm}
				, #{modelNm}
				<if test="brandNo != null and brandNo != ''">
				, #{brandNo}
				</if>
				, #{goodsSaleStatusCd}
				, #{dispYn}
                , #{rsvOnlyYn}
                , #{naverLinkYn}
                , #{sbnLinkYn}
                , #{virtOutingYn}
				, #{returnPsbYn}
				, #{saleYn}
				, #{saleStartDt}
				, #{saleEndDt}
				, #{goodsAddInfoUseYn}
				, #{mobileDispYn}
				, #{reinwareApplyYn}
				, #{rsvBuyYn}
				, #{adultCertifyYn}
				, #{maxOrdLimitYn}
				, #{maxOrdQtt}
				, #{minOrdLimitYn}
				, #{minOrdQtt}
				, #{smrGoodsNm}
				, #{preGoodsYn}
                , #{stampYn}
				, #{prWords}
				, #{inwareScdSch}
				, #{addOptUseYn}
				, #{multiOptYn}
	            , #{habitat}
	            , #{mmft}
				, #{hscode}
				, #{seoSearchWord}
				, #{goodsSvmnAmt}
				, #{goodsSvmnPolicyUseYn}
				, #{goodsSvmnPolicyCd}
				, #{goodsSvmnGbCd}
				, #{goodsSvmnMaxUsePolicyCd}
				, #{goodsSvmnMaxUseRate}
				, #{recomPvdRate}
				, #{recomPvdPolicyCd}
				, #{taxGbCd}
				, #{dlvrSetCd}
				<if test="dlvrExpectDays != null and dlvrExpectDays != ''">
				, #{dlvrExpectDays}
				</if>
				<if test="goodseachDlvrc != null and goodseachDlvrc != ''">
				, #{goodseachDlvrc}
				</if>
				<if test="packMaxUnit != null and packMaxUnit != ''">
				, #{packMaxUnit}
				</if>
				<if test="packUnitDlvrc != null and packUnitDlvrc != ''">
				, #{packUnitDlvrc}
				</if>
	            <if test="goodseachcndtaddDlvrc != null and goodseachcndtaddDlvrc != ''">
	                , #{goodseachcndtaddDlvrc}
	            </if>
	            <if test="freeDlvrMinAmt != null and freeDlvrMinAmt != ''">
	                , #{freeDlvrMinAmt}
	            </if>

				, #{couriDlvrApplyYn}
				, #{directRecptApplyYn}
				, #{dlvrPaymentKindCd}
				, #{txLimitCndt}
		        , #{relateGoodsApplyTypeCd}
		        , #{relateGoodsApplyCtg}
		        , #{relateGoodsSalePriceStart}
		        , #{relateGoodsSalePriceEnd}
		        , #{relateGoodsSaleStatusCd}
		        , #{relateGoodsDispStatusCd}
		        , #{relateGoodsAutoExpsSortCd}
				, #{videoSourcePath}
				, #{dispImgPathTypeA}
				, #{dispImgNmTypeA}
				, #{dispImgFileSizeTypeA}
		        , #{dispImgPathTypeB}
		        , #{dispImgNmTypeB}
		        , #{dispImgFileSizeTypeB}
		        , #{dispImgPathTypeC}
		        , #{dispImgNmTypeC}
		        , #{dispImgFileSizeTypeC}
		        , #{dispImgPathTypeD}
		        , #{dispImgNmTypeD}
		        , #{dispImgFileSizeTypeD}
		        , #{dispImgPathTypeE}
		        , #{dispImgNmTypeE}
		        , #{dispImgFileSizeTypeE}
                , #{dispImgPathTypeF}
                , #{dispImgNmTypeF}
                , #{dispImgFileSizeTypeF}
                , #{dispImgPathTypeG}
                , #{dispImgNmTypeG}
                , #{dispImgFileSizeTypeG}
                , #{dispImgPathTypeS}
                , #{dispImgNmTypeS}
                , #{dispImgFileSizeTypeS}
                , #{dispImgPathTypeM}
                , #{dispImgNmTypeM}
                , #{dispImgFileSizeTypeM}
                , #{dispImgPathTypeO}
                , #{dispImgNmTypeO}
                , #{dispImgFileSizeTypeO}
                , #{dispImgPathTypeP}
                , #{dispImgNmTypeP}
                , #{dispImgFileSizeTypeP}
				, 'N'
		        , #{regrNo}
		        , sysdate
		    )
		</if>

		<if test='mobileModeYn != null and mobileModeYn == "Y"'>
		/* 모바일용 추가 2016-08-18 - 모바일 여부 */
		UPDATE TG_GOODS
		SET
			GOODS_NM = #{goodsNm}
			<if test="itemNo != null and itemNo != ''">
			, ITEM_NO = #{itemNo}
			</if>
			, BRAND_NO = #{brandNo}
			, GOODS_SALE_STATUS_CD = #{goodsSaleStatusCd}
			, DISP_YN = #{dispYn}
			, PR_WORDS = #{prWords}
			, INWARE_SCD_SCH = #{inwareScdSch}
			, MULTI_OPT_YN = #{multiOptYn}
	        , UPDR_NO = #{updrNo}
	        , UPD_DTTM = sysdate
	        WHERE   GOODS_NO = #{goodsNo}
		</if>
    </insert>

	<!-- 안경테 속성정보 등록-->
	<insert id="insertFramesInfo">
		 /* goods.manage.insertGlassesInfo - 안경테 속성정보 등록 */
		MERGE INTO TG_FRAMES_ATTR
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
          UPDATE SET
               SHAPE_CD= #{frameShapeCd}
			 , MATERIAL_CD= #{frameMaterialCd}
			 , SIZE_CD= #{frameSizeCd}
			 , COLOR_CD= #{frameColorCd}
			 , UPDR_NO = #{updrNo}
	         , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		 INSERT
		 (
			 GOODS_NO
			 ,SHAPE_CD
			 ,MATERIAL_CD
			 ,SIZE_CD
			 ,COLOR_CD
			 ,REGR_NO
			 ,REG_DTTM
		 )
		 VALUES(
			 #{goodsNo}
			,#{frameShapeCd}
			,#{frameMaterialCd}
			,#{frameSizeCd}
			,#{frameColorCd}
			,#{regrNo}
			,sysdate
		 )
	</insert>

	<!-- 선글라스 속성정보 등록-->
	<insert id="insertSunglassInfo">
		/* goods.manage.insertSunglassInfo - 선글라스 속성정보 등록 */
		MERGE INTO TG_SUNGLASS_ATTR
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
          UPDATE SET
                SHAPE_CD= #{sunglassShapeCd}
               ,MATERIAL_CD= #{sunglassMaterialCd}
               ,SIZE_CD= #{sunglassSizeCd}
               ,COLOR_CD= #{sunglassColorCd}
               ,EYEBALL_TOP_COLOR_CD= #{sunglassEyeTopColorCd}
               ,EYEBALL_METAL_COLOR_CD= #{sunglassEyeMetalColorCd}
               ,TEMPLE_METAL_COLOR_CD= #{sunglassTempleMetalColorCd}
               ,TEMPLE_EPOXY_COLOR_CD= #{sunglassTempleEpoxyColorCd}
               ,TIP_COLOR_CD= #{sunglassTipColorCd}
               ,LENS_COLOR_CD= #{sunglassLensColorCd}
			   ,UPDR_NO = #{updrNo}
	           ,UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
          INSERT (
                GOODS_NO,
                SHAPE_CD,
                MATERIAL_CD,
                SIZE_CD,
                COLOR_CD,
                EYEBALL_TOP_COLOR_CD,
                EYEBALL_METAL_COLOR_CD,
                TEMPLE_METAL_COLOR_CD,
                TEMPLE_EPOXY_COLOR_CD,
                TIP_COLOR_CD,
                LENS_COLOR_CD,
                REGR_NO,
                REG_DTTM
            ) VALUES (
                 #{goodsNo},
                 #{sunglassShapeCd},
                 #{sunglassMaterialCd},
                 #{sunglassSizeCd},
                 #{sunglassColorCd},
                 #{sunglassEyeTopColorCd},
                 #{sunglassEyeMetalColorCd},
                 #{sunglassTempleMetalColorCd},
                 #{sunglassTempleEpoxyColorCd},
                 #{sunglassTipColorCd},
                 #{sunglassLensColorCd},
                 #{regrNo},
                 sysdate
             )
	</insert>

	<!-- 안경렌즈 속성정보 등록-->
	<insert id="insertGlassesLensInfo">
		/* goods.manage.insertGlassesLensInfo - 안경렌즈 속성정보 등록 */
        MERGE INTO TG_GLASSES_LENS_ATTR
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
          UPDATE SET
                MMFT_CD = #{glassMmftCd}
			   ,THICK_CD = #{glassThickCd}
			   ,DESIGN_CD = #{glassDesignCd}
			   ,UPDR_NO = #{updrNo}
	           ,UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		INSERT  (
			   GOODS_NO,
			   MMFT_CD,
			   THICK_CD,
			   DESIGN_CD,
			   REGR_NO,
			   REG_DTTM
		  ) VALUES (
			 #{goodsNo},
			 #{glassMmftCd},
			 #{glassThickCd},
			 #{glassDesignCd},
			 #{regrNo},
			 sysdate
			 )
	</insert>

	<!-- 콘택트렌즈 속성정보 등록-->
	<insert id="insertContactLensInfo">
		/* goods.manage.insertContactLensInfo - 콘택트렌즈 속성정보 등록 */
		MERGE INTO TG_CONTACT_LENS_ATTR
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
          UPDATE SET
                WEAR_CYCLE_CD = #{contactCycleCd}
               ,COLOR_CD = #{contactColorCd}
               ,SIZE_CD = #{contactSizeCd}
               ,PRICE_CD = #{contactPriceCd}
               ,STATUS_CD = #{contactStatusCd}
			   ,UPDR_NO = #{updrNo}
	           ,UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		INSERT  (
		   GOODS_NO,
		   WEAR_CYCLE_CD,
		   COLOR_CD,
		   SIZE_CD,
		   PRICE_CD,
		   STATUS_CD,
		   REGR_NO,
		   REG_DTTM
		   )
		VALUES (
			#{goodsNo},
			#{contactCycleCd},
			#{contactColorCd},
			#{contactSizeCd},
			#{contactPriceCd},
			#{contactStatusCd},
			#{regrNo},
			sysdate
		 )
	</insert>

	<!-- 보청기 속성정보 등록-->
	<insert id="insertHearingAidInfo">
		/* goods.manage.insertHearingAidInfo - 보청기 속성정보 등록 */
		MERGE INTO TG_HA_ATTR
		USING DUAL
		ON (GOODS_NO = #{goodsNo})
		WHEN MATCHED THEN
          UPDATE SET
                HR_TYPE_CD = #{aidLosstypeCd}
               ,HR_DEGREE_CD = #{aidLossdegreeCd}
               ,FRM_CD = #{aidShapeCd}
			   ,UPDR_NO = #{updrNo}
	           ,UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
           INSERT (
               GOODS_NO,
               HR_TYPE_CD,
               HR_DEGREE_CD,
               FRM_CD,
               REGR_NO,
               REG_DTTM
          ) VALUES (
             #{goodsNo},
             #{aidLosstypeCd},
             #{aidLossdegreeCd},
             #{aidShapeCd},
             #{regrNo},
             sysdate
		 )
	</insert>

    <!--비전체크 군 정보 삭제-->
	<delete id="deleteGunAttr">
			delete from TG_GOODS_GUN_ATTR where GOODS_NO=#{goodsNo}
	</delete>

	<insert id="insertGunAttr">
			INSERT INTO TG_GOODS_GUN_ATTR (
			  GOODS_NO,GUN_NO,REGR_NO,REG_DTTM
			) VALUES(
			     #{goodsNo},
			     #{gunNo},
			     #{regrNo},
                 sysdate
			)
	</insert>

	<!--속성정보 삭제-->
	<delete id="deleteAttrInfo">
		{call
		declare
		begin
			delete from TG_FRAMES_ATTR where GOODS_NO=#{goodsNo};
			delete from TG_SUNGLASS_ATTR where GOODS_NO=#{goodsNo};
			delete from TG_GLASSES_LENS_ATTR where GOODS_NO=#{goodsNo};
			delete from TG_CONTACT_LENS_ATTR where GOODS_NO=#{goodsNo};
			delete from TG_HA_ATTR where GOODS_NO=#{goodsNo};
		end
		}
	</delete>
     <!-- 대표 단품 번호 수정 -->
    <update id="updateGoodsItemNo">
        /* goods.manage.updateGoodsItemNo - 대표 단품 번호 수정 */
        UPDATE  TG_GOODS
        SET
                ITEM_NO = #{itemNo}
        WHERE   GOODS_NO = #{goodsNo}
    </update>

    <!-- 상품의 모든 아이템 가격을 변경한다. -->
    <update id="updateGoodsAllItemPrice">
        UPDATE TG_ITEM
        SET
            SALE_PRICE = #{salePrice}
        WHERE
            GOODS_NO = #{goodsNo}
    </update>

    <!-- 상품의 모든 아이콘을 변경한다. -->
    <update id="updateGoodsIcon">
        UPDATE TG_GOODS_ICON
        SET
            SALE_PRICE = #{salePrice}
        WHERE
            GOODS_NO = #{goodsNo}
    </update>

    <!-- 단품 정보 등록/수정 -->
    <insert id="insertGoodsItemOne">
		/* goods.manage.insertGoodsItemOne - 단품 정보 등록/수정 */
		MERGE INTO TG_ITEM
		USING DUAL
		ON (ITEM_NO = #{itemNo})
		WHEN MATCHED THEN
			UPDATE SET
				  ITEM_NM = #{itemNm}
				, USE_YN = #{useYn}
				<if test="itemVer != null and itemVer > 0">
				, ITEM_VER = #{itemVer}
				</if>
				, SUPPLY_PRICE = #{supplyPrice}
		        , SEP_SUPPLY_PRICE_YN = #{sepSupplyPriceYn}
			    , APPLY_DAVISION_STOCK_YN = #{applyDavisionStockYn}
			    , COST = #{cost}
				, CUSTOMER_PRICE = #{customerPrice}
		        , SALE_PRICE = #{salePrice}
		        <if test="stockQtt != null">
		        , STOCK_QTT = #{stockQtt}
		        </if>
		        , SALE_QTT = nvl(#{saleQtt}, 0)
                , DC_PRICE_APPLY_ALWAYS_YN = #{dcPriceApplyAlwaysYn}
                , DC_START_DTTM = TO_DATE(#{dcStartDttm}, 'YYYY-MM-DD')
                , DC_END_DTTM = TO_DATE(#{dcEndDttm}, 'YYYY-MM-DD')
                <if test="isDcPriceChanged != null and isDcPriceChanged">
                , GOODS_DC_CHANGE_DTTM = sysdate
                </if>
                <if test="isDcPriceChanged == null or !isDcPriceChanged">
                , GOODS_DC_CHANGE_DTTM = ''
                </if>
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
				  ITEM_NO
				, GOODS_NO
				, SITE_NO
				, ITEM_NM
				, USE_YN
				, ITEM_VER
				, SUPPLY_PRICE
		        , SEP_SUPPLY_PRICE_YN
		        , APPLY_DAVISION_STOCK_YN
		        , COST
				, CUSTOMER_PRICE
				, SALE_PRICE
				, STOCK_QTT
				, SALE_QTT
                , DC_PRICE_APPLY_ALWAYS_YN
                , DC_START_DTTM
                , DC_END_DTTM
        <if test="isDcPriceChanged != null and isDcPriceChanged">
                , GOODS_DC_CHANGE_DTTM
        </if>
				, DEL_YN
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{itemNo}
				, #{goodsNo}
				, #{siteNo}
				, #{itemNm}
				, #{useYn}
				, 0
				, #{supplyPrice}
		        , #{sepSupplyPriceYn}
		        , #{applyDavisionStockYn}
		        , #{cost}
		        , #{customerPrice}
		        , #{salePrice}
		        , #{stockQtt}
		        , nvl(#{saleQtt}, 0)
                , #{dcPriceApplyAlwaysYn}
                , TO_DATE(#{dcStartDttm}, 'YYYY-MM-DD')
                , TO_DATE(#{dcEndDttm}, 'YYYY-MM-DD')
        <if test="isDcPriceChanged != null and isDcPriceChanged">
                , sysdate
        </if>
				, 'N'
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <!-- 단품 가격 변경 이력 등록 -->
    <insert id="insertItemPriceChgHist">
    /* goods.manage.insertItemPriceChgHist - 단품 가격 변경 이력 등록 */
    INSERT INTO TG_ITEM_PRICE_CHG_HIST (
          ITEM_NO
        , SEQ
        , CHG_DT
        , CHG_CD
        , CHG_PRICE
        , REGR_NO
        , REG_DTTM
    )
      SELECT
          #{itemNo}
        , (SELECT NVL(MAX(SEQ)+1, 0) FROM TG_ITEM_PRICE_CHG_HIST WHERE ITEM_NO = #{itemNo})
        , TO_CHAR(sysdate, 'YYYYMMDD')
        , #{priceChgCd}
        , #{saleChdPrice}
        , #{regrNo}
        , sysdate
      FROM DUAL
    </insert>

    <!-- 단품 수량 변경 이력 등록 -->
    <insert id="insertItemStockChgHist">
    /* goods.manage.insertItemStockChgHist - 단품 수량 변경 이력 등록 */
    INSERT INTO TG_ITEM_QTT_CHG_HIST (
          ITEM_NO
        , SEQ
        , CHG_DT
        , CHG_CD
        , CHG_QTT
        , REGR_NO
        , REG_DTTM
    )
      SELECT
          #{itemNo}
        , (SELECT NVL(MAX(SEQ)+1, 0) FROM TG_ITEM_QTT_CHG_HIST WHERE ITEM_NO = #{itemNo})
        , TO_CHAR(sysdate, 'YYYYMMDD')
        , #{stockChgCd}
        , #{stockChdQtt}
        , #{regrNo}
        , sysdate
      FROM DUAL
    </insert>

     <!-- 아이템 사용여부 수정 -->
    <update id="updateItemUseYn">
        /* goods.manage.updateItemUseYn - 아이템 사용여부 수정 */
        UPDATE  TG_ITEM
        SET
                USE_YN = #{useYn}
              , UPDR_NO = #{updrNo}
              , UPD_DTTM = sysdate
        WHERE   ITEM_NO = #{itemNo}
    </update>

     <!-- 옵션 정보 변경 시 아이템 사용여부 수정 -->
    <update id="updateItemUseYnByGoodsNo">
        /* goods.manage.updateItemUseYnByGoodsNo - 옵션 정보 변경 시 아이템 사용여부 수정 */
        UPDATE  TG_ITEM
        SET
                USE_YN = #{useYn}
              , UPDR_NO = #{updrNo}
              , UPD_DTTM = sysdate
        WHERE   GOODS_NO = #{goodsNo}
    </update>

    <insert id="insertGoodsAttr">
    	/* goods.manage.insertGoodsAttr - 단품 속성 정보 등록/수정 */
		MERGE INTO TG_ITEM_ATTR
		USING DUAL
		ON (ITEM_NO = #{itemNo} AND ATTR_VER = #{attrVer})
		WHEN MATCHED THEN
			UPDATE SET
		          OPT_NO1 = #{optNo1}
		        , ATTR_NO1 = #{attrNo1}
		        , OPT_NO2 = #{optNo2}
		        , ATTR_NO2 = #{attrNo2}
		        , OPT_NO3 = #{optNo3}
		        , ATTR_NO3 = #{attrNo3}
		        , OPT_NO4 = #{optNo4}
		        , ATTR_NO4 = #{attrNo4}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          ITEM_NO
		        , ATTR_VER
		        , OPT_NO1
		        , ATTR_NO1
		        , OPT_NO2
		        , ATTR_NO2
		        , OPT_NO3
		        , ATTR_NO3
		        , OPT_NO4
		        , ATTR_NO4
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{itemNo}
		        , #{attrVer}
		        , #{optNo1}
		        , #{attrNo1}
		        , #{optNo2}
		        , #{attrNo2}
		        , #{optNo3}
		        , #{attrNo3}
		        , #{optNo4}
		        , #{attrNo4}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <insert id="insertGoodsOption">
    /* goods.manage.insertGoodsOption - 상품 옵션 정보 수정 */
    INSERT INTO TG_GOODS_OPT (
          GOODS_NO
        , OPT_NO
        , REGR_NO
        , REG_DTTM
    ) VALUES (
          #{goodsNo}
        , #{optNo}
        , #{regrNo}
        , sysdate
    )
    </insert>

    <delete id="deleteGoodsOption">
        /* goods.manage.deleteGoodsOption - 상품 옵션 정보 삭제 */
        DELETE FROM TG_GOODS_OPT
        WHERE GOODS_NO = #{goodsNo}
    </delete>


    <insert id="insertOption">
    	/* goods.manage.insertOption - 옵션 정보 등록/수정 */
	    INSERT INTO TG_OPT (
	    	OPT_NO
	        , SITE_NO
	        , OPT_NM
	        , OPT_SEQ
	        , REG_SEQ
	        , USE_YN
	        , REGR_NO
	        , REG_DTTM
	    ) VALUES (
	    	#{optNo}
	        , #{siteNo}
	        , #{optNm}
	        , #{optSeq}
	        , #{regSeq}
	        , #{useYn}
	        , #{regrNo}
	        , sysdate
	    )
    </insert>

    <!-- 옵션 수정 -->
    <update id="updateOption">
        /* goods.manage.updateOption - 옵션 사용여부 수정 */
        UPDATE  TG_OPT
        SET
                USE_YN = #{useYn}
              , UPDR_NO = #{updrNo}
              , UPD_DTTM = sysdate
        WHERE   OPT_NO = #{optNo}
    </update>

    <insert id="insertAttr">
    /* goods.manage.updateOption - 속성 정보 등록 */
    INSERT INTO TG_ATTR (
    	  ATTR_NO
        , OPT_NO
        , ATTR_NM
        , USE_YN
        , REGR_NO
        , REG_DTTM
    ) VALUES (
    	  #{attrNo}
        , #{optNo}
        , #{attrNm}
        , #{useYn}
        , #{regrNo}
        , sysdate
    )
    </insert>

    <!-- 옵션 수정 -->
    <update id="updateAttrUseYn">
        /* goods.manage.updateAttrUseYn - 옵션 수정 */
        UPDATE TG_ATTR
        SET
	          USE_YN = #{useYn}
	        , UPDR_NO = #{updrNo}
	        , UPD_DTTM = sysdate
        WHERE ATTR_NO = #{attrNo}
    </update>

    <!-- 추가옵션 등록 -->
    <insert id="insertGoodsAddOption">
	    /* goods.manage.insertGoodsAddOption - 추가옵션 등록 */
	    INSERT INTO TG_ADD_OPT (
	          GOODS_NO
	        , ADD_OPT_NO
	        , ADD_OPT_NM
	        , REQUIRED_YN
	        , REGR_NO
	        , REG_DTTM
	    ) VALUES (
	          #{goodsNo}
	        , #{addOptNo}
	        , #{addOptNm}
	        , #{requiredYn}
	        , #{regrNo}
	        , sysdate
	    )
    </insert>

     <!-- 추가옵션 수정 -->
    <update id="updateGoodsAddOption">
        /* goods.manage.updateGoodsAddOption - 추가옵션 수정 */
        UPDATE TG_ADD_OPT
        SET
              ADD_OPT_NM = #{addOptNm}
            , REQUIRED_YN = #{requiredYn}
            , UPDR_NO = #{updrNo}
            , UPD_DTTM = sysdate
        WHERE GOODS_NO = #{goodsNo}
          AND ADD_OPT_NO = #{addOptNo}
    </update>

    <!-- 추가옵션 삭제 -->
    <delete id="deleteGoodsAddOption">
        /* goods.manage.deleteGoodsAddOption - 추가옵션 삭제 */
        DELETE FROM TG_ADD_OPT
        WHERE GOODS_NO = #{goodsNo}
          AND ADD_OPT_NO = #{addOptNo}
    </delete>

    <!-- 추가옵션상세 등록 -->
    <insert id="insertGoodsAddOptionValue">
	    /* goods.manage.insertGoodsAddOptionValue - 추가옵션상세 등록 */
	    INSERT INTO TG_ADD_OPT_DTL (
	          GOODS_NO
	        , ADD_OPT_NO
	        , ADD_OPT_DTL_SEQ
	        , ADD_OPT_VALUE
	        , ADD_OPT_AMT
	        , ADD_OPT_AMT_CHG_CD
	        , OPT_VER
	        , REGR_NO
	        , REG_DTTM
	    ) VALUES (
	          #{goodsNo}
	        , #{addOptNo}
	        , #{addOptDtlSeq}
	        , #{addOptValue}
	        , #{addOptAmt}
	        , #{addOptAmtChgCd}
	        , #{optVer}
	        , #{regrNo}
	        , sysdate
	    )
    </insert>

     <!-- 추가옵션상세 수정 -->
    <update id="updateGoodsAddOptionValue">
        /* goods.manage.updateGoodsAddOptionValue - 추가옵션상세 수정 */
        UPDATE TG_ADD_OPT_DTL
        SET
              ADD_OPT_VALUE = #{addOptValue}
            , ADD_OPT_AMT = #{addOptAmt}
            , ADD_OPT_AMT_CHG_CD = #{addOptAmtChgCd}
            , OPT_VER = OPT_VER + 1
            , UPDR_NO = #{updrNo}
            , UPD_DTTM = sysdate
        WHERE GOODS_NO = #{goodsNo}
          AND ADD_OPT_NO = #{addOptNo}
          AND ADD_OPT_DTL_SEQ = #{addOptDtlSeq}
    </update>

    <!-- 추가옵션상세 삭제 -->
    <delete id="deleteGoodsAddOptionValue">
        /* goods.manage.deleteGoodsAddOptionValue - 추가옵션상세 삭제 */
        DELETE FROM TG_ADD_OPT_DTL
        WHERE GOODS_NO = #{goodsNo}
          AND ADD_OPT_NO = #{addOptNo}
          AND ADD_OPT_DTL_SEQ = #{addOptDtlSeq}
    </delete>

    <!-- 상품 고시 정보 등록 -->
    <insert id="insertGoodsNotify">
    	/* goods.manage.insertGoodsNotify - 상품 고시 정보 등록/수정 */
    	MERGE INTO TG_GOODS_NOTIFY
		USING DUAL
		ON (GOODS_NO = #{goodsNo} AND ITEM_NO = #{itemNo})
		WHEN MATCHED THEN
			UPDATE SET
		          ITEM_VALUE = #{itemValue}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_NO
		        , ITEM_NO
		        , ITEM_VALUE
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsNo}
		        , #{itemNo}
		        , #{itemValue}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <!-- 상품 고시 정보 삭제 -->
    <delete id="deleteGoodsNotify">
        /* goods.manage.deleteGoodsNotify - 상품 고시 정보 삭제 */
        DELETE FROM TG_GOODS_NOTIFY
        WHERE GOODS_NO = #{goodsNo}
         <if test="itemNo != null and itemNo != ''">
          AND ITEM_NO = #{itemNo}
         </if>
    </delete>

    <!-- 이미지 세트 정보 등록 -->
    <insert id="insertGoodsImageSet">
	    /* goods.manage.insertGoodsImageSet - 이미지 세트 정보 등록/수정 */
		MERGE INTO TG_GOODS_IMG_SET
		USING DUAL
		ON (GOODS_IMGSET_NO = #{goodsImgsetNo})
		WHEN MATCHED THEN
			UPDATE SET
		          DLGT_IMG_YN = #{dlgtImgYn}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_IMGSET_NO
		        , GOODS_NO
		        , DLGT_IMG_YN
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsImgsetNo}
		        , #{goodsNo}
		        , #{dlgtImgYn}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>



    <!-- 이미지 세트 정보 삭제 -->
    <delete id="deleteGoodsImageSet">
        /* goods.manage.deleteGoodsImageSet - 이미지 세트 정보 삭제 */
        DELETE FROM TG_GOODS_IMG_SET
        WHERE GOODS_IMGSET_NO = #{goodsImgsetNo}
    </delete>
    <!-- 이미지 상세 정보 삭제 -->
    <delete id="deleteGoodsImageDtlSet">
        /* goods.manage.deleteGoodsImageDtlSet - 이미지 세트 정보 삭제 */
        DELETE FROM TG_GOODS_IMG_DTL
        WHERE GOODS_IMGSET_NO = #{goodsImgsetNo}
    </delete>

    <!-- 이미지 상세 정보 등록 -->
    <insert id="insertGoodsImageDtl">
		/* goods.manage.insertGoodsImageDtl - 이미지 상세 정보 등록/수정 */
		MERGE INTO TG_GOODS_IMG_DTL
		USING DUAL
		ON (GOODS_IMGSET_NO = #{goodsImgsetNo} AND GOODS_IMG_TYPE = #{goodsImgType})
		WHEN MATCHED THEN
			UPDATE SET
		          IMG_PATH = #{imgPath}
		        , IMG_NM = #{imgNm}
		        , IMG_WIDTH = #{imgWidth}
		        , IMG_HEIGHT = #{imgHeight}
		        , IMG_SIZE = #{imgSize}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_IMGSET_NO
		        , GOODS_IMG_TYPE
		        , IMG_PATH
		        , IMG_NM
		        , IMG_WIDTH
		        , IMG_HEIGHT
		        , IMG_SIZE
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsImgsetNo}
		        , #{goodsImgType}
		        , #{imgPath}
		        , #{imgNm}
		        , #{imgWidth}
		        , #{imgHeight}
		        , #{imgSize}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <!-- 이미지 상세 정보 삭제 -->
    <delete id="deleteGoodsImageDtl">
        /* goods.manage.deleteGoodsImageDtl - 이미지 상세 정보 삭제 */
        DELETE FROM TG_GOODS_IMG_DTL
        WHERE GOODS_IMGSET_NO = #{goodsImgsetNo}
          AND GOODS_IMG_TYPE = #{goodsImgType}
    </delete>

    <!-- 착용샷 이미지 세트 정보 등록 -->
    <insert id="insertWearImageSet">
	    /* goods.manage.insertWearImageSet - 착용샷 이미지 세트 정보 등록/수정 */
		MERGE INTO TG_CONTACT_WEAR_ATTR
		USING DUAL
		ON (WEAR_IMGSET_NO = #{wearImgsetNo})
		WHEN MATCHED THEN
			UPDATE SET
			      BRAND_NO = #{brandNo}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		    INSERT (
		          WEAR_IMGSET_NO
		WHEN NOT MATCHED THEN
		        , GOODS_NO
		        , BRAND_NO
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{wearImgsetNo}
		        , #{goodsNo}
		        , #{brandNo}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <!-- 착용샷 이미지 세트 정보 삭제 -->
    <delete id="deleteWearImageSet">
        /* goods.manage.deleteWearImageSet - 이미지 세트 정보 삭제 */
        DELETE FROM TG_CONTACT_WEAR_ATTR
        WHERE WEAR_IMGSET_NO = #{wearImgsetNo}
    </delete>
    <!-- 착용샷 이미지 상세 정보 삭제 -->
    <delete id="deleteWearImageDtlSet">
        /* goods.manage.deleteWearImageDtlSet - 이미지 세트 정보 삭제 */
        DELETE FROM TG_CONTACT_WEAR_ATTR_DTL
        WHERE WEAR_IMGSET_NO = #{wearImgsetNo}
    </delete>

    <!-- 착용샷 이미지 상세 정보 등록 -->
    <insert id="insertWearImageDtl">
		/* goods.manage.insertWearImageDtl - 착용샷 이미지 상세 정보 등록/수정 */
		MERGE INTO TG_CONTACT_WEAR_ATTR_DTL
		USING DUAL
		ON (WEAR_IMGSET_NO = #{wearImgsetNo} AND WEAR_IMG_TYPE = #{wearImgType})
			UPDATE SET
		          IMG_PATH = #{imgPath}
		WHEN MATCHED THEN
		        , IMG_NM = #{imgNm}
		        , IMG_WIDTH = #{imgWidth}
		        , IMG_HEIGHT = #{imgHeight}
		        , IMG_SIZE = #{imgSize}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          WEAR_IMGSET_NO
		        , WEAR_IMG_TYPE
		        , IMG_PATH
		        , IMG_NM
		        , IMG_WIDTH
		        , IMG_HEIGHT
		        , IMG_SIZE
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{wearImgsetNo}
		        , #{wearImgType}
		        , #{imgPath}
		        , #{imgNm}
		        , #{imgWidth}
		        , #{imgHeight}
		        , #{imgSize}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <update id="updateWearInfoDtl">
		/* goods.manage.updateWearInfoDtl - 착용샷 상세 정보 등록/수정 */
			UPDATE TG_CONTACT_WEAR_ATTR_DTL SET
		          WEAR_GOODS_NM = #{wearGoodsNm}
		        , COLOR_VALUE = #{colorValue}
		        , WEAR_CYCLE = #{wearCycle}
		        , GRP_DMTR = #{grpDmtr}
		        , MATERIAL_VALUE = #{materialValue}
		        , UV_INTERCEPTION_VALUE = #{uvInterceptionValue}
		        , QTT_VALUE = #{qttValue}
		        , SALE_PRICE_VALUE = #{salePriceValue}
		        , MKT_BNF_VALUE = #{mktBnfValue}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
	        WHERE WEAR_IMGSET_NO = #{wearImgsetNo}
    </update>

    <!-- 착용샷 이미지 상세 정보 삭제 -->
    <delete id="deleteWearImageDtl">
        /* goods.manage.deleteWearImageDtl - 착용샷 이미지 상세 정보 삭제 */
        DELETE FROM TG_CONTACT_WEAR_ATTR_DTL
        WHERE WEAR_IMGSET_NO = #{wearImgsetNo}
          AND WEAR_IMG_TYPE = #{wearImgsetNo}
    </delete>

    <!-- 상품 상세정보 저장 전 체크  -->
	<select id="checkGoodsDescriptCnt" resultType="Integer">
		/* goods.manage.checkGoodsDescriptCnt - 상품 상세정보 저장 */
		select count(*)
		from TG_GOODS_DSCRT
		where GOODS_NO = #{goodsNo}
		and SVC_GB_CD = #{svcGbCd}
	</select>

    <!-- 상품 상세정보 저장  -->
    <insert id="insertGoodsDescript">
		/* goods.manage.insertGoodsDescript - 상품 상세정보 저장 */
		INSERT INTO TG_GOODS_DSCRT
		(
			GOODS_NO
			, SVC_GB_CD
			, CONTENT
			,MOBILE_CONTENT
			, REGR_NO
			, REG_DTTM
		)
		VALUES
		(
			#{goodsNo}
			, #{svcGbCd}
			, #{content:CLOB}
			, #{mobileContent:CLOB}
			, #{regrNo}
			, sysdate
		)
    </insert>

    <!-- 상품 상세정보 저장  -->
    <update id="updateGoodsDescript">
		/* goods.manage.updateGoodsDescript - 상품 상세정보 저장 */
		UPDATE TG_GOODS_DSCRT
		SET
			CONTENT = #{content:CLOB}
			,MOBILE_CONTENT = #{mobileContent:CLOB}
			, UPDR_NO = #{updrNo}
			, UPD_DTTM = sysdate
		WHERE GOODS_NO = #{goodsNo}
		AND SVC_GB_CD = #{svcGbCd}
    </update>

    <!-- 상품 상세정보 저장  -->
	<!--
    <update id="insertGoodsContents">
		/* goods.manage.insertGoodsContents - 상품 상세정보 저장 */
		MERGE INTO TG_GOODS_DSCRT
		USING DUAL
		ON (GOODS_NO = #{goodsNo} AND SVC_GB_CD = #{svcGbCd})
		WHEN MATCHED THEN
			UPDATE SET
		          CONTENT = #{content}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_NO
		        , SVC_GB_CD
		        , CONTENT
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsNo}
		        , #{svcGbCd}
		        , #{content}
		        , #{regrNo}
		        , sysdate
		    )
    </update>
    -->

    <!-- 관련상품 직접 설정 정보 삭제 -->
    <delete id="deleteDirectSetRelateGoods">
        /* goods.manage.deleteDirectSetRelateGoods - 관련상품 직접 설정 정보 삭제 */
        DELETE FROM TG_RELATE_GOODS
        WHERE GOODS_NO = #{goodsNo}
    </delete>

    <!-- 관련상품 정보 삭제 -->
    <delete id="deleteRelateGoods">
        /* goods.manage.deleteRelateGoods - 관련상품 정보 삭제 */
        DELETE FROM TG_RELATE_GOODS
        WHERE GOODS_NO = #{goodsNo}
          AND RELATE_GOODS_NO = #{relateGoodsNo}
    </delete>

     <!-- 관련상품 정보 우선 순위 조회 -->
    <select id="selectRelateGoodsPriorRank" resultType="long" useCache="false">
        /* goods.manage.selectRelateGoodsPriorRank - 관련상품 정보 우선 순위 조회 */
        SELECT CASE WHEN max(TG.RELATE_GOODS_APPLY_TYPE_CD) = '2' THEN NVL(MAX(PRIOR_RANK)+1, 0) ELSE -1 END AS PRIOR_RANK
          FROM TG_GOODS TG, TG_RELATE_GOODS TRG
         WHERE TG.GOODS_NO = TRG.GOODS_NO
           AND TG.GOODS_NO = #{goodsNo}
    </select>

    <!-- 관련상품 정보 수정 -->
    <insert id="insertRelateGoods">
		/* goods.manage.insertGoodsContents - 관련상품 정보 등록/수정 */
		MERGE INTO TG_RELATE_GOODS
		USING DUAL
		ON (GOODS_NO = #{goodsNo} AND RELATE_GOODS_NO = #{relateGoodsNo})
		WHEN MATCHED THEN
			UPDATE SET
		          EACH_REG_SET_YN = #{eachRegSetYn}
		        , PRIOR_RANK = #{priorRank}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_NO
		        , RELATE_GOODS_NO
		        , EACH_REG_SET_YN
		        , PRIOR_RANK
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsNo}
		        , #{relateGoodsNo}
		        , NVL(#{eachRegSetYn}, 'N')
		        , #{priorRank}
		        , #{regrNo}
		        , sysdate
		    )
    </insert>

    <update id="updateRelateGoods">
    	/* goods.manage.updateRelateGoods - 관련상품 정보 등록/수정 */
		MERGE INTO TG_RELATE_GOODS
		USING DUAL
		ON (GOODS_NO = #{goodsNo} AND RELATE_GOODS_NO = #{relateGoodsNo})
		WHEN MATCHED THEN
			UPDATE SET
		          EACH_REG_SET_YN = #{eachRegSetYn}
		        , PRIOR_RANK = #{priorRank}
		        , UPDR_NO = #{updrNo}
		        , UPD_DTTM = sysdate
		WHEN NOT MATCHED THEN
		    INSERT (
		          GOODS_NO
		        , RELATE_GOODS_NO
		        , EACH_REG_SET_YN
		        , PRIOR_RANK
		        , REGR_NO
		        , REG_DTTM
		    ) VALUES (
		          #{goodsNo}
		        , #{relateGoodsNo}
		        , NVL(#{eachRegSetYn}, 'N')
		        , #{priorRank}
		        , #{regrNo}
		        , sysdate
		    )
    </update>

    <!-- 신규 상품 정보 조회 - 시작 -->
    <!-- 상품 기본 정보 조회 -->
    <select id="selectGoodsBasicInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsDetailVO">
        /* goods.manage.selectGoodsBasicInfo - 상품 기본 정보 조회 */
			SELECT A.*
			     , B.ICON_ARRAY
			     , B1.GUN_ARRAY
		         , C.CTG_NAME_ARR
                 , C.DLGT_CTG_YN_ARR
                 , C.CTG_NO_ARR
                 , C.CTG_CMS_RATE_ARR
                 , D.NOTIFY_ITEM_NO_ARR
                 , D.NOTIFY_ITEM_VALUE_ARR
                 , E.RELATE_GOODS_NO_ARR
                 , E.EACH_REG_SET_YN_ARR
                 , NVL(F.RECOM_PVD_RATE,0) RECOM_PVD_RATE
	        	 , NVL(F.GOODS_SVMN_AMT,0) GOODS_SVMN_AMT
	        	 , F.GOODS_SVMN_GB_CD
	        	 , F.GOODS_SVMN_POLICY_CD
            	 , F.RECOM_PVD_POLICY_CD
				/*안경테*/
				,TFA.SHAPE_CD as FRAME_SHAPE_CD
				,TFA.MATERIAL_CD as FRAME_MATERIAL_CD
				,TFA.SIZE_CD as FRAME_SIZE_CD
				,TFA.COLOR_CD as FRAME_COLOR_CD
				/*선글라스*/
				,TSA.EYEBALL_METAL_COLOR_CD as SUNGLASS_EYE_METAL_COLOR_CD
				,TSA.LENS_COLOR_CD as SUNGLASS_LENS_COLOR_CD
				,TSA.EYEBALL_TOP_COLOR_CD as SUNGLASS_EYE_TOP_COLOR_CD
				,TSA.TEMPLE_METAL_COLOR_CD as SUNGLASS_TEMPLE_METAL_COLOR_CD
				,TSA.TEMPLE_EPOXY_COLOR_CD as SUNGLASS_TEMPLE_EPOXY_COLOR_CD
				,TSA.SHAPE_CD as SUNGLASS_SHAPE_CD
				,TSA.COLOR_CD as SUNGLASS_COLOR_CD
				,TSA.MATERIAL_CD as SUNGLASS_MATERIAL_CD
				,TSA.TIP_COLOR_CD as SUNGLASS_TIP_COLOR_CD
				/*안경렌즈*/
				,TGA.MMFT_CD as GLASS_MMFT_CD
                ,TGA.THICK_CD as GLASS_THICK_CD
                ,TGA.DESIGN_CD as GLASS_DESIGN_CD
				/*콘택트렌즈*/
				,TCA.WEAR_CYCLE_CD as CONTACT_CYCLE_CD
				,TCA.COLOR_CD as CONTACT_COLOR_CD
				,TCA.SIZE_CD as CONTACT_SIZE_CD
				,TCA.PRICE_CD as CONTACT_PRICE_CD
				,TCA.STATUS_CD as CONTACT_STATUS_CD
				/*보청기*/
				,THA.HR_TYPE_CD  as AID_LOSSTYPE_CD
				,THA.HR_DEGREE_CD as AID_LOSSDEGREE_CD
				,THA.FRM_CD as AID_SHAPE_CD
				,EPM.ERP_ITM_CODE
				/*,(SELECT fn_getCuoponApplyAmt(A.GOODS_NO,'') FROM DUAL) AS COUPON_APPLY_AMT
                ,(SELECT fn_getCouponDcAmt(A.GOODS_NO,'') FROM DUAL) AS COUPON_DC_AMT
                ,(SELECT fn_getCouponDcRate(A.GOODS_NO,'') FROM DUAL) AS COUPON_DC_RATE
                ,(SELECT fn_getCuoponDcValue(A.GOODS_NO,'') FROM DUAL) AS COUPON_DC_VALUE
                ,(SELECT fn_getCouponBnfCd(A.GOODS_NO,'') FROM DUAL) AS COUPON_BNF_CD
                ,(SELECT fn_getCouponBnfTxt(A.GOODS_NO,'') FROM DUAL) AS COUPON_BNF_TXT */

                /*,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'APPLYAMT','') FROM DUAL) AS COUPON_APPLY_AMT
                ,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'DCAMT','') FROM DUAL) AS COUPON_DC_AMT
                ,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'DCTRATE','') FROM DUAL) AS COUPON_DC_RATE
                ,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'DCVALUE','') FROM DUAL) AS COUPON_DC_VALUE
                ,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'BNFCD','') FROM DUAL) AS COUPON_BNF_CD
                ,(SELECT fn_getCuoponAvailable(A.GOODS_NO,'BNFTXT','') FROM DUAL) AS COUPON_BNF_TXT*/
                ,(SELECT fn_getCuoponAvailInfo(A.GOODS_NO,'CPAVL','') FROM DUAL) AS COUPON_AVL_INFO
			    FROM (
			        SELECT
			              TG.GOODS_NO
						, TG.GOODS_TYPE_CD
						/*, FN_GETCODENM('GOODS_TYPE_CD',TG.GOODS_TYPE_CD) as GOODS_TYPE_NM*/
			            , TG.SELLER_NO
						, (SELECT SELLER_NM FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS SELLER_NM
						, (SELECT SELLER_CMS_RATE FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS SELLER_CMS_RATE
						, (SELECT FARM_INTRO FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS FARM_INTRO
						, (SELECT CEO_NM FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS CEO_NM
						, (SELECT RETADRSS_POST_NO FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS RETADRSS_POST_NO
						, (SELECT RETADRSS_ADDR FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS RETADRSS_ADDR
						, (SELECT RETADRSS_DTL_ADDR FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS RETADRSS_DTL_ADDR
						, (SELECT MANAGER_TELNO FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS MANAGER_TELNO
						, (SELECT MANAGER_MOBILE_NO FROM TS_SELLER WHERE SELLER_NO=TG.SELLER_NO) AS MANAGER_MOBILE_NO
			            , TG.COMPANY_NO
			            , TG.SITE_NO
			            , TG.ITEM_NO
			            , TG.NOTIFY_NO
			            , TG.GOODS_NM
			            , TG.MODEL_NM
			            , TG.BRAND_NO
			            , fn_getBrandNm(TG.BRAND_NO) AS BRAND_NM
			            , TG.HABITAT
                        , TG.MMFT
			            , TG.GOODS_SALE_STATUS_CD
                        , TG.RSV_ONLY_YN
                        , TG.VIRT_OUTING_YN
                        , TG.NAVER_LINK_YN
                        , TG.SBN_LINK_YN
			            , TG.DISP_YN
			            , TG.RETURN_PSB_YN
			            , TG.SALE_YN
			            , TO_CHAR(TO_DATE(TG.SALE_START_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_START_DT
			            , TO_CHAR(TO_DATE(TG.SALE_END_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS SALE_END_DT
			            , TG.GOODS_ADD_INFO_USE_YN
			            , TG.MOBILE_DISP_YN
			            , TG.REINWARE_APPLY_YN
			            , TG.RSV_BUY_YN
			            , TG.ADULT_CERTIFY_YN
			            , TG.MAX_ORD_LIMIT_YN
			            , TG.MAX_ORD_QTT
			            , TG.MIN_ORD_LIMIT_YN
			            , TG.MIN_ORD_QTT
			            , TG.SMR_GOODS_NM
			            , TG.PRE_GOODS_YN
                        , TG.STAMP_YN
			            , TG.PR_WORDS
			            , TG.INWARE_SCD_SCH
			            , TG.ADD_OPT_USE_YN
			            , TG.MULTI_OPT_YN
			            , fn_getGoodsCtg4lvlNo(TS.SITE_NO, TG.GOODS_NO, ',') AS GOODS_CTG_NO_ARR
			            , TG.HSCODE
			            , TG.SEO_SEARCH_WORD
                        , TG.GOODS_SVMN_POLICY_USE_YN
                        , TG.GOODS_SVMN_MAX_USE_POLICY_CD
                        , TG.GOODS_SVMN_MAX_USE_RATE
						, TG.TAX_GB_CD
						, TG.DLVR_SET_CD
						, TG.DLVR_EXPECT_DAYS
						, TG.GOODSEACH_DLVRC
						, TG.GOODSEACH_CNDTADD_DLVRC
						, TG.FREE_DLVR_MIN_AMT
						, TG.PACK_MAX_UNIT
						, TG.PACK_UNIT_DLVRC
						, TG.COURI_DLVR_APPLY_YN
						, TG.DIRECT_RECPT_APPLY_YN
						, TG.DLVR_PAYMENT_KIND_CD
						, TG.TX_LIMIT_CNDT
						, TG.VIDEO_SOURCE_PATH
						, TG.DISP_IMG_PATH_TYPE_A
						, TG.DISP_IMG_NM_TYPE_A
						, TG.DISP_IMG_FILE_SIZE_TYPE_A
						, TG.DISP_IMG_PATH_TYPE_B
                        , TG.DISP_IMG_NM_TYPE_B
                        , TG.DISP_IMG_FILE_SIZE_TYPE_B
                        , TG.DISP_IMG_PATH_TYPE_C
                        , TG.DISP_IMG_NM_TYPE_C
                        , TG.DISP_IMG_FILE_SIZE_TYPE_C
                        , TG.DISP_IMG_PATH_TYPE_D
                        , TG.DISP_IMG_NM_TYPE_D
                        , TG.DISP_IMG_FILE_SIZE_TYPE_D
                        , TG.DISP_IMG_PATH_TYPE_E
                        , TG.DISP_IMG_NM_TYPE_E
                        , TG.DISP_IMG_FILE_SIZE_TYPE_E
                        , TG.DISP_IMG_PATH_TYPE_F
                        , TG.DISP_IMG_NM_TYPE_F
                        , TG.DISP_IMG_FILE_SIZE_TYPE_F
                        , TG.DISP_IMG_PATH_TYPE_G
                        , TG.DISP_IMG_NM_TYPE_G
                        , TG.DISP_IMG_FILE_SIZE_TYPE_G
                        , TG.DISP_IMG_PATH_TYPE_S
                        , TG.DISP_IMG_NM_TYPE_S
                        , TG.DISP_IMG_FILE_SIZE_TYPE_S
                        , TG.DISP_IMG_PATH_TYPE_M
                        , TG.DISP_IMG_NM_TYPE_M
                        , TG.DISP_IMG_FILE_SIZE_TYPE_M
                        , TG.DISP_IMG_PATH_TYPE_O
                        , TG.DISP_IMG_NM_TYPE_O
                        , TG.DISP_IMG_FILE_SIZE_TYPE_O
                        , TG.DISP_IMG_PATH_TYPE_P
                        , TG.DISP_IMG_NM_TYPE_P
                        , TG.DISP_IMG_FILE_SIZE_TYPE_P
                        , TG.GOODS_CONTS_GB_CD
                        , TG.GOODS_INQ_CNT
				        , RELATE_GOODS_APPLY_TYPE_CD
				        , RELATE_GOODS_APPLY_CTG
				        , fn_getCtg4lvlNo(TS.SITE_NO, TG.RELATE_GOODS_APPLY_CTG, '#@#') AS RELATE_GOODS_APPLY_CTG_NO_ARR
				        , fn_getCtg4lvlNm(TS.SITE_NO, TG.RELATE_GOODS_APPLY_CTG, '#@#') AS RELATE_GOODS_APPLY_CTG_NM_ARR
                        , fn_getGoodsIcon(TG.GOODS_NO, '5') AS ICON_IMGS
				        , TRUNC(RELATE_GOODS_SALE_PRICE_START, 0) AS RELATE_GOODS_SALE_PRICE_START
				        , TRUNC(RELATE_GOODS_SALE_PRICE_END, 0) AS RELATE_GOODS_SALE_PRICE_END
				        , RELATE_GOODS_SALE_STATUS_CD
				        , RELATE_GOODS_DISP_STATUS_CD
				        , RELATE_GOODS_AUTO_EXPS_SORT_CD
			            , TI.ITEM_NM
			            , TI.SUPPLY_PRICE
                        , TI.DC_PRICE_APPLY_ALWAYS_YN
                        , TI.SEP_SUPPLY_PRICE_YN
			            , TI.APPLY_DAVISION_STOCK_YN
                        , TI.DC_START_DTTM
                        , TI.DC_END_DTTM
			            , TI.DC_START_DTTM as MULTI_DC_START_DTTM
			            , TI.DC_END_DTTM as MULTI_DC_END_DTTM
			            , TI.DC_PRICE_APPLY_ALWAYS_YN as MULTI_DC_PRICE_APPLY_ALWAYS_YN
                        , TI.COST
			            , TI.CUSTOMER_PRICE
			            , TI.SALE_PRICE
			            , TI.STOCK_QTT
			            , fn_getGoodsImgPath(TG.GOODS_NO,'03') AS LATELY_IMG
			            , fn_getGoodsImgPath(TG.GOODS_NO,'02') AS SNS_IMG
			            , fn_getGoodsDispImgPath(TG.GOODS_NO, 'C') AS GOODS_DISP_IMG_C
			            , TS.AVAIL_STOCK_QTT
			            , TS.AVAIL_STOCK_SALE_YN
			            , TS.STOCK_SET_YN
                        , TG.EVENT_WORDS
                        , TG.SELLER_MEMO
                        , TG.SALE_FOREVER_YN
                        , TG.NORMAL_YN
                        , TG.NEW_GOODS_YN
                        , TG.MALL_ORDER_YN
                        , TG.GOODS_STAMP_TYPE_CD
                        , TG.ICON_USE_YN
                        , TG.SMF_USE_YN
			            , TO_CHAR(TG.REG_DTTM,'YYYY-MM-DD') AS REG_DTTM
                		,'등록일시 : '||TO_CHAR(TG.REG_DTTM,'YYYY-MM-DD')|| ' / ' ||TO_CHAR(TG.REG_DTTM,'HH24:MI:SS') AS STR_REG_DTTM
                		,'수정일시 : '||TO_CHAR(TG.UPD_DTTM,'YYYY-MM-DD')|| ' / ' ||TO_CHAR(TG.UPD_DTTM,'HH24:MI:SS') AS STR_UPD_DTTM
			        FROM  TG_GOODS TG
			            , TG_ITEM TI
			            , TS_SITE TS
			        WHERE TG.ITEM_NO = TI.ITEM_NO
			          AND TG.SITE_NO = TS.SITE_NO
			          AND TG.GOODS_NO = #{goodsNo}
			            <if test="saleYn != null and saleYn != ''">
                          <choose>
                              <when test="saleYn eq 'Y'.toString()">
                               <![CDATA[
			                     AND (TG.SALE_START_DT <= TO_CHAR(sysdate, 'YYYYMMDD') OR TG.SALE_START_DT IS NULL)
			                     AND (TG.SALE_END_DT >= TO_CHAR(sysdate, 'YYYYMMDD') OR TG.SALE_END_DT IS NULL)
                               ]]>
                              </when>
                              <when test="saleYn eq 'N'.toString()">
                                  AND TG.SALE_YN = #{saleYn}
                              </when>
                          </choose>
	                    </if>
	                    <if test="dispYn != null and dispYn !=''">
	                    AND TG.DISP_YN = #{dispYn}
	                    </if>
	                    <if test="delYn != null and delYn !=''">
	                    AND TG.DEL_YN = #{delYn}
	                    AND TI.DEL_YN = #{delYn}
	                    </if>
			           ) A
			    LEFT JOIN (
			            SELECT
			                 TGI.GOODS_NO
                            ,utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGI.ICON_NO) order by TGI.ICON_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ICON_ARRAY
			            FROM TG_GOODS_ICON TGI
			            WHERE TGI.GOODS_NO = #{goodsNo}
                        GROUP BY TGI.GOODS_NO
			            ) B
			    ON A.GOODS_NO = B.GOODS_NO
			    LEFT JOIN (
			            SELECT
			                 TGAT.GOODS_NO
                            ,utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGAT.GUN_NO) order by TGAT.GUN_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS GUN_ARRAY
			            FROM TG_GOODS_GUN_ATTR TGAT
			            WHERE TGAT.GOODS_NO = #{goodsNo}
                        GROUP BY TGAT.GOODS_NO
			            ) B1
			    ON A.GOODS_NO = B1.GOODS_NO

			    LEFT JOIN (
			            SELECT
			                 TGC.GOODS_NO
                            ,utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',fn_categoryName(TGC.CTG_NO, TGC.SITE_NO)) order by TGC.EXPS_PRIOR_RANK asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS CTG_NAME_ARR
                            ,utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGC.DLGT_CTG_YN) order by TGC.EXPS_PRIOR_RANK asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS DLGT_CTG_YN_ARR
                            ,utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGC.CTG_NO) order by TGC.EXPS_PRIOR_RANK asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS CTG_NO_ARR
                            , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',(SELECT nvl(CTG_CMS_RATE,0) FROM TG_CTG WHERE CTG_NO=TGC.CTG_NO AND SITE_NO = TGC.SITE_NO)) order by 1 asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS CTG_CMS_RATE_ARR
			            FROM TG_GOODS_CTG TGC
			            WHERE TGC.SITE_NO = #{siteNo}
			             AND TGC.GOODS_NO = #{goodsNo}
			             AND TGC.DEL_YN = 'N'
                        GROUP BY TGC.GOODS_NO
			             ) C
			    ON A.GOODS_NO = C.GOODS_NO

                LEFT JOIN (
                        SELECT
	                          TGN.GOODS_NO
                                , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGN.ITEM_NO) order by TGN.ITEM_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS NOTIFY_ITEM_NO_ARR
                                , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',TGN.ITEM_VALUE) order by TGN.ITEM_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS NOTIFY_ITEM_VALUE_ARR
                        FROM TG_GOODS_NOTIFY TGN
                        WHERE TGN.GOODS_NO = #{goodsNo}
                        GROUP BY TGN.GOODS_NO
                        ) D
                ON A.GOODS_NO = D.GOODS_NO

                LEFT JOIN (
                        SELECT
                              trg.GOODS_NO
                            , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',trg.RELATE_GOODS_NO) order by trg.PRIOR_RANK asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS RELATE_GOODS_NO_ARR
                            , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',NVL(trg.EACH_REG_SET_YN, 'N')) order by trg.PRIOR_RANK asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS EACH_REG_SET_YN_ARR
                        FROM TG_RELATE_GOODS trg
                        WHERE trg.GOODS_NO = #{goodsNo}
                        GROUP BY trg.GOODS_NO
                        ) E
                ON A.GOODS_NO = E.GOODS_NO
                LEFT JOIN (
                    SELECT 
                    	GOODS_NO
                    	,RECOM_PVD_POLICY_CD
                        ,(CASE WHEN RECOM_PVD_POLICY_CD = '04' THEN GOODS_RECOM_PVD_RATE
                             WHEN RECOM_PVD_POLICY_CD = '03' THEN SELLER_RECOM_PVD_RATE
                             WHEN RECOM_PVD_POLICY_CD = '02' THEN CTG_RECOM_PVD_RATE
                             WHEN RECOM_PVD_POLICY_CD = '01' THEN SITE_RECOM_PVD_RATE
                             ELSE 0 END) RECOM_PVD_RATE
                        ,GOODS_SVMN_POLICY_CD
                        ,(CASE WHEN GOODS_SVMN_POLICY_CD = '04' THEN GOODS_SVMN_AMT
                             WHEN GOODS_SVMN_POLICY_CD = '03' THEN SELLER_SVMN_AMT
                             WHEN GOODS_SVMN_POLICY_CD = '02' THEN CTG_SVMN_AMT
                             WHEN GOODS_SVMN_POLICY_CD = '01' THEN SITE_SVMN_PVD_RATE
                             ELSE 0 END) GOODS_SVMN_AMT
                        ,(CASE WHEN GOODS_SVMN_POLICY_CD = '04' AND GOODS_SVMN_GB_CD = '2' THEN 2
                             WHEN GOODS_SVMN_POLICY_CD = '03' AND SELLER_SVMN_GB_CD = '2' THEN 2
                             WHEN GOODS_SVMN_POLICY_CD = '02' AND CTG_SVMN_GB_CD = '2' THEN 2
                             WHEN GOODS_SVMN_POLICY_CD = '01' THEN 1
                             ELSE 1 END) GOODS_SVMN_GB_CD
                    FROM (
                          SELECT C.GOODS_NO
                          		   ,D.RECOM_PVD_RATE AS SITE_RECOM_PVD_RATE
                                   ,(SELECT RECOM_PVD_RATE FROM TG_CTG T WHERE T.CTG_NO = B.CTG_NO) AS CTG_RECOM_PVD_RATE
                                   ,(SELECT RECOM_PVD_RATE FROM TS_SELLER T WHERE T.SELLER_NO = C.SELLER_NO) AS SELLER_RECOM_PVD_RATE
                                   ,C.RECOM_PVD_RATE AS GOODS_RECOM_PVD_RATE
                                   ,NVL(C.RECOM_PVD_POLICY_CD, '01') RECOM_PVD_POLICY_CD
                                   
                                   ,D.SVMN_PVD_RATE AS SITE_SVMN_PVD_RATE
                                   ,(SELECT CTG_SVMN_AMT FROM TG_CTG T WHERE T.CTG_NO = B.CTG_NO) AS CTG_SVMN_AMT
                                   ,(SELECT SELLER_SVMN_AMT FROM TS_SELLER T WHERE T.SELLER_NO = C.SELLER_NO) AS SELLER_SVMN_AMT
                                   ,C.GOODS_SVMN_AMT AS GOODS_SVMN_AMT
                                   ,NVL(C.GOODS_SVMN_POLICY_CD, '01') GOODS_SVMN_POLICY_CD
                                   
                                   ,(SELECT CTG_SVMN_GB_CD FROM TG_CTG T WHERE T.CTG_NO = B.CTG_NO) AS CTG_SVMN_GB_CD
                                   ,(SELECT SELLER_SVMN_GB_CD FROM TS_SELLER T WHERE T.SELLER_NO = C.SELLER_NO) AS SELLER_SVMN_GB_CD
                                   ,C.GOODS_SVMN_GB_CD
                              FROM TG_GOODS C,
                                   TS_SITE D,
                                   TG_GOODS_CTG B
                            WHERE C.SITE_NO = D.SITE_NO
                              AND C.GOODS_NO = B.GOODS_NO
                              AND D.SVMN_PVD_YN = 'Y'
                              AND B.DLGT_CTG_YN = 'Y'
                              and B.DEL_YN = 'N'
                              AND C.GOODS_NO = #{goodsNo}
                              AND C.SITE_NO = #{siteNo}
                    )
                ) F ON A.GOODS_NO = F.GOODS_NO
		LEFT OUTER JOIN TG_FRAMES_ATTR TFA
			ON A.GOODS_NO = TFA.GOODS_NO
		LEFT OUTER JOIN TG_SUNGLASS_ATTR TSA
			ON A.GOODS_NO = TSA.GOODS_NO
		LEFT OUTER JOIN TG_GLASSES_LENS_ATTR TGA
			ON A.GOODS_NO = TGA.GOODS_NO
		LEFT OUTER JOIN TG_CONTACT_LENS_ATTR TCA
			ON A.GOODS_NO = TCA.GOODS_NO
		LEFT OUTER JOIN TG_HA_ATTR THA
			ON A.GOODS_NO = THA.GOODS_NO
		LEFT OUTER JOIN TI_ERP_PRD_MAPPING EPM
			ON A.ITEM_NO = EPM.MALL_ITM_CODE
    </select>

    <!-- 상품 상세정보 조회 -->
    <select id="selectGoodsContents" resultType="net.danvi.dmall.biz.app.goods.model.GoodsContentsVO">
       /* goods.manage.selectGoodsContents - 상품 상세정보 조회 */
        SELECT
                NVL2(CONTENT, CONTENT, '') AS CONTENT
        FROM    TG_GOODS_DSCRT
        WHERE   GOODS_NO = #{goodsNo}
    </select>


    <!-- 상품 단품 조회 -->
    <select id="selectGoodsItem" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemVO">
       /* goods.manage.selectGoodsItem - 상품 단품 조회 */
        SELECT
              ti.ITEM_NO
            , NVL(ti.ITEM_VER, 0) AS ITEM_VER
            , ti.SITE_NO
            , ti.GOODS_NO
            , ti.ITEM_NM
            , ti.USE_YN
            , ti.SUPPLY_PRICE
            , ti.SEP_SUPPLY_PRICE_YN
            , ti.APPLY_DAVISION_STOCK_YN
            , ti.COST
            , ti.CUSTOMER_PRICE
            , ti.SALE_PRICE
            , ti.STOCK_QTT
            , ti.SALE_QTT
            , NVL(fn_getGoodsItemImgPath(ti.ITEM_NO), '') AS GOODS_ITEM_IMG
            , NVL((SELECT FILE_PATH FROM TG_ITEM_IMG WHERE ITEM_NO = #{itemNo}), '') AS FILE_PATH
            , NVL((SELECT FILE_NM FROM TG_ITEM_IMG WHERE ITEM_NO = #{itemNo}), '') AS FILE_NM
        FROM  TG_ITEM ti
       WHERE  ti.DEL_YN = 'N'
         AND  ITEM_NO = #{itemNo}
    </select>

    <!-- 단품 가격 변동 이력 조회 -->
    <select id="selectItemPriceChgHistory" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemHistoryVO">
       /* goods.manage.selectItemPriceChgHistory - 단품 가격 변동 이력 조회 */
    SELECT * fROM (
		SELECT
		    tg.GOODS_NO
		  , tg.GOODS_NM
		  , #{itemNo} AS ITEM_NO
		  , NVL((SELECT SALE_PRICE FROM TG_ITEM WHERE ITEM_NO = #{itemNo}), 0) AS SALE_PRICE
		FROM TG_GOODS tg
		WHERE tg.GOODS_NO = #{goodsNo}
    ) a
    LEFT JOIN(
        SELECT
              TO_CHAR(to_date(CHG_DT, 'YYYYMMDD'),'YYYY.MM.DD') AS CHG_DT
            , CASE CHG_CD WHEN '00' THEN '인하' ELSE '인상' END AS CHG_PRICE_CD
            , CHG_PRICE
            , ITEM_NO
            , SEQ
        FROM TG_ITEM_PRICE_CHG_HIST
       WHERE ITEM_NO = #{itemNo}
       ORDER BY SEQ
    ) b ON a.ITEM_NO = b.ITEM_NO
    ORDER BY SEQ ASC
    </select>

    <!-- 단품 수량 변동 이력 조회 -->
    <select id="selectItemQttChgHistory" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemHistoryVO">
       /* goods.manage.selectItemQttChgHistory - 단품 수량 변동 이력 조회 */
    SELECT * fROM (
        SELECT
            tg.GOODS_NO
          , tg.GOODS_NM
          , #{itemNo} AS ITEM_NO
          , NVL((SELECT STOCK_QTT FROM TG_ITEM WHERE ITEM_NO = #{itemNo}), 0) AS STOCK_QTT
          , NVL((SELECT SUM(CASE WHEN CHG_CD = '00' THEN TO_NUMBER(CHG_QTT) ELSE 0  END) FROM TG_ITEM_QTT_CHG_HIST WHERE ITEM_NO = #{itemNo}), 0) AS TOTAL_MINUS
          , NVL((SELECT SUM(CASE WHEN CHG_CD = '01' THEN TO_NUMBER(CHG_QTT) ELSE 0  END) FROM TG_ITEM_QTT_CHG_HIST WHERE ITEM_NO = #{itemNo}), 0) AS TOTAL_PLUS
        FROM TG_GOODS tg
        WHERE tg.GOODS_NO = #{goodsNo}
    ) a
    LEFT JOIN(
        SELECT
              TO_CHAR(to_date(CHG_DT, 'YYYYMMDD'),'YYYY.MM.DD') AS CHG_DT
            , CASE CHG_CD WHEN '00' THEN '출고' ELSE '입고' END AS CHG_QTT_CD
            , CHG_QTT
            , ITEM_NO
            , SEQ
        FROM TG_ITEM_QTT_CHG_HIST
       WHERE ITEM_NO = #{itemNo}
       ORDER BY SEQ
    ) b ON a.ITEM_NO = b.ITEM_NO
    ORDER BY SEQ ASC
    </select>

    <!-- 상품 단품 정보 조회 -->
    <select id="selectGoodsItemInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemVO">
        /* goods.manage.selectGoodsItemInfo - 상품 단품 정보 조회 */
        SELECT T.*
        FROM
        (
			SELECT
			      CASE WHEN tg.ITEM_NO = ti.ITEM_NO THEN 'Y' ELSE 'N' END AS STANDARD_PRICE_YN
			    , ti.ITEM_NO
			    , ti.SITE_NO
			    , ti.GOODS_NO
			    , ti.ITEM_NM
			    , ti.USE_YN
			    , ti.SUPPLY_PRICE
	            , ti.SEP_SUPPLY_PRICE_YN
                , ti.COST
			    , ti.CUSTOMER_PRICE
			    , ti.SALE_PRICE
			    , ti.STOCK_QTT
			    , ti.SALE_QTT
			    , ti.ITEM_VER
                , ti.DC_START_DTTM
                , ti.DC_END_DTTM
                , ti.DC_PRICE_APPLY_ALWAYS_YN
			    , ti.APPLY_DAVISION_STOCK_YN
			    , tia.ATTR_VER
			    , tia.OPT_NO1
			    , tia.ATTR_NO1
			    , fn_getOptAttrName (tia.OPT_NO1, 'OPT') AS OPT_VALUE1
			    , fn_getOptAttrName (tia.ATTR_NO1, 'ATTR') AS ATTR_VALUE1
			    , tia.OPT_NO2
			    , tia.ATTR_NO2
			    , fn_getOptAttrName (tia.OPT_NO2, 'OPT') AS OPT_VALUE2
			    , fn_getOptAttrName (tia.ATTR_NO2, 'ATTR') AS ATTR_VALUE2
			    , tia.OPT_NO3
			    , tia.ATTR_NO3
			    , fn_getOptAttrName (tia.OPT_NO3, 'OPT') AS OPT_VALUE3
			    , fn_getOptAttrName (tia.ATTR_NO3, 'ATTR') AS ATTR_VALUE3
			    , tia.OPT_NO4
			    , tia.ATTR_NO4
			    , fn_getOptAttrName (tia.OPT_NO4, 'OPT') AS OPT_VALUE4
			    , fn_getOptAttrName (tia.ATTR_NO4, 'ATTR') AS ATTR_VALUE4
			    , 'L' AS REGIST_FLAG
			    , EPM.ERP_ITM_CODE
			    , RANK() OVER(PARTITION BY ti.ITEM_NO ORDER BY tia.ATTR_VER DESC) AS RANK
                , (SELECT FILE_PATH FROM TG_ITEM_IMG WHERE ti.ITEM_NO = ITEM_NO) AS FILE_PATH
                , (SELECT FILE_NM FROM TG_ITEM_IMG WHERE ti.ITEM_NO = ITEM_NO) AS FILE_NM
			    , fn_getGoodsItemImgPath(ti.ITEM_NO) AS GOODS_ITEM_IMG
			FROM TG_GOODS tg,
			     TG_ITEM ti,
			     TG_ITEM_ATTR tia,
           		TI_ERP_PRD_MAPPING epm
	        WHERE tg.GOODS_NO = ti.GOODS_NO
	          AND ti.ITEM_NO = tia.ITEM_NO(+)
              AND ti.ITEM_NO = epm.MALL_ITM_CODE(+)
			  AND ti.USE_YN = 'Y'
			  AND ti.GOODS_NO = #{goodsNo}
			  <if test="itemNo != null and itemNo != ''">
			  AND ti.ITEM_NO = #{itemNo}
			  </if>
		) T
		WHERE RANK = 1
    </select>

    <!-- 상품 추가옵션 정보 조회 -->
    <select id="selectGoodsAddOptInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsAddOptionVO">
        /* goods.manage.selectGoodsAddOptInfo - 상품 추가옵션 정보 조회 */
        SELECT MAX(A.GOODS_NO) AS GOODS_NO
            , MAX(A.ADD_OPT_NO) AS ADD_OPT_NO
            , MAX(A.ADD_OPT_NM) AS ADD_OPT_NM
            , MAX(A.REQUIRED_YN) AS REQUIRED_YN
            , MAX(A.ADD_OPT_USE_YN) AS ADD_OPT_USE_YN
			, utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',ADD_OPT_DTL_SEQ) order by ADD_OPT_DTL_SEQ asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ADD_OPT_DTL_SEQ_ARR
			, utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',ADD_OPT_VALUE) order by ADD_OPT_DTL_SEQ asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ADD_OPT_VALUE_ARR
			, utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',ADD_OPT_AMT_CHG_CD) order by ADD_OPT_DTL_SEQ asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ADD_OPT_AMT_CHG_CD_ARR
			, utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',ADD_OPT_AMT) order by ADD_OPT_DTL_SEQ asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ADD_OPT_AMT_ARR
			, utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',OPT_VER) order by ADD_OPT_DTL_SEQ asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS OPT_VER_ARR
		FROM (
		    SELECT
		       tao.GOODS_NO
		     , tao.ADD_OPT_NO
		     , tao.ADD_OPT_NM
		     , tao.REQUIRED_YN
		     , tad.ADD_OPT_DTL_SEQ
		     , tad.ADD_OPT_VALUE
		     , tad.ADD_OPT_AMT_CHG_CD
		     , NVL(tad.ADD_OPT_AMT, 0) AS ADD_OPT_AMT
		     , tad.OPT_VER
		     , tg.ADD_OPT_USE_YN
		    FROM TG_ADD_OPT tao, TG_ADD_OPT_DTL tad, TG_GOODS tg
		    WHERE tao.GOODS_NO = tad.GOODS_NO
		      AND tao.ADD_OPT_NO = tad.ADD_OPT_NO
		      AND tao.GOODS_NO = tg.GOODS_NO
		      AND tao.GOODS_NO = #{goodsNo}
		) A GROUP BY ADD_OPT_NO
    </select>

    <!-- 단품 속성 버젼 조회 -->
    <select id="selectNewAttrVer" resultType="long" useCache="false">
        /* goods.manage.selectNewAttrVer - 단품 속성 버젼 조회 */
      SELECT MAX(NVL(TIA.ATTR_VER, 0))+1 AS ATTR_VER
        FROM TG_ITEM_ATTR TIA
       WHERE TIA.ITEM_NO = #{itemNo}
    </select>

    <!-- 상품 이미지 정보 조회 -->
    <select id="selectGoodsImageInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsImageDtlVO">
    /* goods.manage.selectGoodsImageInfo - 상품 이미지 정보 조회 */
        SELECT
          tis.GOODS_IMGSET_NO
        , tis.GOODS_NO
        , tis.DLGT_IMG_YN
        , tid.GOODS_IMG_TYPE
        , tid.IMG_PATH
        , tid.IMG_NM
        , tid.IMG_WIDTH
        , tid.IMG_HEIGHT
        , tid.IMG_SIZE
    FROM TG_GOODS_IMG_SET tis, TG_GOODS_IMG_DTL tid
    WHERE tis.GOODS_IMGSET_NO = tid.GOODS_IMGSET_NO
      AND tis.GOODS_NO = #{goodsNo}
      </select>

      <!-- 착용샷 이미지 정보 조회 -->
    <select id="selectWearImageInfo" resultType="net.danvi.dmall.biz.app.goods.model.WearImageDtlVO">
    /* goods.manage.selectWearImageInfo - 상품 이미지 정보 조회 */
        SELECT
          tis.WEAR_IMGSET_NO
        , tis.GOODS_NO
        , tid.WEAR_IMG_TYPE
        , tid.IMG_PATH
        , tid.IMG_NM
        , tid.IMG_WIDTH
        , tid.IMG_HEIGHT
        , tid.IMG_SIZE
        , tid.WEAR_GOODS_NM
        , tid.COLOR_VALUE
        , tid.WEAR_CYCLE
        , tid.GRP_DMTR
        , tid.MATERIAL_VALUE
        , tid.UV_INTERCEPTION_VALUE
        , tid.QTT_VALUE
        , tid.SALE_PRICE_VALUE
        , tid.MKT_BNF_VALUE
    FROM TG_CONTACT_WEAR_ATTR tis, TG_CONTACT_WEAR_ATTR_DTL tid
    WHERE tis.WEAR_IMGSET_NO = tid.WEAR_IMGSET_NO
      AND tis.GOODS_NO = #{goodsNo}
      </select>

    <!-- 상품 전시 이미지 정보 조회 -->
    <select id="selectGoodsDispImageInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsDetailVO">
    /* goods.manage.selectGoodsImageInfo - 상품 전시 이미지 정보 조회 */
        SELECT
           TG.DISP_IMG_PATH_TYPE_A
         , TG.DISP_IMG_NM_TYPE_A
         , TG.DISP_IMG_PATH_TYPE_B
         , TG.DISP_IMG_NM_TYPE_B
         , TG.DISP_IMG_PATH_TYPE_C
         , TG.DISP_IMG_NM_TYPE_C
         , TG.DISP_IMG_PATH_TYPE_D
         , TG.DISP_IMG_NM_TYPE_D
         , TG.DISP_IMG_PATH_TYPE_E
         , TG.DISP_IMG_NM_TYPE_E
         , TG.DISP_IMG_PATH_TYPE_F
         , TG.DISP_IMG_NM_TYPE_F
         , TG.DISP_IMG_PATH_TYPE_G
         , TG.DISP_IMG_NM_TYPE_G
         , TG.DISP_IMG_PATH_TYPE_S
         , TG.DISP_IMG_NM_TYPE_S
         , TG.DISP_IMG_PATH_TYPE_M
         , TG.DISP_IMG_NM_TYPE_M
         , TG.DISP_IMG_PATH_TYPE_O
         , TG.DISP_IMG_NM_TYPE_O
         , TG.DISP_IMG_PATH_TYPE_P
         , TG.DISP_IMG_NM_TYPE_P
    FROM TG_GOODS TG
    WHERE TG.GOODS_NO = #{goodsNo}
      </select>

    <!-- 최근 등록한 옵션 정보 취득 -->
    <select id="selectRecentOption" resultType="net.danvi.dmall.biz.app.goods.model.GoodsOptionVO">
    /* goods.manage.selectRecentOption - 최근 등록한 옵션 정보 취득 */
	SELECT
	      tgo.OPT_NO
	    , MAX(tgo.OPT_NM) AS OPT_NM
        , MAX(tgo.REG_SEQ) AS REG_SEQ
	    , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',tga.ATTR_NO) order by tga.ATTR_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ATTR_NO_ARR
	    , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',tga.ATTR_NM) order by tga.ATTR_NM asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ATTR_NM_ARR
	FROM TG_OPT tgo, TG_ATTR tga
	WHERE tgo.OPT_NO = tga.OPT_NO
	AND tga.USE_YN = 'Y'
	AND tgo.REG_SEQ = #{regSeq}
	AND tgo.SITE_NO = #{siteNo}
	GROUP BY tgo.OPT_NO
    </select>

        <!-- 상품 옵션 정보 취득 -->
    <select id="selectGoodsOption" resultType="net.danvi.dmall.biz.app.goods.model.GoodsOptionVO">
	    /* goods.manage.selectGoodsOption - 상품 옵션 정보 취득 */
	    SELECT
	          max(tgo.GOODS_NO) as GOODS_NO
	        , tot.OPT_NO
	        , max(tot.OPT_NM) as OPT_NM
	        , max(tot.REG_SEQ) as REG_SEQ
            , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',tga.ATTR_NO) order by tga.ATTR_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ATTR_NO_ARR
            , utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,'#@#',tga.ATTR_NM) order by tga.ATTR_NM asc ).EXTRACT ('//text()').GETSTRINGVAL(),4)) AS ATTR_NM_ARR
	    FROM TG_GOODS_OPT tgo, TG_OPT tot, TG_ATTR tga
	    WHERE tgo.OPT_NO = tot.OPT_NO
	    AND tot.OPT_NO = tga.OPT_NO
	    AND tga.USE_YN = 'Y'
	    AND tot.USE_YN = 'Y'
	    AND tgo.GOODS_NO = #{goodsNo}
	    GROUP BY tot.OPT_NO
    </select>

    <!-- 관련상품 정보 취득 -->
    <select id="selectRelateGoodsList" resultType="net.danvi.dmall.biz.app.goods.model.GoodsVO">
    /* goods.manage.selectRelateGoodsList - 관련상품 정보 취득 */
    SELECT
        TG.GOODS_NO,
        TG.GOODS_NM,
        TG.ITEM_NO,
        TG.GOODS_SALE_STATUS_CD,
        TG.DISP_YN,
        TG.GOODSEACH_DLVRC,
        TG.MODEL_NM,
        TG.SMR_GOODS_NM,
        TG.PRE_GOODS_YN,
        TG.STAMP_YN,
        TG.PR_WORDS,
        TG.INWARE_SCD_SCH,
        TG.MMFT,
        fn_getGoodsImgPath(TG.GOODS_NO, '01') AS GOODS_IMG_01,
        fn_getGoodsImgPath(TG.GOODS_NO, '02') AS GOODS_IMG_02,
        fn_getGoodsImgPath(TG.GOODS_NO, '03') AS GOODS_IMG_03,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'A') AS GOODS_DISP_IMG_A,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'B') AS GOODS_DISP_IMG_B,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'C') AS GOODS_DISP_IMG_C,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'D') AS GOODS_DISP_IMG_D,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'E') AS GOODS_DISP_IMG_E,
        fn_getGoodsIcon(TG.GOODS_NO, '5') AS ICON_IMGS,
        TG.REG_DTTM,
        TG.UPD_DTTM,
        NVL(TG.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
        NVL(TG.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
        NVL(TG.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
        NVL(TG.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
        NVL(TG.GOODS_SCORE,0) AS GOODS_SCORE,
        fn_getBrandNm(TG.BRAND_NO) AS BRAND_NM ,
        TI.ITEM_NM,
        NVL(TI.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
        NVL(TI.SALE_PRICE,0) AS SALE_PRICE,
        decode(nvl(TI.CUSTOMER_PRICE,0), 0, 0, 100-(TI.SALE_PRICE/TI.CUSTOMER_PRICE)*100) as SALE_RATE,
        NVL((SELECT MAX(PRMT_DC_VALUE) FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG WHERE TP.PRMT_NO = TPTG.PRMT_NO
                AND TPTG.GOODS_NO = TG.GOODS_NO
                AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N' ),0) AS PRMT_DC_VALUE,
        NVL(TI.STOCK_QTT,0) AS STOCK_QTT,
        TRG.RELATE_GOODS_NO,
        TRG.EACH_REG_SET_YN,
        TRG.PRIOR_RANK,
        'L' AS REGIST_FLAG
    FROM TG_RELATE_GOODS TRG, TG_GOODS TG, TG_ITEM TI
    WHERE  TRG.RELATE_GOODS_NO = TG.GOODS_NO
    AND TG.ITEM_NO = TI.ITEM_NO
    AND NVL(TG.DEL_YN, 'N') = 'N'
    AND NVL(TI.DEL_YN, 'N') = 'N'

    AND NVL(TG.DISP_YN, 'N') = 'Y'
    <if test="saleYn != null and saleYn != ''">
        <choose>
            <when test="saleYn eq 'Y'.toString()">
             <![CDATA[
               AND (TG.SALE_START_DT <= TO_CHAR(sysdate, 'YYYYMMDD') OR TG.SALE_START_DT IS NULL)
               AND (TG.SALE_END_DT >= TO_CHAR(sysdate, 'YYYYMMDD') OR TG.SALE_END_DT IS NULL)
             ]]>
            </when>
            <when test="saleYn eq 'N'.toString()">
                AND TG.SALE_YN = #{saleYn}
            </when>
        </choose>
    </if>
    <if test="goodsStatus != null and goodsStatus.length > 0">
        AND TG.GOODS_SALE_STATUS_CD IN (
        <foreach collection="goodsStatus" item="a" separator=",">#{a}</foreach>
        )
    </if>
    AND TRG.GOODS_NO = #{goodsNo}
    ORDER BY PRIOR_RANK ASC
    </select>

    <select id="selectRelateGoodsListByIn" resultType="net.danvi.dmall.biz.app.goods.model.GoodsVO">
    /* goods.manage.selectRelateGoodsListByIn - 관련상품 정보 취득(미리보기용) */
    SELECT
        TG.GOODS_NO,
        TG.GOODS_NM,
        TG.ITEM_NO,
        TG.GOODS_SALE_STATUS_CD,
        TG.DISP_YN,
        TG.GOODSEACH_DLVRC,
        TG.MODEL_NM,
        TG.SMR_GOODS_NM,
        TG.PRE_GOODS_YN,
        TG.STAMP_YN,
        TG.PR_WORDS,
        TG.INWARE_SCD_SCH,
        TG.MMFT,
        fn_getGoodsImgPath(TG.GOODS_NO, '01') AS GOODS_IMG_01,
        fn_getGoodsImgPath(TG.GOODS_NO, '02') AS GOODS_IMG_02,
        fn_getGoodsImgPath(TG.GOODS_NO, '03') AS GOODS_IMG_03,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'A') AS GOODS_DISP_IMG_A,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'B') AS GOODS_DISP_IMG_B,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'C') AS GOODS_DISP_IMG_C,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'D') AS GOODS_DISP_IMG_D,
        fn_getGoodsDispImgPath(TG.GOODS_NO, 'E') AS GOODS_DISP_IMG_E,
        fn_getGoodsIcon(TG.GOODS_NO, '5') AS ICON_IMGS,
        TG.REG_DTTM,
        TG.UPD_DTTM,
        NVL(TG.ACCM_SALE_AMT,0) AS ACCM_SALE_AMT,
        NVL(TG.ACCM_SALE_CNT,0) AS ACCM_SALE_CNT,
        NVL(TG.ACCM_GOODSLETT_CNT,0) AS ACCM_GOODSLETT_CNT,
        NVL(TG.GOODS_SVMN_AMT,0) AS GOODS_SVMN_AMT,
        NVL(TG.GOODS_SCORE,0) AS GOODS_SCORE,
        fn_getBrandNm(TG.BRAND_NO) AS BRAND_NM ,
        TI.ITEM_NM,
        NVL(TI.CUSTOMER_PRICE,0) AS CUSTOMER_PRICE,
        NVL(TI.SALE_PRICE,0) AS SALE_PRICE,
        decode(nvl(TI.CUSTOMER_PRICE,0), 0, 0, 100-(TI.SALE_PRICE/TI.CUSTOMER_PRICE)*100) as SALE_RATE,
        NVL((SELECT MAX(PRMT_DC_VALUE) FROM TP_PROMOTION TP, TP_PROMOTION_TARGET_GOODS TPTG WHERE TP.PRMT_NO = TPTG.PRMT_NO
                AND TPTG.GOODS_NO = TG.GOODS_NO AND TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS') BETWEEN TO_CHAR(TP.APPLY_START_DTTM,'YYYY-MM-DD HH24:MI:SS') AND TO_CHAR(TP.APPLY_END_DTTM,'YYYY-MM-DD HH24:MI:SS')
                AND TP.USE_YN = 'Y' AND TP.DEL_YN = 'N' ),0) AS PRMT_DC_VALUE,
        NVL(TI.STOCK_QTT,0) AS STOCK_QTT
    FROM TG_GOODS TG, TG_ITEM TI
    WHERE TG.ITEM_NO = TI.ITEM_NO
    AND NVL(TG.DEL_YN, 'N') = 'N'
    AND NVL(TI.DEL_YN, 'N') = 'N'
    AND TG.GOODS_NO IN
        <foreach collection="relateGoodsList" item="goods" open="(" close=")" separator=",">#{goods.relateGoodsNo}</foreach>
    </select>

    <!-- 신규 상품 정보 조회 - 끝 -->

    <!-- 단품정보 조회 -->
    <select id="selectItemInfo" parameterType="net.danvi.dmall.biz.app.goods.model.GoodsItemSO" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemVO">
	/* goods.manage.getLastItemVersion - 단품정보 조회 */
	SELECT ITEM_NO, SITE_NO, GOODS_NO, ITEM_NM, USE_YN, NVL(ITEM_VER, 0) AS ITEM_VER, SUPPLY_PRICE,
	CUSTOMER_PRICE, SALE_PRICE,
	STOCK_QTT, SALE_QTT,
	NVL((SELECT MAX(ATTR_VER) FROM TG_ITEM_ATTR WHERE ITEM_NO = #{itemNo}),0) AS ATTR_VER
	FROM TG_ITEM
	WHERE SITE_NO = #{siteNo}
	AND GOODS_NO = #{goodsNo}
	AND ITEM_NO = #{itemNo}
    </select>
    <!-- 단품정보 조회 끝-->


    <insert id="insertCopyGoods">
    /* goods.manage.insertCopyGoods - 상품 정보 복사 등록 */
    INSERT INTO TG_GOODS (
		   GOODS_NO
		  ,SELLER_NO
		  ,COMPANY_NO
		  ,SITE_NO
		  ,ITEM_NO
		  ,NOTIFY_NO
		  ,GOODS_NM
		  ,MODEL_NM
		  ,BRAND_NO
		  ,GOODS_SALE_STATUS_CD
		  ,DISP_YN
		  ,RETURN_PSB_YN
		  ,SALE_YN
		  ,SALE_START_DT
		  ,SALE_END_DT
		  ,GOODS_ADD_INFO_USE_YN
		  ,MOBILE_DISP_YN
		  ,REINWARE_APPLY_YN
		  ,RSV_BUY_YN
		  ,ADULT_CERTIFY_YN
		  ,MAX_ORD_LIMIT_YN
		  ,MAX_ORD_QTT
		  ,MIN_ORD_LIMIT_YN
		  ,MIN_ORD_QTT
		  ,SMR_GOODS_NM
		  ,PRE_GOODS_YN
          ,STAMP_YN
		  ,PR_WORDS
		  ,INWARE_SCD_SCH
		  ,ADD_OPT_USE_YN
		  ,MULTI_OPT_YN
		  ,HABITAT
		  ,MMFT
		  ,IMPORTER
		  ,TAX_GB_CD
		  ,HSCODE
		  ,SEO_SEARCH_WORD
		  ,WEIGHT
		  ,DLVR_SET_CD
		  ,DLVR_EXPECT_DAYS
		  ,GOODSEACH_DLVRC
		  ,PACK_MAX_UNIT
		  ,PACK_UNIT_DLVRC
		  ,COURI_DLVR_APPLY_YN
		  ,DIRECT_RECPT_APPLY_YN
		  ,DLVR_PAYMENT_KIND_CD
		  ,TX_LIMIT_CNDT
		  ,RELATE_GOODS_APPLY_TYPE_CD
		  ,RELATE_GOODS_APPLY_CTG
		  ,RELATE_GOODS_SALE_PRICE_START
		  ,RELATE_GOODS_SALE_PRICE_END
		  ,RELATE_GOODS_SALE_STATUS_CD
		  ,RELATE_GOODS_DISP_STATUS_CD
		  ,RELATE_GOODS_AUTO_EXPS_SORT_CD
		  ,GOODS_SVMN_POLICY_USE_YN
		  ,GOODS_SVMN_AMT
		  ,VIDEO_PATH
		  ,VIDEO_SOURCE_PATH
		  ,DISP_IMG_PATH_TYPE_A
		  ,DISP_IMG_NM_TYPE_A
		  ,DISP_IMG_FILE_SIZE_TYPE_A
          ,DISP_IMG_PATH_TYPE_B
          ,DISP_IMG_NM_TYPE_B
          ,DISP_IMG_FILE_SIZE_TYPE_B
          ,DISP_IMG_PATH_TYPE_C
          ,DISP_IMG_NM_TYPE_C
          ,DISP_IMG_FILE_SIZE_TYPE_C
          ,DISP_IMG_PATH_TYPE_D
          ,DISP_IMG_NM_TYPE_D
          ,DISP_IMG_FILE_SIZE_TYPE_D
          ,DISP_IMG_PATH_TYPE_E
          ,DISP_IMG_NM_TYPE_E
          ,DISP_IMG_FILE_SIZE_TYPE_E
          ,DISP_IMG_PATH_TYPE_F
          ,DISP_IMG_NM_TYPE_F
          ,DISP_IMG_FILE_SIZE_TYPE_F
          ,DISP_IMG_PATH_TYPE_G
          ,DISP_IMG_NM_TYPE_G
          ,DISP_IMG_FILE_SIZE_TYPE_G
          ,DISP_IMG_PATH_TYPE_S
          ,DISP_IMG_NM_TYPE_S
          ,DISP_IMG_FILE_SIZE_TYPE_S
          ,DISP_IMG_PATH_TYPE_M
          ,DISP_IMG_NM_TYPE_M
          ,DISP_IMG_FILE_SIZE_TYPE_M
          ,DISP_IMG_PATH_TYPE_O
          ,DISP_IMG_NM_TYPE_O
          ,DISP_IMG_FILE_SIZE_TYPE_O
          ,DISP_IMG_PATH_TYPE_P
          ,DISP_IMG_NM_TYPE_P
          ,DISP_IMG_FILE_SIZE_TYPE_P
		  ,ACCM_SALE_AMT
		  ,ACCM_SALE_CNT
		  ,ACCM_GOODSLETT_CNT
		  ,BASKET_SET_CNT
		  ,FAVGOODS_SET_CNT
		  ,GOODS_INQ_CNT
		  ,GOODS_SCORE
		  ,DEL_YN
		  ,REGR_NO
		  ,REG_DTTM
    )
    SELECT
           #{newGoodsNo}
          ,SELLER_NO
		  ,COMPANY_NO
		  ,SITE_NO
		  ,ITEM_NO
		  ,NOTIFY_NO
		  ,#{newGoodsNm}
		  ,MODEL_NM
		  ,BRAND_NO
		  ,GOODS_SALE_STATUS_CD
		  ,'N'
		  ,RETURN_PSB_YN
		  ,SALE_YN
		  ,SALE_START_DT
		  ,SALE_END_DT
		  ,GOODS_ADD_INFO_USE_YN
		  ,MOBILE_DISP_YN
		  ,REINWARE_APPLY_YN
		  ,RSV_BUY_YN
		  ,ADULT_CERTIFY_YN
		  ,MAX_ORD_LIMIT_YN
		  ,MAX_ORD_QTT
		  ,MIN_ORD_LIMIT_YN
		  ,MIN_ORD_QTT
		  ,SMR_GOODS_NM
		  ,PRE_GOODS_YN
          ,STAMP_YN
		  ,PR_WORDS
		  ,INWARE_SCD_SCH
		  ,ADD_OPT_USE_YN
		  ,MULTI_OPT_YN
		  ,HABITAT
		  ,MMFT
		  ,IMPORTER
		  ,TAX_GB_CD
		  ,HSCODE
		  ,SEO_SEARCH_WORD
		  ,WEIGHT
		  ,DLVR_SET_CD
		  ,DLVR_EXPECT_DAYS
		  ,GOODSEACH_DLVRC
		  ,PACK_MAX_UNIT
		  ,PACK_UNIT_DLVRC
		  ,COURI_DLVR_APPLY_YN
		  ,DIRECT_RECPT_APPLY_YN
		  ,DLVR_PAYMENT_KIND_CD
		  ,TX_LIMIT_CNDT
		  ,RELATE_GOODS_APPLY_TYPE_CD
		  ,RELATE_GOODS_APPLY_CTG
		  ,RELATE_GOODS_SALE_PRICE_START
		  ,RELATE_GOODS_SALE_PRICE_END
		  ,RELATE_GOODS_SALE_STATUS_CD
		  ,RELATE_GOODS_DISP_STATUS_CD
		  ,RELATE_GOODS_AUTO_EXPS_SORT_CD
		  ,GOODS_SVMN_POLICY_USE_YN
		  ,GOODS_SVMN_AMT
		  ,VIDEO_PATH
		  ,VIDEO_SOURCE_PATH
          ,#{dispImgPathTypeA}
          ,#{dispImgNmTypeA}
          ,#{dispImgFileSizeTypeA}
          ,#{dispImgPathTypeB}
          ,#{dispImgNmTypeB}
          ,#{dispImgFileSizeTypeB}
          ,#{dispImgPathTypeC}
          ,#{dispImgNmTypeC}
          ,#{dispImgFileSizeTypeC}
          ,#{dispImgPathTypeD}
          ,#{dispImgNmTypeD}
          ,#{dispImgFileSizeTypeD}
          ,#{dispImgPathTypeE}
          ,#{dispImgNmTypeE}
          ,#{dispImgFileSizeTypeE}
          ,#{dispImgPathTypeF}
          ,#{dispImgNmTypeF}
          ,#{dispImgFileSizeTypeF}
          ,#{dispImgPathTypeG}
          ,#{dispImgNmTypeG}
          ,#{dispImgFileSizeTypeG}
          ,#{dispImgPathTypeS}
          ,#{dispImgNmTypeS}
          ,#{dispImgFileSizeTypeS}
          ,#{dispImgPathTypeM}
          ,#{dispImgNmTypeM}
          ,#{dispImgFileSizeTypeM}
          ,#{dispImgPathTypeO}
          ,#{dispImgNmTypeO}
          ,#{dispImgFileSizeTypeO}
          ,#{dispImgPathTypeP}
          ,#{dispImgNmTypeP}
          ,#{dispImgFileSizeTypeP}
		  ,ACCM_SALE_AMT
		  ,ACCM_SALE_CNT
		  ,ACCM_GOODSLETT_CNT
		  ,BASKET_SET_CNT
		  ,FAVGOODS_SET_CNT
		  ,GOODS_INQ_CNT
		  ,GOODS_SCORE
		  ,'N'
        , #{regrNo}
        , sysdate
    FROM TG_GOODS
    WHERE GOODS_NO = #{targetGoodsNo}
    </insert>


    <!-- 복사 대상 상품 옵션정보 조회 -->
    <select id="selectCopyGoodsOpt" parameterType="net.danvi.dmall.biz.app.goods.model.GoodsCopyVO" resultType="net.danvi.dmall.biz.app.goods.model.GoodsCopyOptVO">
    /* goods.manage.selectCopyGoodsOpt - 복사 대상 상품 옵션정보 조회 */
	SELECT tot.OPT_NO AS TARGET_OPT_NO,
	       tot.SITE_NO,
	       tot.OPT_NM,
	       tot.OPT_SEQ,
	       tot.REG_SEQ,
	       ta.ATTR_NO AS TARGET_ATTR_NO,
	       ta.ATTR_NM
	  FROM TG_GOODS_OPT tgo, TG_OPT tot, TG_ATTR ta
	 WHERE     tgo.OPT_NO = tot.OPT_NO
	       AND tot.OPT_NO = ta.OPT_NO
	       AND ta.USE_YN = 'Y'
	       AND tot.USE_YN = 'Y'
	       AND tgo.GOODS_NO = #{targetGoodsNo}
    </select>

    <!-- 복사 대상 상품 단품정보 조회 -->
    <select id="selectCopyGoodsItem" parameterType="net.danvi.dmall.biz.app.goods.model.GoodsCopyVO" resultType="net.danvi.dmall.biz.app.goods.model.GoodsCopyItemVO">
    /* goods.manage.selectCopyGoodsItem - 복사 대상 상품 단품정보 조회 */
	SELECT a.*,
	  tia.ATTR_VER,
	  tia.OPT_NO1,
	  tia.ATTR_NO1,
	  tia.OPT_NO2,
	  tia.ATTR_NO2,
	  tia.OPT_NO3,
	  tia.ATTR_NO3,
	  tia.OPT_NO4,
	  tia.ATTR_NO4
	  FROM (SELECT ITEM_NO,
	               SITE_NO,
	               GOODS_NO,
	               ITEM_NM,
	               USE_YN,
	               ITEM_VER,
	               SUPPLY_PRICE,
	               SEP_SUPPLY_PRICE_YN,
	               CUSTOMER_PRICE,
	               SALE_PRICE,
	               STOCK_QTT,
	               SALE_QTT
	          FROM TG_ITEM
	         WHERE GOODS_NO = #{targetGoodsNo}
	           AND USE_YN = 'Y'
	           AND DEL_YN = 'N') a
	       LEFT OUTER JOIN TG_ITEM_ATTR tia
	          ON  tia.ITEM_NO = a.ITEM_NO
	              WHERE NVL(TIA.ATTR_VER,0) = (SELECT NVL(MAX(ATTR_VER),0)
	                                    FROM TG_ITEM_ATTR
	                                   WHERE ITEM_NO = a.ITEM_NO)
    </select>

    <select id="selectCopyGoodsImage" parameterType="net.danvi.dmall.biz.app.goods.model.GoodsCopyVO" resultType="net.danvi.dmall.biz.app.goods.model.GoodsImageDtlVO">
    /* goods.manage.selectCopyGoodsImage - 상품 이미지 복사 정보 취득 */
	SELECT tis.GOODS_IMGSET_NO,
	       tis.GOODS_NO,
	       tis.DLGT_IMG_YN,
	       tid.GOODS_IMG_TYPE,
	       tid.IMG_PATH,
	       tid.IMG_NM,
	       tid.IMG_WIDTH,
	       tid.IMG_HEIGHT
	  FROM TG_GOODS_IMG_SET tis, TG_GOODS_IMG_DTL tid
	 WHERE tis.GOODS_IMGSET_NO = tid.GOODS_IMGSET_NO
	   AND tis.GOODS_NO = #{targetGoodsNo}
	 ORDER BY tis.GOODS_IMGSET_NO, tid.GOODS_IMG_TYPE
    </select>

    <insert id="insertCopyGoodsCtg">
        /* goods.manage.insertCopyGoodsCtg - 상품 카테고리 복사 등록 */
	    INSERT INTO TG_GOODS_CTG (
			   GOODS_NO
			  ,CTG_NO
			  ,SITE_NO
			  ,DLGT_CTG_YN
			  ,DISP_YN
			  ,EXPS_PRIOR_RANK
			  ,DEL_YN
	          ,REGR_NO
	          ,REG_DTTM
	    )
	    SELECT
	          #{newGoodsNo}
	        , CTG_NO
	        , SITE_NO
	        , DLGT_CTG_YN
	        , DISP_YN
	        , EXPS_PRIOR_RANK
	        , DEL_YN
	        , #{regrNo}
	        , sysdate
	    FROM TG_GOODS_CTG
	    WHERE SITE_NO = #{siteNo}
	      AND GOODS_NO = #{targetGoodsNo}
	      AND CTG_NO = #{ctgNo}
    </insert>

    <insert id="insertCopyGoodsNotify">
        /* goods.manage.insertCopyGoodsNotify - 상품 고시 정보 복사 등록 */
        INSERT INTO TG_GOODS_NOTIFY (
               GOODS_NO
			  ,ITEM_NO
			  ,ITEM_VALUE
              ,REGR_NO
              ,REG_DTTM
        )
        SELECT
             #{newGoodsNo}
            ,ITEM_NO
            ,ITEM_VALUE
            , #{regrNo}
            , sysdate
        FROM TG_GOODS_NOTIFY
        WHERE GOODS_NO = #{targetGoodsNo}
          AND ITEM_NO = #{itemNo}
    </insert>

    <insert id="insertCopyGoodsContent">
        /* goods.manage.insertCopyGoodsContent - 상품 상세 정보 복사 등록 */
        INSERT INTO TG_GOODS_DSCRT (
			    GOODS_NO
			  , SVC_GB_CD
			  , CONTENT
              , REGR_NO
              , REG_DTTM
        )
        SELECT
              #{newGoodsNo}
            , SVC_GB_CD
            , ''
            , #{regrNo}
            , sysdate
        FROM TG_GOODS_DSCRT
        WHERE GOODS_NO = #{targetGoodsNo}
    </insert>

    <insert id="insertCopyGoodsAddOpt">
        /* goods.manage.insertCopyGoodsAddOpt - 상품 추가옵션 정보 복사 등록 */
        INSERT INTO TG_ADD_OPT (
                GOODS_NO
			  , ADD_OPT_NO
			  , ADD_OPT_NM
			  , REQUIRED_YN
              , REGR_NO
              , REG_DTTM
        )
        SELECT
              #{newGoodsNo}
            , ADD_OPT_NO
            , ADD_OPT_NM
            , REQUIRED_YN
            , #{regrNo}
            , sysdate
        FROM TG_ADD_OPT
        WHERE GOODS_NO = #{targetGoodsNo}
    </insert>

    <insert id="insertCopyGoodsAddOptDtl">
        /* goods.manage.insertCopyGoodsAddOptDtl - 상품 추가옵션 상세 정보 복사 등록 */
        INSERT INTO TG_ADD_OPT_DTL (
                GOODS_NO
			  , ADD_OPT_NO
			  , ADD_OPT_DTL_SEQ
			  , ADD_OPT_VALUE
			  , ADD_OPT_AMT
			  , ADD_OPT_AMT_CHG_CD
			  , OPT_VER
              , REGR_NO
              , REG_DTTM
        )
        SELECT
              #{newGoodsNo}
            , ADD_OPT_NO
            , ADD_OPT_DTL_SEQ
            , ADD_OPT_VALUE
            , ADD_OPT_AMT
            , ADD_OPT_AMT_CHG_CD
            , OPT_VER
            , #{regrNo}
            , sysdate
        FROM TG_ADD_OPT_DTL
        WHERE GOODS_NO = #{targetGoodsNo}
    </insert>

    <insert id="insertCopyGoodsRelateGoods">
        /* goods.manage.insertCopyGoodsAddOptDtl - 상품 관련 상품 복사 등록 */
        INSERT INTO TG_RELATE_GOODS (
                GOODS_NO
			  , RELATE_GOODS_NO
			  , EACH_REG_SET_YN
			  , PRIOR_RANK
              , REGR_NO
              , REG_DTTM
        )
        SELECT
              #{newGoodsNo}
            , RELATE_GOODS_NO
            , EACH_REG_SET_YN
            , PRIOR_RANK
            , #{regrNo}
            , sysdate
        FROM TG_RELATE_GOODS
        WHERE GOODS_NO = #{targetGoodsNo}
    </insert>

    <!-- 상품 조회수 +1 -->
    <update id="updateGoodsInqCnt">
        /* goods.manage.updateGoodsInqCnt - 상품 조회수 증가 */
        UPDATE TG_GOODS
        SET
              GOODS_INQ_CNT = GOODS_INQ_CNT + 1
        WHERE GOODS_NO = #{goodsNo}
    </update>

    <!-- 최근등록 옵션조회 -->
    <select id="selectRecentOptList" resultType="net.danvi.dmall.biz.app.goods.model.GoodsOptionVO">
        /* goods.manage.selectRecentOptList - 최근등록 옵션조회 */
        SELECT *
        FROM
        (
		    SELECT utl_i18n.unescape_reference(substr(XMLAGG(XMLELEMENT(A,',',OPT_NM) order by OPT_NO asc ).EXTRACT ('//text()').GETSTRINGVAL(),2)) AS OPT_GRP_NM
                   , REG_SEQ
		      FROM TG_OPT
		     WHERE SITE_NO = #{siteNo}
		       AND USE_YN = 'Y'
		       AND REG_SEQ > 0
		     GROUP BY REG_SEQ ORDER BY REG_SEQ DESC
		 )
		 WHERE ROWNUM BETWEEN 1 AND 10
    </select>


    
    <update id="updateSupplyPriceBySeller">
        UPDATE TG_ITEM I
        SET SUPPLY_PRICE = ROUND(SALE_PRICE-(SALE_PRICE * (#{sellerCmsRate} / 100)))
        , UPD_DTTM = sysdate
        , UPDR_NO=#{regrNo}
        WHERE EXISTS ( SELECT 1 FROM TG_GOODS G
                       WHERE I.GOODS_NO = G.GOODS_NO
                         AND SITE_NO = #{siteNo}  
                         AND SELLER_NO = #{sellerNo})
        AND NVL(SEP_SUPPLY_PRICE_YN, 'N') <![CDATA[ <> ]]> 'Y'         
    </update>
    
    <!-- 단품 가격 변경 이력 등록 -->
    <insert id="insertItemPriceChgHistBySeller">
	    /* goods.manage.insertItemPriceChgHist - 단품 가격 변경 이력 등록 */
	    INSERT INTO TG_ITEM_PRICE_CHG_HIST (
	          ITEM_NO
	        , SEQ
	        , CHG_DT
	        , CHG_CD
	        , CHG_PRICE
	        , REGR_NO
	        , REG_DTTM
	    )
	    SELECT B.ITEM_NO,
	           (SELECT MAX(SEQ) FROM TG_ITEM_PRICE_CHG_HIST) + ROWNUM,
	           TO_CHAR(SYSDATE, 'YYYYMMDD'),
	           (CASE WHEN B.SUPPLY_PRICE - ROUND(B.SALE_PRICE-(B.SALE_PRICE * (#{sellerCmsRate} / 100))) <![CDATA[ > ]]> 0 THEN '01' ELSE '00' END),
	           ABS(B.SUPPLY_PRICE - ROUND(B.SALE_PRICE-(B.SALE_PRICE * (#{sellerCmsRate} / 100)))),
			   #{regrNo},
	           SYSDATE
	      FROM TG_GOODS A JOIN TG_ITEM B ON A.GOODS_NO = B.GOODS_NO
	     WHERE A.SITE_NO = #{siteNo}  
	       AND A.SELLER_NO = #{sellerNo}  
    </insert>

    <update id="updateSupplyPriceByCtg">
	   UPDATE TG_ITEM TG
	           SET SUPPLY_PRICE = (SELECT ROUND(D.SALE_PRICE-(D.SALE_PRICE * (C.CTG_CMS_RATE / 100))) 
	                                  FROM TG_GOODS A JOIN TG_GOODS_CTG B ON A.GOODS_NO = B.GOODS_NO
	                                                  JOIN TG_CTG C ON B.CTG_NO = C.CTG_NO
	                                                  JOIN TG_ITEM D ON A.ITEM_NO = D.ITEM_NO
	                                WHERE B.DLGT_CTG_YN = 'Y'
	                                  AND B.DEL_YN = 'N'                                  
	                                  AND D.ITEM_NO = TG.ITEM_NO)                         
	        , UPD_DTTM = sysdate
	        , UPDR_NO=#{regrNo}
	        WHERE EXISTS (SELECT D.ITEM_NO 
	                                  FROM TG_GOODS A JOIN TG_GOODS_CTG B ON A.GOODS_NO = B.GOODS_NO
	                                                  JOIN TG_CTG C ON B.CTG_NO = C.CTG_NO
	                                                  JOIN TG_ITEM D ON A.ITEM_NO = D.ITEM_NO
	                                WHERE A.SITE_NO = #{siteNo}
	                                  AND A.SELLER_NO = #{sellerNo}
	                                  AND B.DLGT_CTG_YN = 'Y'
	                                  AND B.DEL_YN = 'N'                                  
	                                  AND D.ITEM_NO = TG.ITEM_NO
	                            )
	        AND NVL(SEP_SUPPLY_PRICE_YN, 'N') <![CDATA[ <> ]]> 'Y'    
    </update>

    <insert id="insertItemPriceChgHistByCtg">
	    /* goods.manage.insertItemPriceChgHist - 단품 가격 변경 이력 등록 */
	    INSERT INTO TG_ITEM_PRICE_CHG_HIST (
	          ITEM_NO
	        , SEQ
	        , CHG_DT
	        , CHG_CD
	        , CHG_PRICE
	        , REGR_NO
	        , REG_DTTM
	    )
        SELECT B.ITEM_NO,
               (SELECT MAX(SEQ) FROM TG_ITEM_PRICE_CHG_HIST) + ROWNUM,
               TO_CHAR(SYSDATE, 'YYYYMMDD'),
               (CASE WHEN B.SUPPLY_PRICE - ROUND(B.SALE_PRICE-(B.SALE_PRICE * (B.CTG_CMS_RATE / 100))) <![CDATA[ > ]]> 0 THEN '01' ELSE '00' END),
               ABS(B.SUPPLY_PRICE - ROUND(B.SALE_PRICE-(B.SALE_PRICE * (B.CTG_CMS_RATE / 100)))),
               #{regrNo},
               SYSDATE
          FROM TG_GOODS A JOIN (SELECT A.GOODS_NO, A.ITEM_NO, D.SALE_PRICE, D.SUPPLY_PRICE, C.CTG_CMS_RATE 
                                  FROM TG_GOODS A JOIN TG_GOODS_CTG B ON A.GOODS_NO = B.GOODS_NO
                                                  JOIN TG_CTG C ON B.CTG_NO = C.CTG_NO
                                                  JOIN TG_ITEM D ON A.ITEM_NO = D.ITEM_NO
                                WHERE B.DLGT_CTG_YN = 'Y'
                                  AND B.DEL_YN = 'N') B ON A.GOODS_NO = B.GOODS_NO AND A.ITEM_NO = B.ITEM_NO
         WHERE A.SITE_NO = #{siteNo}  
           AND A.SELLER_NO = #{sellerNo}  
    </insert>
    
    <select id="selectBestBrandNo" resultType="String">
    	SELECT WM_CONCAT(txt) AS BEST_BRAND_NO 
    	FROM(
			SELECT A.txt 
			FROM (
			    SELECT TO_CHAR(TRIM(REGEXP_SUBSTR(wm, '[^,]+', 1, LEVEL))) AS txt 
			    FROM (
			    	SELECT WM_CONCAT(BEST_BRAND_NO) wm
			        FROM TG_CTG 
			        WHERE SITE_NO = #{siteNo}
			        <!-- AND BEST_BRAND_USE_YN = 'Y' --> 
			   	)
			    CONNECT BY INSTR(wm, ',', 1, LEVEL - 1) > 0
			) A
			GROUP BY A.txt
		) B

    </select>
    
    <select id="preGoodsRsvChk" parameterType="map" resultType="Integer">
    	SELECT COUNT(1) cnt
		FROM TO_VISIT_RSV_DTL A, TO_VISIT_RSV B
		WHERE A.RSV_NO = B.RSV_NO
		AND B.MEMBER_NO = #{memberNo}
		AND A.GOODS_NO = #{goodsNo}
		AND CANCEL_YN = 'N'

    </select>
    
    <select id="selectContactWearList" resultType="net.danvi.dmall.biz.app.goods.model.ContactWearVO">
    	/* goods.manage.selectContactWearList - 렌즈 착용샷 목록 조회 */
    	SELECT
	          tis.WEAR_IMGSET_NO
	        , tis.GOODS_NO
	        , tid.WEAR_IMG_TYPE
	        , tid.IMG_PATH
	        , tid.IMG_NM
	        , tid.WEAR_GOODS_NM
	        , tid.COLOR_VALUE
	        , tid.WEAR_CYCLE
	        , tid.GRP_DMTR
	        , tid.MATERIAL_VALUE
	        , tid.UV_INTERCEPTION_VALUE
	        , tid.QTT_VALUE
	        , tid.SALE_PRICE_VALUE
	        , tid.MKT_BNF_VALUE
	        , (SELECT IMG_PATH FROM TG_CONTACT_WEAR_ATTR_DTL WHERE tid.WEAR_IMGSET_NO = WEAR_IMGSET_NO AND WEAR_IMG_TYPE = #{lensImgType}) LENS_IMG_PATH
            , (SELECT IMG_NM FROM TG_CONTACT_WEAR_ATTR_DTL WHERE tid.WEAR_IMGSET_NO = WEAR_IMGSET_NO AND WEAR_IMG_TYPE = #{lensImgType}) LENS_IMG_NM
	    FROM TG_CONTACT_WEAR_ATTR tis, TG_CONTACT_WEAR_ATTR_DTL tid
	    WHERE tis.WEAR_IMGSET_NO = tid.WEAR_IMGSET_NO
	      AND tis.BRAND_NO = #{brandNo}
	      AND tid.WEAR_IMG_TYPE IN #{wearImgType}
	    <if test="arrWearImgsetNo != null and arrWearImgsetNo != ''">
	      AND tid.WEAR_IMGSET_NO IN (${arrWearImgsetNo})
	    </if>
    </select>
    
    <select id="selectWearImgsetNoListPaging" resultType="net.danvi.dmall.biz.app.goods.model.ContactWearVO">
    	/* goods.manage.selectWearImgsetNoListPaging - 착용샷 이미지 세트 번호 조회 */
    	SELECT PAGING_NUM as NUM, PAGING_NUM as ROW_NUM, BB.* 
    	FROM (
		 	SELECT ROW_NUMBER() OVER(ORDER BY AA.WEAR_GOODS_NM ASC) PAGING_NUM
                , AA.*
			FROM
			(
	    	SELECT  
			    WM_CONCAT(DISTINCT ''''||tis.WEAR_IMGSET_NO||'''') ARR_WEAR_IMGSET_NO
			    , tid.WEAR_GOODS_NM
			FROM TG_CONTACT_WEAR_ATTR tis, TG_CONTACT_WEAR_ATTR_DTL tid
			WHERE tis.BRAND_NO = #{brandNo}
            AND tis.WEAR_IMGSET_NO = tid.WEAR_IMGSET_NO
			GROUP BY tid.WEAR_GOODS_NM
			) AA
    	) BB
		<include refid="common.pageSql" />
    </select>
    
    <select id="selectWearImgsetNoListPagingTotalCount" resultType="Integer">
    	/* goods.manage.selectWearImgsetNoListPagingTotalCount - 착용샷 이미지 세트 번호 조회 총개수 */
    	SELECT count(1)
    	FROM (
	    	SELECT  
			    WM_CONCAT(''''||WEAR_IMGSET_NO||'''') ARR_WEAR_IMGSET_NO
			  , GOODS_NO
			FROM TG_CONTACT_WEAR_ATTR
			WHERE BRAND_NO = #{brandNo}
			GROUP BY GOODS_NO
		)
    </select>
    
    <select id="selectWearImgsetNoListPagingCount" resultType="Integer">
    	/* goods.manage.selectWearImgsetNoListPagingCount - 착용샷 이미지 세트 번호 조회 조건개수 */
    	SELECT count(1)
    	FROM (
	    	SELECT  
			    WM_CONCAT(''''||WEAR_IMGSET_NO||'''') ARR_WEAR_IMGSET_NO
			  , GOODS_NO
			FROM TG_CONTACT_WEAR_ATTR
			WHERE BRAND_NO = #{brandNo}
			GROUP BY GOODS_NO
		)
    </select>

    <insert id="insertGoodsBasicInfoMultiOptions">
    	UPDATE TG_GOODS
		SET
			  MULTI_OPT_YN = #{multiOptYn}
	        WHERE   GOODS_NO = #{goodsNo}
    </insert>

    <!-- 상품 Face Cd 정보 조회 -->
    <select id="selectGoodsFace" resultType="net.danvi.dmall.biz.app.goods.model.GoodsFaceCdVO">
        /* goods.manage.selectGoodsFace - 상품 Face Cd 정보 조회 */
        SELECT GOODS_NO
             , FD_SIZE
             , FD_SHAPE
             , FD_TONE
             , FD_STYLE
             , ED_SHAPE
             , ED_SIZE
             , ED_STYLE
             , ED_COLOR
        FROM TG_GOODS_FACE
        WHERE GOODS_NO = #{goodsNo}
    </select>

    <!-- 상품 Face Cd 정보 등록 -->
    <insert id="insertFaceCd">
        /* goods.insertFaceCd - 상품 Face Cd 정보 등록 */
        MERGE INTO TG_GOODS_FACE
            USING DUAL
            ON (GOODS_NO = #{goodsNo})
            WHEN MATCHED THEN
                UPDATE SET
                    FD_SIZE = #{fdSize}
                    , FD_SHAPE = #{fdShape}
                    , FD_TONE = #{fdTone}
                    , FD_STYLE = #{fdStyle}
                    , ED_SHAPE = #{edShape}
                    , ED_SIZE = #{edSize}
                    , ED_STYLE = #{edStyle}
                    , ED_COLOR = #{edColor}
                    , UPDR_NO = #{updrNo}
                    , UPD_DTTM = sysdate
            WHEN NOT MATCHED THEN
                INSERT (
                  GOODS_NO
                  , FD_SIZE
                  , FD_SHAPE
                  , FD_TONE
                  , FD_STYLE
                  , ED_SHAPE
                  , ED_SIZE
                  , ED_STYLE
                  , ED_COLOR
                  , REGR_NO
                  , REG_DTTM
                  , UPDR_NO
                  , UPD_DTTM
                ) VALUES (
                 #{goodsNo}
                 , #{fdSize}
                 , #{fdShape}
                 , #{fdTone}
                 , #{fdStyle}
                 , #{edShape}
                 , #{edSize}
                 , #{edStyle}
                 , #{edColor}
                 , #{regrNo}
                 , sysdate
                 , #{updrNo}
                 , sysdate
                )
    </insert>

    <!-- 상품 Size 정보 조회 -->
    <select id="selectGoodsSize" resultType="net.danvi.dmall.biz.app.goods.model.GoodsSizeCdVO">
        /* goods.manage.selectGoodsSize - 상품 Size 정보 조회 */
        SELECT GOODS_NO
             , FULL_SIZE
             , BRIDGE_SIZE
             , HORIZONTAL_LENS_SIZE
             , VERTICAL_LENS_SIZE
             , TEMPLE_SIZE
        FROM TG_GOODS_SIZE
        WHERE GOODS_NO = #{goodsNo}
    </select>

    <!-- 안경테, 선글라스 Size Cd 정보 등록 -->
    <insert id="insertSizeCd">
        /* goods.insertSizeCd - 안경테, 선글라스 Size 정보 등록 */
        MERGE INTO TG_GOODS_SIZE
            USING DUAL
            ON (GOODS_NO = #{goodsNo})
            WHEN MATCHED THEN
                UPDATE SET
                    FULL_SIZE = #{fullSize}
                    , BRIDGE_SIZE = #{bridgeSize}
                    , HORIZONTAL_LENS_SIZE = #{horizontalLensSize}
                    , VERTICAL_LENS_SIZE = #{verticalLensSize}
                    , TEMPLE_SIZE = #{templeSize}
                    , UPDR_NO = #{updrNo}
                    , UPD_DTTM = sysdate
            WHEN NOT MATCHED THEN
                INSERT (
                    GOODS_NO
                    , FULL_SIZE
                    , BRIDGE_SIZE
                    , HORIZONTAL_LENS_SIZE
                    , VERTICAL_LENS_SIZE
                    , TEMPLE_SIZE
                    , REGR_NO
                    , REG_DTTM
                    , UPDR_NO
                    , UPD_DTTM
                ) VALUES (
                     #{goodsNo}
                     , #{fullSize}
                     , #{bridgeSize}
                     , #{horizontalLensSize}
                     , #{verticalLensSize}
                     , #{templeSize}
                     , #{regrNo}
                     , sysdate
                     , #{updrNo}
                     , sysdate
                )
    </insert>

    <!-- 사은품 정보 조회 -->
    <select id="selectGoodsFreebie" resultType="net.danvi.dmall.biz.app.goods.model.GoodsFreebieGoodsVO">
        /* goods.manage.selectGoodsFace - 사은품 정보 조회 */
        SELECT
            tgf.GOODS_NO
            , free.FREEBIE_NO
            , free.FREEBIE_NM
            , (SELECT IMG_PATH FROM TG_FREEBIE_IMG_DTL WHERE FREEBIE_NO = free.FREEBIE_NO AND FREEBIE_IMG_TYPE = '05') AS IMG_PATH
            , (SELECT IMG_NM FROM TG_FREEBIE_IMG_DTL WHERE FREEBIE_NO = free.FREEBIE_NO AND FREEBIE_IMG_TYPE = '05') AS IMG_NM
        FROM TG_FREEBIE free
            ,TG_GOODS_FREEBIE tgf
        WHERE SITE_NO = #{siteNo}
          AND free.FREEBIE_NO = tgf.FREEBIE_NO
          AND tgf.GOODS_NO = #{goodsNo}
    </select>

    <!-- 사은품 정보 수정 -->
    <insert id="insertGoodsFreebie">
        /* goods.manage.insertFreebieGoods - 사은품 정보 등록/수정 */
        INSERT INTO TG_GOODS_FREEBIE (
            GOODS_NO
            , FREEBIE_NO
            , REGR_NO
            , REG_DTTM
            , UPDR_NO
            , UPD_DTTM
        ) VALUES (
            #{goodsNo}
            , #{freebieNo}
            , #{regrNo}
            , sysdate
            , #{updrNo}
            , sysdate
         )
    </insert>

    <!-- 필터 정보 등록 -->
    <insert id="insertGoodsFilter">
        /* goods.manage.insertFreebieGoods - 필터 정보 등록 */
        INSERT INTO TG_GOODS_FILTER (
                                       GOODS_NO
                                     , FILTER_NO
                                     , SITE_NO
                                     , REGR_NO
                                     , REG_DTTM
                                     , UPDR_NO
                                     , UPD_DTTM
        ) VALUES (
                     #{goodsNo}
                 , #{filterNo}
                 , #{siteNo}
                 , #{regrNo}
                 , sysdate
                 , #{updrNo}
                 , sysdate
                 )
    </insert>

    <!-- 단품 이미지 정보 등록 -->
    <insert id="insertGoodsItemImage">
        /* goods.manage.insertFreebieGoods - 필터 정보 등록 */
        INSERT INTO TG_ITEM_IMG (
                                      ITEM_NO
                                    , FILE_PATH
                                    , FILE_NM
                                    , ORG_FILE_NM
                                    , SITE_NO
                                    , REGR_NO
                                    , REG_DTTM
                                    , UPDR_NO
                                    , UPD_DTTM
        ) VALUES (
                     #{itemNo}
                 , #{filePath}
                 , #{fileNm}
                 , #{orgFileNm}
                 , #{siteNo}
                 , #{regrNo}
                 , sysdate
                 , #{updrNo}
                 , sysdate
                 )
    </insert>

    <!-- 상품 필터 정보 조회 -->
    <select id="selectGoodsFilter" resultType="net.danvi.dmall.biz.app.goods.model.GoodsFilterVO">
        /* goods.manage.selectGoodsFilter - 상품 필터 정보 조회 */
        SELECT GOODS_NO
             , FILTER_NO
        FROM TG_GOODS_FILTER
        WHERE SITE_NO = #{siteNo}
          AND GOODS_NO = #{goodsNo}
    </select>

    <!-- 안경테, 선글라스 Size Cd 삭제 -->
    <delete id="deleteGoodsSize">
        /* goods.deleteGoodsSiz - 안경테, 선글라스 Size Cd 삭제 */
        DELETE FROM TG_GOODS_SIZE
        WHERE  GOODS_NO = #{goodsNo}
    </delete>

    <!-- 사은품 정보 삭제 -->
    <delete id="deleteGoodsFreebie">
        /* goods.manage.deleteFreebieGoods - 사은품 정보 삭제 */
        DELETE FROM TG_GOODS_FREEBIE
        WHERE GOODS_NO = #{goodsNo}
          AND FREEBIE_NO = #{freebieNo}
    </delete>

    <!-- filter 정보 삭제 -->
    <delete id="deleteGoodsFilter">
        /* goods.manage.deleteGoodsFilter - filter 정보 삭제 */
        DELETE FROM TG_GOODS_FILTER
        WHERE GOODS_NO = #{goodsNo}
    </delete>

    <!-- 단품 이미지 상세 정보 삭제 -->
    <delete id="deleteGoodsItemImage">
        /* goods.manage.deleteGoodsItemImage - 단품 이미지 상세 정보 삭제 */
        DELETE FROM TG_ITEM_IMG
        WHERE ITEM_NO = #{itemNo}
    </delete>

    <select id="selectGoodsImagesCount" resultType="Integer">
        SELECT count(*)
        FROM TG_GOODS_IMG_DTL tgid
           , TG_GOODS_IMG_SET tgis
           , TG_GOODS tg
        WHERE tg.GOODS_NO = tgis.GOODS_NO
          AND tg.DEL_YN = 'N'
          AND TGID.GOODS_IMGSET_NO = TGIS.GOODS_IMGSET_NO
          AND tgid.GOODS_IMG_TYPE = '02'
          AND tg.GOODS_NO = #{goodsNo}
        ORDER BY tgis.DLGT_IMG_YN DESC, tgis.GOODS_IMGSET_NO ASC
    </select>
    <!-- 상품 이미지 정보 저장  -->
    <update id="updateGoodsImages">
        /* goods.manage.updateGoodsImages - 상품 이미지 정보 저장 */
        UPDATE TG_GOODS_IMG_DTL
        SET IMG_NM   = #{imgNm}
          , IMG_PATH = #{imgPath}
          , IMG_WIDTH = '700'
          , IMG_HEIGHT = '875'
          , UPDR_NO  = #{updrNo}
          , UPD_DTTM = sysdate
        WHERE GOODS_IMG_TYPE = '02'
          AND GOODS_IMGSET_NO IN (SELECT GOODS_IMGSET_NO
                                  FROM (SELECT ROWNUM AS IDX, A.*
                                        FROM (SELECT tg.GOODS_NO
                                                   , tgid.IMG_NM
                                                   , tgid.IMG_PATH
                                                   , tgis.DLGT_IMG_YN
                                                   , tgid.GOODS_IMGSET_NO
                                              FROM TG_GOODS_IMG_DTL tgid
                                                 , TG_GOODS_IMG_SET tgis
                                                 , TG_GOODS tg
                                              WHERE tg.GOODS_NO = tgis.GOODS_NO
                                                AND tg.DEL_YN = 'N'
                                                AND TGID.GOODS_IMGSET_NO = TGIS.GOODS_IMGSET_NO
                                                AND tgid.GOODS_IMG_TYPE = '02'
                                                AND tg.GOODS_NO = #{goodsNo}
                                              ORDER BY tgis.DLGT_IMG_YN DESC, tgis.GOODS_IMGSET_NO ASC) A)
                                  WHERE IDX BETWEEN #{imgNo} AND #{imgNo})
    </update>

    <!--<delete id="deleteGoodsImages">
        /* goods.manage.deleteGoodsImages - 이미지 세트 정보 삭제 */
        DELETE FROM TG_GOODS_IMG_SET
        WHERE GOODS_IMGSET_NO = #{goodsImgsetNo}
    </delete>

    <delete id="deleteGoodsImagesDtlSet">
        /* goods.manage.deleteGoodsImagesDtlSet - 이미지 세트 정보 삭제 */
        DELETE FROM TG_GOODS_IMG_DTL
        WHERE GOODS_IMGSET_NO = #{goodsImgsetNo}
    </delete>-->

    <select id="selectGoodsImagesSetNo" resultType="String">
        SELECT GOODS_IMGSET_NO
        FROM (SELECT ROWNUM AS IDX, A.*
              FROM (SELECT tg.GOODS_NO
                         , tgid.IMG_NM
                         , tgid.IMG_PATH
                         , tgis.DLGT_IMG_YN
                         , tgid.GOODS_IMGSET_NO
                    FROM TG_GOODS_IMG_DTL tgid
                       , TG_GOODS_IMG_SET tgis
                       , TG_GOODS tg
                    WHERE tg.GOODS_NO = tgis.GOODS_NO
                      AND tg.DEL_YN = 'N'
                      AND TGID.GOODS_IMGSET_NO = TGIS.GOODS_IMGSET_NO
                      AND tgid.GOODS_IMG_TYPE = '02'
                      AND tg.GOODS_NO = #{goodsNo}
                    ORDER BY tgis.DLGT_IMG_YN DESC, tgis.GOODS_IMGSET_NO ASC) A)
        WHERE IDX BETWEEN #{imgNo} AND #{imgNo}
    </select>
    <select id="selectMultiOptYn" resultType="String">
        /* goods.selectMultiOptYn - 다중옵션여부 체크 */
        SELECT  NVL(MULTI_OPT_YN, 'N')
        FROM    TG_GOODS
        WHERE   GOODS_NO = #{goodsNo}
    </select>

    <select id="selectGoodsInfoHistLog" resultType="net.danvi.dmall.biz.app.goods.model.GoodsVO">
        /* goods.selectGoodsInfoHistLog */
        select *
        from
            (SELECT *
            FROM (SELECT tgh.GOODS_NO,
                         to_char(tgh.CHANGE_DTTM, 'YYYY-MM-DD HH24:MI:SS') as CHANGE_DTTM,
                         (nvl2(tgh.SELLER_NO, ',판매자', '') ||
                          nvl2(tgh.COMPANY_NO, ',업체', '') ||
                          nvl2(tgh.NOTIFY_NO, ',고시정보', '') ||
                          nvl2(tgh.GOODS_NM, ',상품명', '') ||
                          nvl2(tgh.ITEM_NO, ',상품옵션', '') ||
                          nvl2(tgh.BRAND_NO, ',브랜드', '') ||
                          nvl2(tgh.GOODS_SALE_STATUS_CD, ',판매상태', '') ||
                          nvl2(tgh.DISP_YN, ',전시상태', '') ||
                          nvl2(tgh.SALE_YN, ',판매여부', '') ||
                          nvl2(tgh.SALE_START_DT, ',판매시작일', '') ||
                          nvl2(tgh.SALE_END_DT, ',판매종료일', '') ||
                          nvl2(tgh.PR_WORDS, ',상품설명', '') ||
                          nvl2(tgh.MULTI_OPT_YN, ',다중옵션여부', '') ||
                          nvl2(tgh.MMFT, ',제조사', '') ||
                          nvl2(tgh.SEO_SEARCH_WORD, ',SEO', '') ||
                          nvl2(tgh.DLVR_SET_CD, ',배송설정', '') ||
                          nvl2(tgh.DLVR_EXPECT_DAYS, ',배송소요일', '') ||
                          nvl2(tgh.GOODSEACH_DLVRC, ',상품별배송비', '') ||
                          nvl2(tgh.PACK_MAX_UNIT, ',포장최대단위', '') ||
                          nvl2(tgh.PACK_UNIT_DLVRC, ',포장단위배송비', '') ||
                          nvl2(tgh.COURI_DLVR_APPLY_YN, ',택배배송여부', '') ||
                          nvl2(tgh.DIRECT_RECPT_APPLY_YN, ',직접수령여부', '') ||
                          nvl2(tgh.DLVR_PAYMENT_KIND_CD, ',배송비결제방식', '') ||
                          nvl2(tgh.FREE_DLVR_MIN_AMT, ',무료배송최소금액', '') ||
                          nvl2(tgh.GOODSEACH_CNDTADD_DLVRC, ',상품별조건부배송비', '') ||
                          nvl2(tgh.DEL_YN, ',삭제여부', '') ||
                          nvl2(tgh.PACK_UNIT_DLVRC, ',포장단위배송비', '') ||
                          nvl2(tgh.STAMP_YN, ',스탬프여부', '') ||
                          nvl2(tgh.SMF_USE_YN, ',가상피팅여부', '') ||
                          nvl2(tgh.SELLER_MEMO, ',관리자메모', '') ||
                          nvl2(tgh.NORMAL_YN, ',일반상품', '') ||
                          nvl2(tgh.NEW_GOODS_YN, ',신상품', '') ||
                          nvl2(tgh.MALL_ORDER_YN, ',웹발주', '') ||
                          nvl2(tgh.GOODS_STAMP_TYPE_CD, ',스템프종류', '') ||
                          nvl2(tgh.EVENT_WORDS, ',이벤트글', '') ||
                          nvl2(tgh.ICON_USE_YN, ',아이콘사용여부', '') ||
                          nvl2(tgh.SALE_FOREVER_YN, ',무한판매여부', '') ||
                          nvl2(tgh.CONTENT, ',상품상세정보', '')) AS GOODS_INFO_CHANGE_LOG
                  FROM TG_GOODS_HIST2 tgh
                  WHERE tgh.GOODS_NO = #{goodsNo}
                  UNION
                  SELECT tih.GOODS_NO,
                         to_char(tih.HIST_START_DTTM, 'YYYY-MM-DD HH24:MI:SS')               AS CHANGE_DTTM,
                         (nvl2(tih.ITEM_VER, ',단품버전', '') ||
                          nvl2(tih.SUPPLY_PRICE, ',공급가', '') ||
                          nvl2(tih.SEP_SUPPLY_PRICE_YN, ',개별공급가', '') ||
                          nvl2(tih.CUSTOMER_PRICE, ',정상가', '') ||
                          nvl2(tih.SALE_PRICE, ',판매가', '') ||
                          nvl2(tih.STOCK_QTT, ',재고', '') ||
                          nvl2(tih.SALE_QTT, ',판매수량', '') ||
                          nvl2(tih.COST, ',원가', '') ||
                          nvl2(tih.APPLY_DAVISION_STOCK_YN, ',다비전연동여부', '')) AS GOODS_INFO_CHANGE_LOG
                  FROM TG_ITEM_HIST2 tih
                  WHERE tih.GOODS_NO = #{goodsNo}) A
            WHERE GOODS_INFO_CHANGE_LOG IS NOT NULL
            ORDER BY A.CHANGE_DTTM DESC)
<!--        <![CDATA[-->
<!--        where rownum <= 10-->
<!--        ]]>-->
    </select>

    <!-- 대표 단품 번호 조회 -->
    <select id="selectGoodsDlgtItemNo" resultType="String">
        /* goods.manage.selectGoodsDlgtItemNo - 대표 단품 번호 조회 */
        SELECT ITEM_NO
        FROM TG_GOODS
        WHERE   GOODS_NO = #{goodsNo}
    </select>

    <select id="selectGoodsDlgtCategory" resultType="String">
        SELECT MAX(fn_categoryName(CTG_NO, #{siteNo}))
        FROM TG_GOODS_CTG
        WHERE SITE_NO = #{siteNo}
          AND GOODS_NO = #{goodsNo}
          AND DLGT_CTG_YN = 'Y'
    </select>

    <select id="selectGoodsTypeCd" resultType="String">
        SELECT GOODS_TYPE_CD
        FROM TG_GOODS
        WHERE SITE_NO = #{siteNo}
          AND GOODS_NO = #{goodsNo}
    </select>

    <select id="selectGoodsExist" resultType="Integer">
        SELECT 1
        FROM TG_GOODS
        WHERE GOODS_NO = #{goodsNo}
    </select>

    <update id="updateGoodsEtcInfo">
        UPDATE TG_GOODS
           SET MALL_ORDER_YN = 'Y',
        <if test="mmft != null and mmft != ''">
            MMFT = #{mmft},
        </if>
            GOODS_SALE_STATUS_CD = '4',
            NORMAL_YN = 'Y',
        <if test="brandNo != null and brandNo != ''">
            BRAND_NO = #{brandNo},
        </if>
            UPDR_NO = #{updrNo},
            UPD_DTTM = sysdate
        WHERE GOODS_NO = #{goodsNo}
          and DEL_YN = 'N'
    </update>

    <select id="selectGoodsItemsInfo" resultType="net.danvi.dmall.biz.app.goods.model.GoodsItemVO">
        /* goods.manage.selectGoodsItemsInfo - 상품 단품 정보 조회 */
        SELECT a.*
        FROM (SELECT ITEM_NO,
                     SITE_NO,
                     GOODS_NO,
                     ITEM_NM,
                     USE_YN,
                     ITEM_VER,
                     COST,
                     SUPPLY_PRICE,
                     SEP_SUPPLY_PRICE_YN,
                     CUSTOMER_PRICE,
                     SALE_PRICE,
                     STOCK_QTT,
                     SALE_QTT,
                     EPM.ERP_ITM_CODE
              FROM TG_ITEM,
                   TI_ERP_PRD_MAPPING epm
              WHERE GOODS_NO = #{goodsNo}
                AND ITEM_NO = epm.MALL_ITM_CODE(+)
                AND USE_YN = 'Y'
                AND DEL_YN = 'N') a
                 LEFT OUTER JOIN TG_ITEM_ATTR tia
                                 ON  tia.ITEM_NO = a.ITEM_NO
        WHERE NVL(TIA.ATTR_VER,0) = (SELECT NVL(MAX(ATTR_VER),0)
                                     FROM TG_ITEM_ATTR
                                     WHERE ITEM_NO = a.ITEM_NO)
    </select>
</mapper>
